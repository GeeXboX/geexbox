#!/bin/sh

. config/options

export INSTALL=$ROOTFS

rm -rf $INSTALL
mkdir -p $INSTALL

# bootstrap the build environment
$SCRIPTS/build opkg-utils
$SCRIPTS/build opkg-host
$SCRIPTS/installdev opkg-utils
$SCRIPTS/installdev opkg-host

# populate the rootfs
$SCRIPTS/install base-files
$SCRIPTS/install $TARGET_LIBC
$SCRIPTS/install gcc-final
$SCRIPTS/install busybox
$SCRIPTS/install util-linux-ng
$SCRIPTS/install opkg
$SCRIPTS/install linux
$SCRIPTS/install udev
$SCRIPTS/install pcmciautils
#TODO $SCRIPTS/install ntfs-3g
#TODO $SCRIPTS/install exfat
#TODO [ "$LVM" = "yes" ] && $SCRIPTS/install LVM

$SCRIPTS/install upstart

$SCRIPTS/install alsa
[ "$XORG" = yes ] && $SCRIPTS/install Xorg
$SCRIPTS/install debug
$SCRIPTS/install enna
$SCRIPTS/install automountd
[ "$NETWORK" = yes ] && $SCRIPTS/install network
$SCRIPTS/install i18n

if false; then #TODO, disable these packages for now
[ "$CONSOLE" = yes ] && $SCRIPTS/install tvout
$SCRIPTS/install pciutils
[ "$SDL" = yes ] && $SCRIPTS/install SDL
[ "$DEVTOOLS" = yes ] && $SCRIPTS/install expedite
[ "$INSTALLATOR" = yes ] && $SCRIPTS/install installator
$SCRIPTS/install configurator
[ "$VDPAU" = yes ] && $SCRIPTS/install libvdpau
$SCRIPTS/install appleir
[ "$DEVTOOLS" = yes ] && $SCRIPTS/install strace
[ "$DEVTOOLS" = yes ] && $SCRIPTS/install lsof
[ "$FUSEISO" = yes ] && $SCRIPTS/install fuseiso
[ "$PYTHON" = yes ] && $SCRIPTS/install Python
[ "$BLUETOOTH" = yes ] && $SCRIPTS/install bluez
[ "$WIIMOTE" = yes ] && $SCRIPTS/install cwiid
[ "$EMULATORS" = yes ] && $SCRIPTS/install emulators
[ "$GAMES" = yes ] && $SCRIPTS/install games
[ "$VDR" = yes ] && $SCRIPTS/install vdr && $SCRIPTS/install vdr-plugins
[ "$GDB" = yes ] && $SCRIPTS/install gdb
[ "$EXTRACODECS" = yes ] && $SCRIPTS/install extra-codecs-nonfree
[ "$EXTRAFIRMWARES" = yes ] && $SCRIPTS/install extra-firmwares-nonfree
[ "$DEBUG" = yes ] && echo -n "" >$INSTALL/etc/debug

if [ "$BOOTCHART" = yes ]; then
  $SCRIPTS/install acct
  cp $PACKAGES/initrd/scripts/bootchartd $INSTALL/sbin
  sed -i "s/EXIT_PROC=.*/EXIT_PROC=\"enna\"/" $INSTALL/sbin/bootchartd
fi

if [ "$TARGET_ARCH" = arm -a "$BIOS" = yes ]; then
  $SCRIPTS/install xloader
  $SCRIPTS/install u-boot
fi
fi #END TODO

# create kernel modules dependancies
$SCRIPTS/installdev module-init-tools
VER=`ls $BUILD/linux*/modules/lib/modules`
rm -f $INSTALL/lib/modules/$VER/modules.*
$ROOT/$TOOLCHAIN/bin/depmod -b $INSTALL -v $VER > /dev/null
for i in `ls $INSTALL/lib/modules/*/modules.* | grep -v modules.dep | grep -v modules.alias | grep -v modules.symbols`; do
  rm -f $i
done

# strip kernel modules
for MOD in `find $INSTALL/lib/modules/ -name *.ko`; do
  $STRIP --strip-debug $MOD
done
