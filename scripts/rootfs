#!/bin/sh

. config/options

export INSTALL=$ROOTFS

rm -rf $INSTALL
mkdir -p $INSTALL

# create the mandatory files and dirs
mkdir $INSTALL/bin
mkdir $INSTALL/etc
mkdir $INSTALL/etc/ndiswrapper
mkdir $INSTALL/sbin
mkdir $INSTALL/usr
mkdir $INSTALL/usr/bin
mkdir $INSTALL/usr/sbin
mkdir $INSTALL/usr/lib
mkdir $INSTALL/lib
mkdir $INSTALL/dev
mkdir $INSTALL/mnt
mkdir $INSTALL/tmp
mkdir $INSTALL/root
mkdir $INSTALL/var
mkdir $INSTALL/var/run
mkdir $INSTALL/var/log
mkdir $INSTALL/var/lock
mkdir $INSTALL/proc
mkdir $INSTALL/sys
mkdir -p $INSTALL/codecs
mkdir -p $INSTALL/firmware

if [ $TARGET_ARCH = x86_64 -o $TARGET_ARCH = powerpc64 ]; then
  ln -s /lib $INSTALL/lib64
  ln -s lib $INSTALL/usr/lib64
fi

echo -n "" > $INSTALL/etc/mtab
echo -n "" > $INSTALL/etc/fstab
echo -n "" > $INSTALL/var/mnts

# populate the rootfs
$SCRIPTS/install $TARGET_LIBC
$SCRIPTS/install gcc-final
$SCRIPTS/install busybox
$SCRIPTS/install udev
$SCRIPTS/install pcmciautils
$SCRIPTS/install zlib
$SCRIPTS/install ntfs-3g
$SCRIPTS/install linux modules
$SCRIPTS/install linux config
$SCRIPTS/install exfat
$SCRIPTS/install util-linux-ng blkid
[ "$LVM" = "yes" ] && $SCRIPTS/install LVM


$SCRIPTS/install alsa
[ "$CONSOLE" = yes ] && $SCRIPTS/install tvout
$SCRIPTS/install pciutils
[ "$XORG" = yes ] && $SCRIPTS/install Xorg
[ "$SDL" = yes ] && $SCRIPTS/install SDL
$SCRIPTS/install debug
$SCRIPTS/install enna
[ "$INSTALLATOR" = yes ] && $SCRIPTS/install installator
$SCRIPTS/install configurator
$SCRIPTS/install i18n
[ "$VDPAU" = yes ] && $SCRIPTS/install libvdpau
$SCRIPTS/install appleir
$SCRIPTS/install automountd
$SCRIPTS/install upstart
[ "$DEVTOOLS" = yes ] && $SCRIPTS/install strace
[ "$NETWORK" = yes ] && $SCRIPTS/install network
[ "$FUSEISO" = yes ] && $SCRIPTS/install fuseiso
[ "$PYTHON" = yes ] && $SCRIPTS/install Python
[ "$BLUETOOTH" = yes ] && $SCRIPTS/install bluez
[ "$WIIMOTE" = yes ] && $SCRIPTS/install cwiid
[ "$EMULATORS" = yes ] && $SCRIPTS/install emulators
[ "$GAMES" = yes ] && $SCRIPTS/install games
[ "$VDR" = yes ] && $SCRIPTS/install vdr && $SCRIPTS/install vdr-plugins
[ "$GDB" = yes ] && $SCRIPTS/install gdb
[ "$EXTRACODECS" = yes ] && $SCRIPTS/install extra-codecs-nonfree
[ "$EXTRAFIRMWARES" = yes ] && $SCRIPTS/install extra-firmwares-nonfree
[ "$STATS" = yes ] && $SCRIPTS/install stats
[ "$DEBUG" = yes ] && echo -n "" >$INSTALL/etc/debug

if [ "$BOOTCHART" = yes ]; then
  $SCRIPTS/install acct
  cp $PACKAGES/initrd/scripts/bootchartd $INSTALL/sbin
  sed -i "s/EXIT_PROC=.*/EXIT_PROC=\"enna\"/" $INSTALL/sbin/bootchartd
fi

if [ "$TARGET_ARCH" = arm ]; then
  $SCRIPTS/install xloader
  $SCRIPTS/install u-boot
fi

# create kernel modules dependancies
VER=`ls $BUILD/linux*/modules/lib/modules`
rm -f $INSTALL/lib/modules/$VER/modules.*
$BUILD/module-init-tool*/host/depmod -b $INSTALL -v $VER > /dev/null
for i in `ls $INSTALL/lib/modules/*/modules.* | grep -v modules.dep | grep -v modules.alias | grep -v modules.symbols`; do
  rm -f $i
done

# strip kernel modules
for MOD in `find $INSTALL/lib/modules/ -name *.ko`; do
  $STRIP --strip-debug $MOD
done

# copy system and config files
cp $PACKAGES/initrd/scripts/linuxrc $INSTALL
cp $PACKAGES/initrd/scripts/console $INSTALL/sbin
cp $PACKAGES/initrd/scripts/r[ow] $INSTALL/usr/bin

[ "$FUSEISO" = yes ] && cp $CONFIG/cdvdimg_ext $INSTALL/etc
cp $CONFIG/file_ext $INSTALL/etc
cp $CONFIG/list_ext $INSTALL/etc
cp $CONFIG/subs_ext $INSTALL/etc

ln -s /bin/busybox $INSTALL/bin/sh
ln -s /firmware $INSTALL/lib
echo $TARGET_ARCH > $INSTALL/etc/arch

if [ -n "$TARGET_PLATFORM" ]; then
  echo "${GEEXBOX_VERSION}-${TARGET_PLATFORM}" > $INSTALL/etc/version
else
  echo "${GEEXBOX_VERSION}" > $INSTALL/etc/version
fi







