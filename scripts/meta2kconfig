#!/bin/sh

. config/path
. config/use

KCONFIG=$1

# process a package and write its configuration stanza to Kconfig.packages
do_package() {
  package=$1
  [ -f packages/$package/install ] || continue

  get_meta $package

  KCONFIG_NAME="$PKG_NAME"
  [ -n "$PKG_SHORTDESC" ] && KCONFIG_NAME="$KCONFIG_NAME - $PKG_SHORTDESC"
  cat >> $KCONFIG <<EOF
config PKG_$PKG_NAME
  tristate "$KCONFIG_NAME"
EOF
  if [ "$PKG_ARCH" != any -a "$PKG_ARCH" != all ]; then
    archlist=""
    for a in $PKG_ARCH; do
      if [ -z "$archlist" ]; then
        archlist="TARGET_ARCH_$a"
      else
        archlist="$archlist || TARGET_ARCH_$a"
      fi
    done
    echo "  depends on ( $archlist )" >> $KCONFIG
  fi
  [ "$PKG_LICENSE" = "non-free" ] && echo "  depends on TAINT" >> $KCONFIG
  for d in $PKG_DEPENDS; do
    echo "  select PKG_$d" >> $KCONFIG
  done

  for use in $PKG_USE; do
    if [ "$use"="uclibc" ]; then
      for p in $PKG_RUN_DEPENDS_uclibc; do
        echo "  select PKG_$p if TARGET_LIBC_UCLIBC" >> $KCONFIG
      done
      for p in $PKG_DEPENDS_uclibc; do
        echo "  select PKG_$p if TARGET_LIBC_UCLIBC" >> $KCONFIG
      done
    fi
  done

  [ -n "$PKG_KCONFIG_DEPENDS" ] && echo "$PKG_KCONFIG_DEPENDS" >> $KCONFIG
  [ -n "$PKG_LONGDESC" ] && cat >> $KCONFIG <<EOF
  help
    $PKG_LONGDESC
EOF
  echo >> $KCONFIG
  for use in $PKG_USE; do
    [ "$use" = uclibc ] && continue

    use_name=`valueof "PKG_USE_NAME_${use}"`
    [ -z "$use_name" ] && use_name=$use
    use_desc=`valueof "PKG_USE_DESC_${use}"`
    [ -z "$use_desc" ] && use_desc="Enable $use_name support"
    use_help=`valueof "PKG_USE_HELP_${use}"`
    [ -z "$use_help" ] && use_help="$use_desc"

    cat >> $KCONFIG <<EOF
config GX_${PKG_NAME}_${use}
  bool "$use_desc"
  default y if USE_$use
  default n
  depends on PKG_${PKG_NAME}
  help
    $use_help
EOF
    for p in `valueof "PKG_RUN_DEPENDS_${use}"`; do
      echo "  select PKG_$p" >> $KCONFIG
    done
    for p in `valueof "PKG_DEPENDS_${use}"`; do
      echo "  select PKG_$p" >> $KCONFIG
    done
  done
  if [ -n "$PKG_KCONFIG_EXTRA" ]; then
    echo "$PKG_KCONFIG_EXTRA" >> $KCONFIG
    echo >> $KCONFIG
  fi
}

# Kconfig.packages generation starts here
rm -f $KCONFIG

# populate SEC_$section variables with list of packages per section
for package in packages/*; do
  package=`echo $package | sed s:packages/::`
  [ -f packages/$package/meta ] || continue
  # source the package meta to populate PKG_SECTION
  PKG_SECTION=
  . packages/$package/meta
  old=
  cmd=
  var="SEC_$PKG_SECTION"
  old="`valueof $var`"
  cmd="$var=\"$old $package\""
  eval $cmd
done

# generate Kconfig menus for the various sections
for section in admin libs misc net sound utils video x11; do
  echo "menu \"$section\"" >> $KCONFIG
  for package in `valueof "SEC_$section"`; do
    do_package $package
  done
  echo endmenu >> $KCONFIG
done

exit 0

