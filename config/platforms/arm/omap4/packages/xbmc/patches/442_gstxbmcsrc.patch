diff --git a/xbmc/cores/gstplayer/GstPlayer.cpp b/xbmc/cores/gstplayer/GstPlayer.cpp
index f299bcb..782dfcd 100644
--- a/xbmc/cores/gstplayer/GstPlayer.cpp
+++ b/xbmc/cores/gstplayer/GstPlayer.cpp
@@ -55,9 +55,15 @@
 #include "dialogs/GUIDialogKaiToast.h"
 #include "utils/StringUtils.h"
 #include "Util.h"
+#include "DVDInputStreams/DVDInputStream.h"
+#include "DVDInputStreams/DVDInputStreamFile.h"
+#include "DVDInputStreams/DVDFactoryInputStream.h"
+#include "DVDInputStreams/DVDInputStreamNavigator.h"
+#include "DVDInputStreams/DVDInputStreamTV.h"
 #include <gst/app/gstappsink.h>
 #include <gst/dmabuf/dmabuf.h>
 #include <gst/video/video-crop.h>
+#include <gst/base/gstbasesrc.h>
 
 #include "../dvdplayer/DVDCodecs/Video/DVDVideoCodec.h"
 
@@ -74,6 +80,538 @@
 static bool has_ti_raw_video = false;
 //static int has_dmabuf; // ???
 extern "C" {
+/******************************************************************/
+G_BEGIN_DECLS
+
+#define GST_TYPE_XBMC_SRC \
+  (gst_xbmc_src_get_type())
+#define GST_XBMC_SRC(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_XBMC_SRC,GstXbmcSrc))
+#define GST_XBMC_SRC_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_XBMC_SRC,GstXbmcSrcClass))
+#define GST_IS_XBMC_SRC(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_XBMC_SRC))
+#define GST_IS_XBMC_SRC_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_XBMC_SRC))
+#define GST_XBMC_SRC_CAST(obj) ((GstXbmcSrc*) obj)
+
+typedef struct _GstXbmcSrc GstXbmcSrc;
+typedef struct _GstXbmcSrcClass GstXbmcSrcClass;
+
+/**
+ * GstXbmcSrc:
+ */
+struct _GstXbmcSrc {
+  GstBaseSrc element;
+
+  /*< private >*/
+  gchar *filename;			/* filename */
+  gchar *uri;				/* caching the URI */
+  guint64 read_position;		/* position of file */
+
+  gboolean seekable;                    /* whether the file is seekable */
+};
+
+struct _GstXbmcSrcClass {
+  GstBaseSrcClass parent_class;
+};
+
+GType gst_xbmc_src_get_type (void);
+
+G_END_DECLS
+/**********************************************************************/
+static GstStaticPadTemplate srctemplate = GST_STATIC_PAD_TEMPLATE ("src",
+    GST_PAD_SRC,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS_ANY);
+
+#ifndef O_BINARY
+#define O_BINARY (0)
+#endif
+
+#define _(String) String
+#define N_(String) String
+
+#define USE_GSTXBMCSRC
+
+static CDVDInputStream* m_pInputStream = NULL;
+
+static gint64 xbmcsrc_seek(gint64 offset, int whence)
+{
+  return m_pInputStream->Seek(offset, whence);
+}
+static int xbmcsrc_read(guchar* buf, int size)
+{
+  return m_pInputStream->Read(buf,size);
+}
+static guint64 xbmcsrc_get_length()
+{
+  return m_pInputStream->GetLength();
+}
+static void xbmcsrc_close()
+{
+  return;
+}
+static gboolean xbmcsrc_open (const gchar * filename, int flags, int mode)
+{
+  return TRUE;
+}
+
+GST_DEBUG_CATEGORY_STATIC (gst_xbmc_src_debug);
+#define GST_CAT_DEFAULT gst_xbmc_src_debug
+
+enum
+{
+  /* FILL ME */
+  LAST_SIGNAL
+};
+
+enum
+{
+  ARG_0,
+  ARG_LOCATION
+};
+
+static void gst_xbmc_src_finalize (GObject * object);
+
+static void gst_xbmc_src_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec);
+static void gst_xbmc_src_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec);
+
+static gboolean gst_xbmc_src_start (GstBaseSrc * basesrc);
+static gboolean gst_xbmc_src_stop (GstBaseSrc * basesrc);
+
+static gboolean gst_xbmc_src_is_seekable (GstBaseSrc * src);
+static gboolean gst_xbmc_src_get_size (GstBaseSrc * src, guint64 * size);
+static GstFlowReturn gst_xbmc_src_create (GstBaseSrc * src, guint64 offset,
+    guint length, GstBuffer ** buffer);
+static gboolean gst_xbmc_src_query (GstBaseSrc * src, GstQuery * query);
+
+static void gst_xbmc_src_uri_handler_init (gpointer g_iface,
+    gpointer iface_data);
+
+static void
+_do_init (GType xbmcsrc_type)
+{
+  static const GInterfaceInfo urihandler_info = {
+    gst_xbmc_src_uri_handler_init,
+    NULL,
+    NULL
+  };
+
+  g_type_add_interface_static (xbmcsrc_type, GST_TYPE_URI_HANDLER,
+      &urihandler_info);
+  GST_DEBUG_CATEGORY_INIT (gst_xbmc_src_debug, "xbmcsrc", 0, "xbmcsrc element");
+}
+
+GST_BOILERPLATE_FULL (GstXbmcSrc, gst_xbmc_src, GstBaseSrc, GST_TYPE_BASE_SRC,
+    _do_init);
+
+static void
+gst_xbmc_src_base_init (gpointer g_class)
+{
+  GstElementClass *gstelement_class = GST_ELEMENT_CLASS (g_class);
+
+  gst_element_class_set_details_simple (gstelement_class,
+      "Xbmc Source",
+      "Source/Xbmc",
+      "Read from arbitrary point from xbmc inputstream",
+      "xbmc.org");
+  gst_element_class_add_pad_template (gstelement_class,
+      gst_static_pad_template_get (&srctemplate));
+}
+
+static void
+gst_xbmc_src_class_init (GstXbmcSrcClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstBaseSrcClass *gstbasesrc_class;
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gstbasesrc_class = GST_BASE_SRC_CLASS (klass);
+
+  gobject_class->set_property = gst_xbmc_src_set_property;
+  gobject_class->get_property = gst_xbmc_src_get_property;
+
+  g_object_class_install_property (gobject_class, ARG_LOCATION,
+      g_param_spec_string ("location", "File Location",
+          "Location of the file to read", NULL,
+          GParamFlags(G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY)));
+
+  gobject_class->finalize = gst_xbmc_src_finalize;
+
+  gstbasesrc_class->start = GST_DEBUG_FUNCPTR (gst_xbmc_src_start);
+  gstbasesrc_class->stop = GST_DEBUG_FUNCPTR (gst_xbmc_src_stop);
+  gstbasesrc_class->is_seekable = GST_DEBUG_FUNCPTR (gst_xbmc_src_is_seekable);
+  gstbasesrc_class->get_size = GST_DEBUG_FUNCPTR (gst_xbmc_src_get_size);
+  gstbasesrc_class->create = GST_DEBUG_FUNCPTR (gst_xbmc_src_create);
+  gstbasesrc_class->query = GST_DEBUG_FUNCPTR (gst_xbmc_src_query);
+#if 0
+  if (sizeof (off_t) < 8) {
+    GST_LOG ("No large file support, sizeof (off_t) = %" G_GSIZE_FORMAT "!",
+        sizeof (off_t));
+  }
+#endif
+}
+
+static void
+gst_xbmc_src_init (GstXbmcSrc * src, GstXbmcSrcClass * g_class)
+{
+  src->filename = NULL;
+  src->uri = NULL;
+}
+
+static void
+gst_xbmc_src_finalize (GObject * object)
+{
+  GstXbmcSrc *src;
+
+  src = GST_XBMC_SRC (object);
+
+  xbmcsrc_close();
+
+  g_free (src->filename);
+  g_free (src->uri);
+
+  G_OBJECT_CLASS (parent_class)->finalize (object);
+}
+
+static gboolean
+gst_xbmc_src_set_location (GstXbmcSrc * src, const gchar * location)
+{
+  GstState state;
+
+  /* the element must be stopped in order to do this */
+  GST_OBJECT_LOCK (src);
+  state = GST_STATE (src);
+  if (state != GST_STATE_READY && state != GST_STATE_NULL)
+    goto wrong_state;
+  GST_OBJECT_UNLOCK (src);
+
+  g_free (src->filename);
+  g_free (src->uri);
+
+  /* clear the filename if we get a NULL (is that possible?) */
+  if (location == NULL) {
+    src->filename = NULL;
+    src->uri = NULL;
+  } else {
+    /* we store the filename as received by the application. On Windoes this
+     * should be UTF8 */
+    src->filename = g_strdup (location);
+    src->uri = gst_uri_construct ("xbmc", src->filename);
+  }
+  g_object_notify (G_OBJECT (src), "location");
+  gst_uri_handler_new_uri (GST_URI_HANDLER (src), src->uri);
+
+  return TRUE;
+
+  /* ERROR */
+wrong_state:
+  {
+    g_warning ("Changing the `location' property on xbmcsrc when it is open"
+        "is not supported.");
+    GST_OBJECT_UNLOCK (src);
+    return FALSE;
+  }
+}
+
+static void
+gst_xbmc_src_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstXbmcSrc *src;
+
+  g_return_if_fail (GST_IS_XBMC_SRC (object));
+
+  src = GST_XBMC_SRC (object);
+
+  switch (prop_id) {
+    case ARG_LOCATION:
+      gst_xbmc_src_set_location (src, g_value_get_string (value));
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_xbmc_src_get_property (GObject * object, guint prop_id, GValue * value,
+    GParamSpec * pspec)
+{
+  GstXbmcSrc *src;
+
+  g_return_if_fail (GST_IS_XBMC_SRC (object));
+
+  src = GST_XBMC_SRC (object);
+
+  switch (prop_id) {
+    case ARG_LOCATION:
+      g_value_set_string (value, src->filename);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static GstFlowReturn
+gst_xbmc_src_create_read (GstXbmcSrc * src, guint64 offset, guint length,
+    GstBuffer ** buffer)
+{
+  int ret;
+  GstBuffer *buf;
+
+  if (G_UNLIKELY (src->read_position != offset)) {
+    off_t res;
+
+    res = xbmcsrc_seek (offset, SEEK_SET);
+    if (G_UNLIKELY (res < 0 || res != offset))
+      goto seek_failed;
+
+    src->read_position = offset;
+  }
+
+  buf = gst_buffer_try_new_and_alloc (length);
+  if (G_UNLIKELY (buf == NULL && length > 0)) {
+    GST_ERROR_OBJECT (src, "Failed to allocate %u bytes", length);
+    return GST_FLOW_ERROR;
+  }
+
+  /* No need to read anything if length is 0 */
+  if (length > 0) {
+    GST_LOG_OBJECT (src, "Reading %d bytes at offset 0x%" G_GINT64_MODIFIER "x",
+        length, offset);
+    ret = xbmcsrc_read (GST_BUFFER_DATA (buf), length);
+    if (G_UNLIKELY (ret < 0))
+      goto could_not_read;
+
+    /* seekable regular files should have given us what we expected */
+    if (G_UNLIKELY ((guint) ret < length && src->seekable))
+      goto unexpected_eos;
+
+    /* other files should eos if they read 0 and more was requested */
+    if (G_UNLIKELY (ret == 0 && length > 0))
+      goto eos;
+
+    length = ret;
+    GST_BUFFER_SIZE (buf) = length;
+    GST_BUFFER_OFFSET (buf) = offset;
+    GST_BUFFER_OFFSET_END (buf) = offset + length;
+
+    src->read_position += length;
+  }
+
+  *buffer = buf;
+
+  return GST_FLOW_OK;
+
+  /* ERROR */
+seek_failed:
+  {
+    GST_ELEMENT_ERROR (src, RESOURCE, READ, (NULL), GST_ERROR_SYSTEM);
+    return GST_FLOW_ERROR;
+  }
+could_not_read:
+  {
+    GST_ELEMENT_ERROR (src, RESOURCE, READ, (NULL), GST_ERROR_SYSTEM);
+    gst_buffer_unref (buf);
+    return GST_FLOW_ERROR;
+  }
+unexpected_eos:
+  {
+    GST_ELEMENT_ERROR (src, RESOURCE, READ, (NULL),
+        ("unexpected end of file."));
+    gst_buffer_unref (buf);
+    return GST_FLOW_ERROR;
+  }
+eos:
+  {
+    GST_DEBUG ("non-regular file hits EOS");
+    gst_buffer_unref (buf);
+    return GST_FLOW_UNEXPECTED;
+  }
+}
+
+static GstFlowReturn
+gst_xbmc_src_create (GstBaseSrc * basesrc, guint64 offset, guint length,
+    GstBuffer ** buffer)
+{
+  GstXbmcSrc *src;
+  GstFlowReturn ret;
+
+  src = GST_XBMC_SRC_CAST (basesrc);
+
+  ret = gst_xbmc_src_create_read (src, offset, length, buffer);
+
+  return ret;
+}
+
+static gboolean
+gst_xbmc_src_query (GstBaseSrc * basesrc, GstQuery * query)
+{
+  gboolean ret = FALSE;
+  GstXbmcSrc *src = GST_XBMC_SRC (basesrc);
+
+  switch (GST_QUERY_TYPE (query)) {
+    case GST_QUERY_URI:
+      gst_query_set_uri (query, src->uri);
+      ret = TRUE;
+      break;
+    default:
+      ret = FALSE;
+      break;
+  }
+
+  if (!ret)
+    ret = GST_BASE_SRC_CLASS (parent_class)->query (basesrc, query);
+
+  return ret;
+}
+
+static gboolean
+gst_xbmc_src_is_seekable (GstBaseSrc * basesrc)
+{
+  GstXbmcSrc *src = GST_XBMC_SRC (basesrc);
+
+  return src->seekable;
+}
+
+static gboolean
+gst_xbmc_src_get_size (GstBaseSrc * basesrc, guint64 * size)
+{
+  GstXbmcSrc *src;
+
+  src = GST_XBMC_SRC (basesrc);
+
+  if (!src->seekable) {
+    /* If it isn't seekable, we won't know the length (but fstat will still
+     * succeed, and wrongly say our length is zero. */
+    return FALSE;
+  }
+
+  *size = xbmcsrc_get_length();
+  return TRUE;
+}
+
+/* open the file and mmap it, necessary to go to READY state */
+static gboolean
+gst_xbmc_src_start (GstBaseSrc * basesrc)
+{
+  gboolean ret = FALSE;
+  GstXbmcSrc *src = GST_XBMC_SRC (basesrc);
+
+  if (src->filename == NULL || src->filename[0] == '\0')
+    goto no_filename;
+
+  GST_INFO_OBJECT (src, "opening file %s", src->filename);
+  /* open the file */
+  ret = xbmcsrc_open (src->filename, O_RDONLY | O_BINARY, 0);
+
+  if (!ret)
+    goto open_failed;
+
+  src->read_position = 0;
+
+  src->seekable = xbmcsrc_seek(0, SEEK_POSSIBLE);
+  if(src->seekable)
+    xbmcsrc_seek(0, SEEK_SET);
+
+  return TRUE;
+
+  /* ERROR */
+no_filename:
+  {
+    GST_ELEMENT_ERROR (src, RESOURCE, NOT_FOUND,
+        (_("No file name specified for reading.")), (NULL));
+    return FALSE;
+  }
+open_failed:
+  {
+    return FALSE;
+  }
+}
+
+static gboolean
+gst_xbmc_src_stop (GstBaseSrc * basesrc)
+{
+  //GstXbmcSrc *src = GST_XBMC_SRC (basesrc);
+
+  /* close the file */
+  //xbmcsrc_close ();
+
+  return TRUE;
+}
+
+/*** GSTURIHANDLER INTERFACE *************************************************/
+
+static GstURIType
+gst_xbmc_src_uri_get_type (void)
+{
+  return GST_URI_SRC;
+}
+
+static gchar **
+gst_xbmc_src_uri_get_protocols (void)
+{
+  static gchar *protocols[] = { (char *) "xbmc", NULL };
+
+  return protocols;
+}
+
+static const gchar *
+gst_xbmc_src_uri_get_uri (GstURIHandler * handler)
+{
+  GstXbmcSrc *src = GST_XBMC_SRC (handler);
+
+  return src->uri;
+}
+
+static gboolean
+gst_xbmc_src_uri_set_uri (GstURIHandler * handler, const gchar * uri)
+{
+  gchar *location;
+  gboolean ret = FALSE;
+  GstXbmcSrc *src = GST_XBMC_SRC (handler);
+
+  if (strcmp (uri, "xbmc://") == 0) {
+    /* Special case for "file://" as this is used by some applications
+     *  to test with gst_element_make_from_uri if there's an element
+     *  that supports the URI protocol. */
+    gst_xbmc_src_set_location (src, NULL);
+    return TRUE;
+  }
+
+  location = g_strdup(uri+strlen("xbmc://"));
+
+  if (!location) {
+    GST_WARNING_OBJECT (src, "Invalid URI '%s' for filesrc", uri);
+    goto beach;
+  }
+
+  ret = gst_xbmc_src_set_location (src, location);
+
+beach:
+  if (location)
+    g_free (location);
+
+  return ret;
+}
+
+static void
+gst_xbmc_src_uri_handler_init (gpointer g_iface, gpointer iface_data)
+{
+  GstURIHandlerInterface *iface = (GstURIHandlerInterface *) g_iface;
+
+  iface->get_type = gst_xbmc_src_uri_get_type;
+  iface->get_protocols = gst_xbmc_src_uri_get_protocols;
+  iface->get_uri = gst_xbmc_src_uri_get_uri;
+  iface->set_uri = gst_xbmc_src_uri_set_uri;
+}
+/**********************************************************************/
 /* ************************************************************************* */
 static PFNEGLCREATEIMAGEKHRPROC eglCreateImageKHR;
 static PFNEGLDESTROYIMAGEKHRPROC eglDestroyImageKHR;
@@ -685,6 +1223,7 @@ void CGstPlayer::OnDecodedBuffer(GstElement *appsink, void *data)
 bool CGstPlayer::CreatePlayBin()
 {
   GstElement *videosink, *audiosink=NULL;
+  gst_element_register (NULL, "xbmcsrc", GST_RANK_PRIMARY,gst_xbmc_src_get_type ());
   m_playbin = gst_element_factory_make("playbin2", "playbin0");
   if(!m_playbin)
   {
@@ -891,6 +1430,28 @@ bool CGstPlayer::SetAndWaitPlaybinState(GstState newstate, int timeout)
 
 
 
+bool CGstPlayer::OpenInputStream()
+{
+#ifdef USE_GSTXBMCSRC
+  std::string filename = m_item.GetPath();
+  std::string mimetype = m_item.GetMimeType();
+  m_pInputStream = CDVDFactoryInputStream::CreateInputStream(this, filename, mimetype);
+  if(m_pInputStream == NULL)
+  {
+    CLog::Log(LOGERROR, "CGstPlayer::OpenInputStream - unable to create input stream for [%s]", filename.c_str());
+    return false;
+  }
+  else
+    m_pInputStream->SetFileItem(m_item);
+
+  if (!m_pInputStream->Open(filename.c_str(), mimetype))
+  {
+    CLog::Log(LOGERROR, "CGstPlayer::OpenInputStream - error opening [%s]", filename.c_str());
+    return false;
+  }
+#endif
+  return true;
+}
 
 
 void CGstPlayer::Process()
@@ -901,12 +1462,20 @@ void CGstPlayer::Process()
   GstState old, current, pending;
   bool eos = false;
   int i;
+
+  if (!OpenInputStream())
+    return;
+
   CLog::Log(LOGNOTICE, "Player thread start %p", m_playbin);
   if (m_playbin) {
+#ifdef USE_GSTXBMCSRC
+    g_object_set(G_OBJECT(m_playbin), "uri", "xbmc:///filestub", NULL);
+#else
     CURL url = m_item.GetAsUrl();
     CStdString uri = ParseAndCorrectUrl(url);
     CLog::Log(LOGNOTICE, "Play uri %s", uri.c_str());
     g_object_set(G_OBJECT(m_playbin), "uri", uri.c_str(), NULL);
+#endif
 
     if ((SetAndWaitPlaybinState(GST_STATE_PAUSED, 60)==false) || (m_cancelled)){
       m_bStop = true;
@@ -1384,3 +1953,21 @@ void CGstPlayer::GetVideoRect(CRect& SrcRect, CRect& DestRect)
   g_renderManager.GetVideoRect(SrcRect, DestRect);
 }
 
+int CGstPlayer::OnDVDNavResult(void* pData, int iMessage)
+{
+  CLog::Log(LOGNOTICE, "---[%s]---", __FUNCTION__);
+  return 0;
+}
+
+void CGstPlayer::OnExit()
+{
+#ifdef USE_GSTXBMCSRC
+  // destroy the inputstream
+  if (m_pInputStream)
+  {
+    CLog::Log(LOGNOTICE, "CGstPlayer::OnExit() deleting input stream");
+    delete m_pInputStream;
+  }
+  m_pInputStream = NULL;
+#endif
+}
diff --git a/xbmc/cores/gstplayer/GstPlayer.h b/xbmc/cores/gstplayer/GstPlayer.h
index 5bab985..aeb6f1a 100644
--- a/xbmc/cores/gstplayer/GstPlayer.h
+++ b/xbmc/cores/gstplayer/GstPlayer.h
@@ -51,7 +51,7 @@
    MediaVideoInfo * video_info;
 } MediaInfo;
 
-class CGstPlayer : public IPlayer, public CThread
+class CGstPlayer : public IPlayer, public CThread, public IDVDPlayer
 {
 public:
   CGstPlayer(IPlayerCallback& callback);
@@ -112,6 +112,9 @@ class CGstPlayer : public IPlayer, public CThread
   virtual void GetAudioStreamName(int iStream, CStdString &strStreamName);
   virtual void SetAudioStream(int iStream);
   virtual int GetAudioStream();
+  virtual int OnDVDNavResult(void* pData, int iMessage);
+  virtual void OnExit();
+  bool OpenInputStream();
 
   
 private:

