diff --git a/drivers/video/dovefb/dovefb_gfx.c b/drivers/video/dovefb/dovefb_gfx.c
index de62255..b1d1403 100644
--- a/drivers/video/dovefb/dovefb_gfx.c
+++ b/drivers/video/dovefb/dovefb_gfx.c
@@ -58,6 +58,7 @@ static void dovefb_set_defaults(struct dovefb_layer_info *dfli);
 
 #ifdef CONFIG_TDA19988
 extern const char *tda19988_get_edid(int *num_of_blocks);
+extern void tda19988_register_edid_work(struct work_struct *work_queue);
 extern int tda19988_configure_tx_inout(int x, int y, int interlaced, int hz);
 #endif
 
@@ -627,6 +628,7 @@ static int dovefb_gfx_set_par(struct fb_info *fi)
 	x = readl(dfli->reg_base + LCD_SPU_DUMB_CTRL);
 	if ((x & 0x1) == 0)
 		writel(x | 1, dfli->reg_base + LCD_SPU_DUMB_CTRL);
+
 #ifdef CONFIG_TDA19988
 	printk(KERN_DEBUG "%s: Setting HDMI TX resolution to %dx%d%c @ %d\n",
 	       __func__,m->xres, m->yres, 
@@ -648,6 +650,7 @@ static int dovefb_pan_display(struct fb_var_screeninfo *var,
 	return 0;
 }
 
+#ifdef CONFIG_PM
 static int dovefb_pwr_off_sram(struct dovefb_layer_info *dfli)
 {
 	unsigned int x;
@@ -677,6 +680,7 @@ static int dovefb_pwr_on_sram(struct dovefb_layer_info *dfli)
 
 	return 0;
 }
+#endif
 
 static int dovefb_blank(int blank, struct fb_info *fi)
 {
@@ -1032,12 +1036,14 @@ static int dovefb_gfx_ioctl(struct fb_info *info, unsigned int cmd,
 		}
 		break;
 	case DOVEFB_IOCTL_SET_EDID_INTERVAL:
+#ifndef CONFIG_TDA19988
 		if (!dfli->ddc_polling_disable) {
 			dfli->edid_info.interval = (arg > 0) ? arg :
 				DEFAULT_EDID_INTERVAL;
 			mod_timer(&dfli->get_edid_timer, jiffies +
 				  dfli->edid_info.interval * HZ);
 		}
+#endif
 		break;
 
 	default:
@@ -1047,6 +1053,7 @@ static int dovefb_gfx_ioctl(struct fb_info *info, unsigned int cmd,
 	return 0;
 }
 
+#ifdef CONFIG_FB_DOVE_CLCD_EDID
 static bool dovefb_edid_block_valid(u8 *raw_edid)
 {
 	int i;
@@ -1150,7 +1157,6 @@ out:
 	return NULL;
 }
 
-#ifdef CONFIG_FB_DOVE_CLCD_EDID
 static u8 *pull_edid_from_i2c(int busid, int addr)
 {
 	struct i2c_adapter *dove_i2c;
@@ -1517,6 +1523,7 @@ int dovefb_gfx_resume(struct dovefb_layer_info *dfli)
 }
 #endif
 
+#ifndef CONFIG_TDA19988
 static void dynamic_get_edid(unsigned long data)
 {
 	struct dovefb_layer_info *dfli = (struct dovefb_layer_info *) data;
@@ -1525,6 +1532,7 @@ static void dynamic_get_edid(unsigned long data)
 		  dfli->edid_info.interval * HZ);
 	schedule_work(&dfli->work_queue);
 }
+#endif
 
 static bool is_new_edid(u8 *new_edid, struct dovefb_layer_info *dfli)
 {
@@ -1678,12 +1686,17 @@ int dovefb_gfx_init(struct dovefb_info *info, struct dovefb_mach_info *dmi)
 	 */
 	dfli->ddc_polling_disable = dmi->ddc_polling_disable;
 	if (!dmi->ddc_polling_disable) {
+		INIT_WORK(&dfli->work_queue, get_edid_work);
+
+#ifndef CONFIG_TDA19988
 		init_timer(&dfli->get_edid_timer);
 		dfli->get_edid_timer.expires = jiffies + HZ;
 		dfli->get_edid_timer.data = (unsigned long)dfli;
 		dfli->get_edid_timer.function = dynamic_get_edid;
 		add_timer(&dfli->get_edid_timer);
-		INIT_WORK(&dfli->work_queue, get_edid_work);
+#else
+		tda19988_register_edid_work(&dfli->work_queue);
+#endif
 	} else {
 		dfli->edid_info.connect = 1;
 		dfli->edid_info.change = 1;
diff --git a/drivers/video/dovefb/nxp_hdmi/tda998x.c b/drivers/video/dovefb/nxp_hdmi/tda998x.c
index 43314b2..41f6bd7 100755
--- a/drivers/video/dovefb/nxp_hdmi/tda998x.c
+++ b/drivers/video/dovefb/nxp_hdmi/tda998x.c
@@ -73,6 +73,8 @@ static struct cdev our_cdev, *this_cdev=&our_cdev;
 static int initialized = 0;
 static int saved_mode = -1;
 static cec_callback_t cec_callback = NULL;
+static struct work_struct *edid_work_queue = NULL;
+
 
 #ifdef ANDROID_DSS
 static struct omap_video_timings video_640x480at60Hz_panel_timings = {
@@ -940,6 +942,9 @@ static void eventCallbackTx(tmdlHdmiTxEvent_t event)
          By default, let go on with next case and activate
          default video/audio settings with tmdlHdmiTxSetInputOutput()
       */
+      
+      if (edid_work_queue)
+         schedule_work(edid_work_queue);
 
       TRY(tmdlHdmiTxGetEdidSinkType(this->tda.instance,     \
                                     &this->tda.setio.sink));
@@ -1918,6 +1923,12 @@ static int this_i2c_probe(struct i2c_client *client, const struct i2c_device_id
 
 /* CuBox specific stuff */
 /* Addions to get EDID stuff out of the transmitter driver */
+
+void tda19988_register_edid_work(struct work_struct *work_queue)
+{
+   edid_work_queue = work_queue;
+}
+
 const char *tda19988_get_edid(int *num_of_blocks)
 {
    tda_instance* this = &our_instance;
