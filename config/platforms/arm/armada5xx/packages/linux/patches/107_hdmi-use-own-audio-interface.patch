diff --git a/drivers/video/dovefb/nxp_hdmi/Makefile b/drivers/video/dovefb/nxp_hdmi/Makefile
index 9d492d3..463e916 100755
--- a/drivers/video/dovefb/nxp_hdmi/Makefile
+++ b/drivers/video/dovefb/nxp_hdmi/Makefile
@@ -128,6 +128,9 @@ hdmicec-objs := tda998x_cec.o
 #hdmitx-objs += tda998x_i2c.o
 hdmicec-objs += tda998x_i2c.o
 
+hdmitx-objs += tda998x_dai.o
+
+
 # NXP comps
 ifeq ($(TDA_TX),TDA19989)
 hdmitx-objs += $(TXSRC)/tmdlHdmiTx.o
diff --git a/drivers/video/dovefb/nxp_hdmi/tda998x.c b/drivers/video/dovefb/nxp_hdmi/tda998x.c
index eca28c9..e459a4d 100755
--- a/drivers/video/dovefb/nxp_hdmi/tda998x.c
+++ b/drivers/video/dovefb/nxp_hdmi/tda998x.c
@@ -34,9 +34,7 @@
 //#include <mach/display.h>
 
 /* HDMI DevLib */
-#include "tmNxCompId.h"
-#include "tmdlHdmiTx_Types.h"
-#include "tmdlHdmiTx_Functions.h"
+#include "tmdlHdmiTx.h"
 
 /* local */
 #include "tda998x_version.h"
@@ -562,8 +560,8 @@ static char *tda_ioctl(int io)
  */
 static int tda_spy(int verbose)
 {
-   tda_instance *this=&our_instance;
-   int i,err=0;
+   tda_instance *this = &our_instance;
+   int i,err = 0;
 
    if (!verbose) {
       return err;
@@ -710,7 +708,7 @@ static int tda_spy(int verbose)
  */
 void hdcp_on(tda_instance *this)
 {
-   int err=0;
+   int err = 0;
 
    if (this->tda.hdcp_status != HDCP_IS_NOT_INSTALLED) { /* check HDCP is installed ... */
          if (this->tda.hdcp_enable) { /* ... but requested ! */ 
@@ -733,7 +731,7 @@ void hdcp_on(tda_instance *this)
  */
 void hdcp_off(tda_instance *this)
 {
-   int err=0;
+   int err = 0;
 
    if (this->tda.hdcp_status != HDCP_IS_NOT_INSTALLED) { /* check HDCP is installed ... */
 
@@ -750,7 +748,7 @@ void hdcp_off(tda_instance *this)
  */
 void show_video(tda_instance *this)
 {
-   int err=0;
+   int err = 0;
 
    if (this->tda.rx_device_active) { /* check RxSens */
       if (this->tda.hot_plug_detect == TMDL_HDMITX_HOTPLUG_ACTIVE) { /* should be useless, but legacy... */
@@ -781,9 +779,9 @@ void show_video(tda_instance *this)
  */
 static void interrupt_polling(struct work_struct *dummy)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    tmdlHdmiTxEvent_t prevEvent;
-   int err=0, loopCnt=0;
+   int err = 0, loopCnt=0;
 
    do {
       prevEvent = this->tda.event;
@@ -813,8 +811,8 @@ static void interrupt_polling(struct work_struct *dummy)
  */
 static void hdcp_check(struct work_struct *dummy)
 {
-   int err=0;
-   tda_instance *this=&our_instance;
+   int err = 0;
+   tda_instance *this = &our_instance;
    tmdlHdmiTxHdcpCheck_t hdcp_status;
 
    down(&this->driver.sem);
@@ -858,7 +856,7 @@ static void hdcp_check(struct work_struct *dummy)
 
 void register_cec_interrupt(cec_callback_t fct)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
 
    if (initialized) 
 	this->driver.cec_callback = fct;
@@ -869,7 +867,7 @@ EXPORT_SYMBOL(register_cec_interrupt);
 
 void unregister_cec_interrupt(void)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
 
    cec_callback = NULL;
    this->driver.cec_callback = NULL;
@@ -909,8 +907,8 @@ static irqreturn_t tda_irq(int irq, void *_udc)
  */
 static void eventCallbackTx(tmdlHdmiTxEvent_t event)
 {
-   tda_instance *this=&our_instance;
-   int err=0;
+   tda_instance *this = &our_instance;
+   int err = 0;
    unsigned short new_addr;
 #if defined (TMFL_TDA19989) || defined (TMFL_TDA9984) 
    tda_hdcp_fail hdcp_fail;
@@ -1007,7 +1005,7 @@ static void eventCallbackTx(tmdlHdmiTxEvent_t event)
  */
 static int hdmi_tx_init(tda_instance *this)
 {
-   int err=0;
+   int err = 0;
 
    LOG(KERN_INFO,"called\n");
 
@@ -1110,8 +1108,8 @@ static int hdmi_tx_init(tda_instance *this)
 
 void reset_hdmi(int hdcp_module)
 {
-   tda_instance *this=&our_instance;
-   int err=0;
+   tda_instance *this = &our_instance;
+   int err = 0;
 
    down(&this->driver.sem);
 
@@ -1156,9 +1154,9 @@ EXPORT_SYMBOL(reset_hdmi);
 /*
  *  
  */
-short edid_phy_addr(void)
+unsigned short edid_phy_addr(void)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
 
    return this->tda.src_address;
 }
@@ -1169,7 +1167,7 @@ EXPORT_SYMBOL(edid_phy_addr);
  */
 tda_power get_hdmi_status(void)
 { 
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    
    return this->tda.power;
 }
@@ -1180,7 +1178,7 @@ EXPORT_SYMBOL(get_hdmi_status);
  */
 tda_power get_hpd_status(void)
 { 
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    
    return (this->tda.hot_plug_detect == TMDL_HDMITX_HOTPLUG_ACTIVE);
 }
@@ -1191,7 +1189,7 @@ EXPORT_SYMBOL(get_hpd_status);
  */
 int edid_received(void)
 { 
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    
    return (this->tda.event == TMDL_HDMITX_EDID_RECEIVED);
 }
@@ -1202,8 +1200,8 @@ EXPORT_SYMBOL(edid_received);
  */
 int hdmi_enable(void)
 {
-   tda_instance *this=&our_instance;
-   int err=0;
+   tda_instance *this = &our_instance;
+   int err = 0;
 
    LOG(KERN_INFO,"called\n");
 
@@ -1233,8 +1231,8 @@ EXPORT_SYMBOL(hdmi_enable);
  */
 int hdmi_disable(int event_tracking)
 { 
-   tda_instance *this=&our_instance;
-   int err=0;
+   tda_instance *this = &our_instance;
+   int err = 0;
    
    LOG(KERN_INFO,"called\n");
 
@@ -1265,7 +1263,7 @@ EXPORT_SYMBOL(hdmi_disable);
  */
 static int hdmi_panel_probe(struct omap_dss_device *dssdev)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
 
    LOG(KERN_INFO," called\n");
 
@@ -1412,7 +1410,7 @@ static int this_cdev_open(struct inode *pInode, struct file *pFile)
 static long this_cdev_ioctl(struct file *pFile, unsigned int cmd, unsigned long arg)
 {
    tda_instance* this = pFile->private_data;
-   int err=0;
+   int err = 0;
 
    LOG(KERN_INFO,":%s\n",tda_ioctl(_IOC_NR(cmd)));
 
@@ -1822,8 +1820,8 @@ static int this_cdev_release(struct inode *pInode, struct file *pFile)
  */
 static int this_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-   tda_instance *this=&our_instance;
-   int err=0;
+   tda_instance *this = &our_instance;
+   int err = 0;
 
    LOG(KERN_INFO,"called\n");
 
@@ -1919,18 +1917,26 @@ static int this_i2c_probe(struct i2c_client *client, const struct i2c_device_id
 /* Addions to get EDID stuff out of the transmitter driver */
 const char *tda19988_get_edid(int *num_of_blocks)
 {
-	tda_instance* this = &our_instance;
-	if (!initialized) return NULL;
-	tmdlHdmiTxGetEdidStatus(this->tda.instance, &this->tda.edid.status, &this->tda.edid.block_count);
-	if (this->tda.edid.status) return NULL;
-	tmdlHdmiTxGetEdidMonitorDescriptors(this->tda.instance, \
-                                            this->tda.edid_md.desc1, \
-                                            this->tda.edid_md.desc2, \
-                                            this->tda.edid_md.other, \
-                                            this->tda.edid_md.max, \
-                                            &this->tda.edid_md.written);
-	*num_of_blocks = this->tda.edid.block_count;
-	return  this->tda.raw_edid;
+   tda_instance* this = &our_instance;
+
+   if (!initialized)
+      return NULL;
+
+   tmdlHdmiTxGetEdidStatus(this->tda.instance, 
+                           &this->tda.edid.status, 
+                           &this->tda.edid.block_count);
+   if (this->tda.edid.status) 
+      return NULL;
+
+   tmdlHdmiTxGetEdidMonitorDescriptors(this->tda.instance, \
+                                       this->tda.edid_md.desc1, \
+                                       this->tda.edid_md.desc2, \
+                                       this->tda.edid_md.other, \
+                                       this->tda.edid_md.max, \
+                                       &this->tda.edid_md.written);
+   *num_of_blocks = this->tda.edid.block_count;
+   
+   return this->tda.raw_edid;
 }
 
 static struct {
@@ -2013,43 +2019,109 @@ static struct {
 
 int tda19988_configure_tx_inout(int x, int y, int interlaced, int hz)
 {
-	tda_instance* this = &our_instance;
-	int i, d, mode = -1, rateDiff = 1000;
-
-	for (i = 0; rateDiff && i < sizeof(resolution_to_video_format); i++) {
-		if (	(x == resolution_to_video_format[i].x) &&
-			(y == resolution_to_video_format[i].y) &&
-			(interlaced == resolution_to_video_format[i].interlaced) ) {
-			d = abs(resolution_to_video_format[i].hz - hz);
-			if (d < rateDiff) {
-				rateDiff = d;
-				mode = resolution_to_video_format[i].vmode;
-			}
-		}
-	}
-
-	if (mode < 0) {
-		printk (KERN_ERR "HDMI TX - no matching resolution %dx%d%c %dHz\n",x,y,interlaced ? 'i':'p',hz);
-		return 0;
-	}
-
-	if (rateDiff == 0)
-		printk (KERN_INFO "HDMI TX - FOUND exact resolution %d\n",mode);
-	else
-		printk (KERN_INFO "HDMI TX - Found good candidate %d (requested %dhz, found %dhz)\n",
-			mode,hz,resolution_to_video_format[mode].hz);
-
-	if (initialized) {
-	    if (this->tda.setio.video_in.format != mode) {
-            this->tda.setio.video_in.format = mode;
-            this->tda.setio.video_out.format = mode;
-    		show_video(this);
-    	}
-	} else {
-		saved_mode = mode;
-	}
-
-	return 1;
+   tda_instance* this = &our_instance;
+   int i, d, mode = -1, rateDiff = INT_MAX;
+
+   for (i = 0; rateDiff && i < ARRAY_SIZE(resolution_to_video_format); i++) {
+      
+      if ((x == resolution_to_video_format[i].x) &&
+          (y == resolution_to_video_format[i].y) &&
+          (interlaced == resolution_to_video_format[i].interlaced) ) {
+         
+         d = abs(resolution_to_video_format[i].hz - hz);
+         if (d < rateDiff) {
+            rateDiff = d;
+            mode = resolution_to_video_format[i].vmode;
+         }
+      }
+   }
+
+   if (mode < 0) {
+      printk (KERN_ERR "HDMI TX - no matching resolution %dx%d%c %dHz\n",x,y,interlaced ? 'i':'p',hz);
+      return 0;
+   }
+
+   if (rateDiff == 0)
+      printk (KERN_INFO "HDMI TX - FOUND exact resolution %d\n",mode);
+   else
+      printk (KERN_INFO "HDMI TX - Found good candidate %d (requested %dhz, found %dhz)\n",
+              mode,hz,resolution_to_video_format[mode].hz);
+
+   if (initialized) {
+      down(&this->driver.sem);
+
+      if (this->tda.setio.video_in.format != mode) {
+
+         this->tda.setio.video_in.format = mode;
+         this->tda.setio.video_out.format = mode;
+         show_video(this);
+      }
+      
+      up(&this->driver.sem);
+   } else {
+      saved_mode = mode;
+   }
+
+   return 1;
+}
+
+void tda19988_set_audio_rate(unsigned rate)
+{
+   static struct { unsigned rate; tmdlHdmiTxAudioRate_t code; } rateMap[] = {
+      {  32000,  TMDL_HDMITX_AFS_32K },
+      {  44100,  TMDL_HDMITX_AFS_44K }, 
+      {  48000,  TMDL_HDMITX_AFS_48K },
+      {  88200,  TMDL_HDMITX_AFS_88K },
+      {  96000,  TMDL_HDMITX_AFS_96K },
+      { 176400, TMDL_HDMITX_AFS_176K },
+      { 192000, TMDL_HDMITX_AFS_192K }
+   };
+
+   tda_instance *this = &our_instance;
+   unsigned i, temp, rateDiff = INT_MAX, err = 0;
+   tmdlHdmiTxAudioRate_t rateCode = this->tda.setio.audio_in.rate;
+
+   if(!initialized)
+      return;
+
+   for (i = 0; rateDiff && i < ARRAY_SIZE(rateMap); i++) {
+      temp = abs(rateMap[i].rate - rate);
+      if( temp < rateDiff) {
+         rateCode = rateMap[i].code;
+         rateDiff = temp;
+      }
+   }
+
+   printk(KERN_INFO "HDMI TX - setting audio rate to %d (%d -> %d)\n", 
+          rate, this->tda.setio.audio_in.rate, rateCode);
+
+   down(&this->driver.sem);
+
+   if (this->tda.setio.audio_in.rate != rateCode) {
+
+      // Hack: temporary switch to I2S to avoid audio lockup
+      TRY(tmdlHdmiTxSetAudioMute(this->tda.instance, true));
+      msleep(5);
+   
+      this->tda.setio.audio_in.format = TMDL_HDMITX_AFMT_I2S;
+      TRY(tmdlHdmiTxSetAudioInput(this->tda.instance, \
+                                  this->tda.setio.audio_in, \
+                                  this->tda.setio.sink));
+      msleep(30);
+
+      // set new audio sampling rate
+      this->tda.setio.audio_in.rate = rateCode;
+      this->tda.setio.audio_in.format = TMDL_HDMITX_AFMT_SPDIF;
+      TRY(tmdlHdmiTxSetAudioInput(this->tda.instance, \
+                                 this->tda.setio.audio_in, \
+                                 this->tda.setio.sink));
+      msleep(5);
+   }
+      
+TRY_DONE:
+   tmdlHdmiTxSetAudioMute(this->tda.instance, this->tda.audio_mute);
+
+   up(&this->driver.sem);
 }
 
 
@@ -2058,8 +2130,8 @@ int tda19988_configure_tx_inout(int x, int y, int interlaced, int hz)
  */
 static int this_i2c_remove(struct i2c_client *client)
 {
-   tda_instance *this=&our_instance;
-   int err=0;
+   tda_instance *this = &our_instance;
+   int err = 0;
 
    LOG(KERN_INFO,"called\n");
 
@@ -2120,7 +2192,7 @@ static struct file_operations this_cdev_fops = {
 
 static ssize_t reso_show(struct device *dev,struct device_attribute *attr, char *buf)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
 
    return sprintf(buf,"format video %d ( %s )\n", \
                   this->tda.setio.video_in.format,                  \
@@ -2130,7 +2202,7 @@ static ssize_t reso_show(struct device *dev,struct device_attribute *attr, char
 static ssize_t reso_store(struct device *dev,
                           struct device_attribute *attr, const char *buf, size_t size)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    int resolution=0;
 
    sscanf(buf,"%d",&resolution);
@@ -2159,7 +2231,7 @@ static ssize_t reso_store(struct device *dev,
 
 static ssize_t audio_show(struct device *dev,struct device_attribute *attr, char *buf)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    printk("Audio Show\n");
 
    tda_spy_audio(&this->tda.setio.audio_in);
@@ -2175,7 +2247,7 @@ static ssize_t audio_show(struct device *dev,struct device_attribute *attr, char
 static ssize_t audio_store(struct device *dev,
                            struct device_attribute *attr, const char *buf, size_t size)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    char desc_format[]="%d - %d - %d - %d - %d - %d\n";
    tda_audio_in audio;
    
@@ -2220,7 +2292,7 @@ static ssize_t i2cR_store(struct device *dev,
       adb shell "echo '2 1' >/sys/hdmitx/i2cR"
       ... read page 0x02 address 0x01
    */
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    tmHdmiTxobject_t *p;
    tmErrorCode_t err;
    unsigned int address;
@@ -2242,7 +2314,7 @@ static ssize_t i2cW_store(struct device *dev,
      ... write 0x02 page 0x02 address 0x01 using mask 0x03
    */
 
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    tmHdmiTxobject_t *p;
    tmErrorCode_t err;
    unsigned int page,address,mask,value;
@@ -2274,7 +2346,7 @@ static struct device_attribute *display_sysfs_attrs[] = {
 
 static int comm_init(void)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    int retval=0;
    int i=0;	
    struct device_attribute *attr;
@@ -2302,7 +2374,7 @@ static int comm_init(void)
 
 static void comm_exit(void)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    int i=0;	
    struct device_attribute *attr;
    while ((attr = display_sysfs_attrs[i++]) != NULL) {
@@ -2316,9 +2388,9 @@ static void comm_exit(void)
  */
 static int __init tx_init(void)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
    dev_t dev=0;
-   int err=0;
+   int err = 0;
 
    /* 
       general device context
@@ -2447,7 +2519,7 @@ static int __init tx_init(void)
  */
 static void __exit tx_exit(void)
 {
-   tda_instance *this=&our_instance;
+   tda_instance *this = &our_instance;
 
    LOG(KERN_INFO,"called\n");
 
diff --git a/drivers/video/dovefb/nxp_hdmi/tda998x_cec.c b/drivers/video/dovefb/nxp_hdmi/tda998x_cec.c
index ff79f31..0c91523 100755
--- a/drivers/video/dovefb/nxp_hdmi/tda998x_cec.c
+++ b/drivers/video/dovefb/nxp_hdmi/tda998x_cec.c
@@ -34,7 +34,6 @@
 #include <linux/gpio.h>
 
 /* HDMI DevLib */
-#include "tmNxCompId.h"
 #include "tmdlHdmiCEC.h"
 #include "tmdlHdmiCEC_local.h"
 
@@ -557,10 +556,10 @@ static void cec_listen_multi(cec_instance *this,
  */
 static void cec_interrupt(struct work_struct *dummy)
 {
-   cec_instance *this=&our_instance;
+   cec_instance *this = &our_instance;
    cec_power display_active = get_hpd_status();
    unsigned short new_phy_addr = edid_phy_addr();
-   int err=0;
+   int err = 0;
    
    LOG(KERN_INFO,"called\n");
    
@@ -682,7 +681,7 @@ void polling_timeout(unsigned long arg)
 #if 0
    /* fake frame for equipement-less testing */
 
-      cec_instance *this=&our_instance;
+      cec_instance *this = &our_instance;
 
       if (this->driver.timer.data++>1000) {
          printk(KERN_INFO "Fake Rx message\n");
@@ -710,7 +709,7 @@ void polling_timeout(unsigned long arg)
  */
 static irqreturn_t tda_irq(int irq, void *_udc)
 {
-   cec_instance *this=&our_instance;
+   cec_instance *this = &our_instance;
    /*    printk(KERN_INFO "DBG caught irq:%d\n",irq); */
  
    /* do it now */
@@ -740,8 +739,8 @@ static void user_control(int key, int press)
  */
 static void eventCallbackCEC(tmdlHdmiCecEvent_t event, unsigned char *data, unsigned char length)
 {
-   int err=0;
-   cec_instance *this=&our_instance;
+   int err = 0;
+   cec_instance *this = &our_instance;
    int opcode;
    int initiator,receiver;
    cec_frame *frame;
@@ -1041,7 +1040,7 @@ static void eventCallbackCEC(tmdlHdmiCecEvent_t event, unsigned char *data, unsi
  */
 static int hdmi_cec_init(cec_instance *this, const char *osd_name)
 {
-   int err=0;
+   int err = 0;
 
    /* Real opening */
    TRY(tmdlHdmiCecOpen(&this->cec.inst));
@@ -1130,7 +1129,7 @@ static int this_cdev_open(struct inode *pInode, struct file *pFile)
 static long this_cdev_ioctl(struct file *pFile, unsigned int cmd, unsigned long arg)
 {
    cec_instance* this = pFile->private_data;
-   int err=0;
+   int err = 0;
 
    LOG(KERN_INFO,":%s\n",cec_ioctl(_IOC_NR(cmd)));
 
@@ -2184,8 +2183,8 @@ static int this_cdev_release(struct inode *pInode, struct file *pFile)
  */
 static int __devinit this_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
-   cec_instance *this=&our_instance;
-   int err=0;
+   cec_instance *this = &our_instance;
+   int err = 0;
 
    LOG(KERN_INFO,"called\n");
 
@@ -2277,8 +2276,8 @@ static int __devinit this_i2c_probe(struct i2c_client *client, const struct i2c_
  */
 static int this_i2c_remove(struct i2c_client *client)
 {
-   cec_instance *this=&our_instance;
-   int err=0;
+   cec_instance *this = &our_instance;
+   int err = 0;
 
    LOG(KERN_INFO,"called\n");
 
@@ -2328,9 +2327,9 @@ static struct file_operations this_cdev_fops = {
  */
 static int __init cec_init(void)
 {
-   cec_instance *this=&our_instance;
+   cec_instance *this = &our_instance;
    dev_t dev=0;
-   int err=0;
+   int err = 0;
 
    /* 
       general device context
@@ -2428,7 +2427,7 @@ static int __init cec_init(void)
  */
 static void __exit cec_exit(void)
 {
-   cec_instance *this=&our_instance;
+   cec_instance *this = &our_instance;
    
    LOG(KERN_INFO,"called\n");
    
diff --git a/drivers/video/dovefb/nxp_hdmi/tda998x_dai.c b/drivers/video/dovefb/nxp_hdmi/tda998x_dai.c
new file mode 100644
index 0000000..7da34b9
--- /dev/null
+++ b/drivers/video/dovefb/nxp_hdmi/tda998x_dai.c
@@ -0,0 +1,104 @@
+/*
+ * ALSA SoC HDMI DIT driver (CuBox)
+ *
+ * Author:      Ruediger Ihle, <r.ihle@s-t.de>
+ * Copyright:   (C) 2012 Ruediger Ihle
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#undef HDMIDITDEBUG
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/slab.h>
+#include <sound/soc.h>
+#include <sound/pcm.h>
+#include <sound/initval.h>
+
+
+extern void tda19988_set_audio_rate(unsigned rate);
+
+
+#ifdef HDMIDITDEBUG
+#  define DPRINTK(fmt, args...) printk(KERN_INFO "%s: " fmt, __func__ , ## args)
+#else
+#  define DPRINTK(fmt, args...)
+#endif
+
+
+#define DRV_NAME "hdmi-dit"
+
+#define STUB_RATES	(SNDRV_PCM_RATE_32000 | \
+	 	 	 SNDRV_PCM_RATE_44100 | \
+	 	 	 SNDRV_PCM_RATE_48000 | \
+	 	 	 SNDRV_PCM_RATE_88200 | \
+	 	 	 SNDRV_PCM_RATE_96000 | \
+	 	 	 SNDRV_PCM_RATE_176400 | \
+	 	 	 SNDRV_PCM_RATE_192000)
+
+#define STUB_FORMATS	(SNDRV_PCM_FMTBIT_S16_LE | \
+			 SNDRV_PCM_FMTBIT_IEC958_SUBFRAME_LE | \
+			 SNDRV_PCM_FMTBIT_IEC958_SUBFRAME_BE)
+
+			 
+static int hdmi_dit_hw_params(struct snd_pcm_substream *substream,
+			       struct snd_pcm_hw_params *params, 
+			       struct snd_soc_dai *dai)
+{
+	DPRINTK("substream = %p, params = %p\n", substream, params);
+	DPRINTK("rate = %d\n", params_rate(params));
+	DPRINTK("dai = %s\n", dai->name);
+	
+	tda19988_set_audio_rate(params_rate(params));
+
+	return 0;
+}
+
+static struct snd_soc_codec_driver soc_codec_hdmi_dit;
+
+static struct snd_soc_dai_ops hdmi_dit_ops = {
+	.hw_params	= hdmi_dit_hw_params,
+};
+
+static struct snd_soc_dai_driver dit_stub_dai = {
+	.name		= "hdmi-hifi",
+	.playback 	= {
+		.stream_name	= "Playback",
+		.channels_min	= 1,
+		.channels_max	= 384,
+		.rates		= STUB_RATES,
+		.formats	= STUB_FORMATS,
+	},
+	.ops			= &hdmi_dit_ops,
+};
+
+static int hdmi_dit_probe(struct platform_device *pdev)
+{
+	return snd_soc_register_codec(&pdev->dev, &soc_codec_hdmi_dit,
+			&dit_stub_dai, 1);
+}
+
+static int hdmi_dit_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_codec(&pdev->dev);
+	return 0;
+}
+
+static struct platform_driver hdmi_dit_driver = {
+	.probe		= hdmi_dit_probe,
+	.remove		= hdmi_dit_remove,
+	.driver		= {
+		.name	= DRV_NAME,
+		.owner	= THIS_MODULE,
+	},
+};
+
+module_platform_driver(hdmi_dit_driver);
+
+MODULE_AUTHOR("Ruediger Ihle <r.ihle@s-t.de>");
+MODULE_DESCRIPTION("HDMI audio codec driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:" DRV_NAME);
diff --git a/drivers/video/dovefb/nxp_hdmi/tda998x_exports.h b/drivers/video/dovefb/nxp_hdmi/tda998x_exports.h
index 9fcb5ba..a2ecfb6 100644
--- a/drivers/video/dovefb/nxp_hdmi/tda998x_exports.h
+++ b/drivers/video/dovefb/nxp_hdmi/tda998x_exports.h
@@ -27,7 +27,7 @@ int hdmi_disable(int event_tracking);
 void reset_hdmi(int hdcp_module);
 
 int edid_received(void);
-short edid_phy_addr(void); 
+unsigned short edid_phy_addr(void); 
 tmPowerState_t get_hdmi_status(void);
 tmPowerState_t get_hpd_status(void);
 
diff --git a/sound/soc/kirkwood/kirkwood-spdif.c b/sound/soc/kirkwood/kirkwood-spdif.c
index 226de76..d5a2c0b 100644
--- a/sound/soc/kirkwood/kirkwood-spdif.c
+++ b/sound/soc/kirkwood/kirkwood-spdif.c
@@ -41,28 +41,15 @@ static int kirkwood_spdif_hw_params(struct snd_pcm_substream *substream,
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	struct snd_soc_dai *codec_dai = rtd->codec_dai;
 
-#if 1
 	DPRINTK("substream = %p, params = %p\n", substream, params);
 	DPRINTK("rate = %d\n", params_rate(params));
 	DPRINTK("codec_dai = %s\n", codec_dai->name);
-	return 0;
+
+#if 1
+	(void)codec_dai;
+	return 0;	// our "codecs" don't support set_sysclk() 
 #else
-	unsigned int freq;
-
-	switch (params_rate(params)) {
-	default:
-	case 44100:
-		freq = 11289600;
-		break;
-	case 48000:
-		freq = 12288000;
-		break;
-	case 96000:
-		freq = 24576000;
-		break;
-	}
-	
-	return snd_soc_dai_set_sysclk(codec_dai, 0, freq, SND_SOC_CLOCK_IN);
+	return snd_soc_dai_set_sysclk(codec_dai, 0, params_rate(params) * 256, SND_SOC_CLOCK_IN);
 #endif
 }
 
@@ -70,26 +57,23 @@ static struct snd_soc_ops kirkwood_spdif_ops = {
 	.hw_params = kirkwood_spdif_hw_params,
 };
 
-static struct snd_soc_dai_link kirkwood_spdif_dai0[] = {
+static struct snd_soc_dai_link kirkwood_spdif_dai[] = {
 	{
 		.name = "SPDIF0",
 		.stream_name = "SPDIF0 PCM Playback",
 		.platform_name = "kirkwood-pcm-audio.0",
 		.cpu_dai_name = "kirkwood-i2s.0",
 		.codec_dai_name = "dit-hifi",
-		.codec_name = "spdif-dit",
+		.codec_name = "spdif-dit",			// standard SPDIF receiver
 		.ops = &kirkwood_spdif_ops,
 	},
-};
-
-static struct snd_soc_dai_link kirkwood_spdif_dai1[] = {
 	{
 		.name = "SPDIF1",
 		.stream_name = "IEC958 Playback",
 		.platform_name = "kirkwood-pcm-audio.1",
 		.cpu_dai_name = "kirkwood-i2s.1",
-		.codec_dai_name = "dit-hifi",
-		.codec_name = "spdif-dit",
+		.codec_dai_name = "hdmi-hifi",
+		.codec_name = "hdmi-dit",			// CuBox HDMI
 		.ops = &kirkwood_spdif_ops,
 	},
 };
@@ -97,6 +81,7 @@ static struct snd_soc_dai_link kirkwood_spdif_dai1[] = {
 static int __devinit kirkwood_spdif_probe(struct platform_device *pdev)
 {
 	struct snd_soc_card *card;
+	struct snd_soc_dai_link *link;
 	struct kirkwood_spdif_data *data;
 	struct platform_device *spdif_dit;
 	int ret;
@@ -106,7 +91,9 @@ static int __devinit kirkwood_spdif_probe(struct platform_device *pdev)
 	if (pdev->id < 0 || pdev->id > 1)
 		return -EINVAL;
 
-	spdif_dit = platform_device_alloc("spdif-dit", -1);
+	link = &kirkwood_spdif_dai[pdev->id];
+
+	spdif_dit = platform_device_alloc(link->codec_name, -1);
 	if (spdif_dit == NULL) {
 		dev_err(&pdev->dev, "unable to allocate spdif device\n");
 		return -ENOMEM;
@@ -137,10 +124,7 @@ static int __devinit kirkwood_spdif_probe(struct platform_device *pdev)
 
 	card->name = "Kirkwood SPDIF";
 	card->owner = THIS_MODULE;
-	if (pdev->id == 0)
-		card->dai_link = kirkwood_spdif_dai0;
-	else
-		card->dai_link = kirkwood_spdif_dai1;
+	card->dai_link = link;
 	card->num_links = 1;
 	card->dev = &pdev->dev;
 	snd_soc_card_set_drvdata(card, data);
