diff --git a/drivers/video/dovefb/nxp_hdmi/comps/tmdlHdmiCEC/src/tmdlHdmiCEC.c b/drivers/video/dovefb/nxp_hdmi/comps/tmdlHdmiCEC/src/tmdlHdmiCEC.c
index e6d2a6e..d18a506 100755
--- a/drivers/video/dovefb/nxp_hdmi/comps/tmdlHdmiCEC/src/tmdlHdmiCEC.c
+++ b/drivers/video/dovefb/nxp_hdmi/comps/tmdlHdmiCEC/src/tmdlHdmiCEC.c
@@ -2443,13 +2443,16 @@
   /* check if unit corresponding to instance is opened */
   RETIF(UnitTable[Instance].opened == False, TMDL_ERR_DLHDMICEC_RESOURCE_NOT_OWNED)
 
+  /* check if length is valid */
+  RETIF(ProgramTitleLength > (sizeof(I2c_Buffer) - 4), TMDL_ERR_DLHDMICEC_INCONSISTENT_PARAMS)
+
   /* check if instance state is correct */
   //RETIF(UnitTable[Instance].state != STATE_NOT_INITIALIZED, TMDL_ERR_DLHDMICEC_INVALID_STATE)
 
   pDis = &gtmdlHdmiCecDriverConfigTable[Instance];
 
   /* Set Timer Program Title */
-  MessLength = ProgramTitleLength+4;                         /* Calculate Message length*/
+  MessLength = ProgramTitleLength + 4;                       /* Calculate Message length*/
 
   I2c_Buffer[0] = (unsigned char)MessLength;
 
@@ -2462,12 +2465,12 @@
 
   I2c_Buffer[3] = CEC_OPCODE_SET_TIMER_PROGRAM_TITLE ;      /* Set Timer Program Title*/
 
-  for(loci = 0; loci <= ProgramTitleLength ; loci++)
-    {
-        I2c_Buffer[(loci+4)] = pProgramTitleString[loci];     /* Fill Table with Program Title characters*/
-    }
+  /* Fill Table with Program Title characters*/
+  for (loci = 0; loci < ProgramTitleLength; loci++) {
+      I2c_Buffer[loci + 4] = pProgramTitleString[loci];       
+  }
 
-  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer,(MessLength)); /* CEC Data register */
+  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer, MessLength);
   RETIF(errCode != TM_OK, errCode)
 
   /* Save Datas of the CEC message send */
@@ -5694,6 +5697,9 @@
   /* check if unit corresponding to instance is opened */
   RETIF(UnitTable[Instance].opened == False, TMDL_ERR_DLHDMICEC_RESOURCE_NOT_OWNED)
 
+  /* check if length is valid */
+  RETIF(VendorSpecificDataLength > (sizeof(I2c_Buffer) - 4), TMDL_ERR_DLHDMICEC_INCONSISTENT_PARAMS)
+
   /* check if instance state is correct */
   //RETIF(UnitTable[Instance].state != STATE_NOT_INITIALIZED, TMDL_ERR_DLHDMICEC_INVALID_STATE)
 
@@ -5714,12 +5720,12 @@
 
   I2c_Buffer[3] = CEC_OPCODE_VENDOR_COMMAND ;       /* Vendor Command*/
 
-  for(loci = 0; loci <= VendorSpecificDataLength ; loci++)
-    {
-        I2c_Buffer[(loci+7)] = pVendorSpecificData[loci];    /* Fill Table with vendorSpecific Data characters*/
-    }
+  /* Fill Table with vendorSpecific Data characters*/
+  for (loci = 0; loci < VendorSpecificDataLength; loci++) {
+      I2c_Buffer[loci + 4] = pVendorSpecificData[loci];    
+  }
 
-  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer,MessLength); /* CEC Data register */
+  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer, MessLength);
   RETIF(errCode != TM_OK, errCode)
 
   /* Save Datas of the CEC message send */
@@ -5778,6 +5784,9 @@
   /* check if unit corresponding to instance is opened */
   RETIF(UnitTable[Instance].opened == False, TMDL_ERR_DLHDMICEC_RESOURCE_NOT_OWNED)
 
+  /* check if length is valid */
+  RETIF(VendorSpecificDataLength > (sizeof(I2c_Buffer) - 7), TMDL_ERR_DLHDMICEC_INCONSISTENT_PARAMS)
+
   /* check if instance state is correct */
   //RETIF(UnitTable[Instance].state != STATE_NOT_INITIALIZED, TMDL_ERR_DLHDMICEC_INVALID_STATE)
 
@@ -5801,12 +5810,12 @@
   I2c_Buffer[5] = (unsigned char)(VendorID >> 8);
   I2c_Buffer[6] = (unsigned char)VendorID;          /* LSByte of Vendor ID*/
 
-  for(loci = 0; loci <= VendorSpecificDataLength ; loci++)
-  {
-     I2c_Buffer[(loci+7)] = pVendorSpecificData[loci];    /* Fill Table with vendorSpecific Data characters*/
+  /* Fill Table with vendorSpecific Data characters*/
+  for (loci = 0; loci < VendorSpecificDataLength; loci++) {
+      I2c_Buffer[loci + 7] = pVendorSpecificData[loci];    
   }
 
-  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer,MessLength); /* CEC Data register */
+  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer, MessLength);
   RETIF(errCode != TM_OK, errCode)
 
   /* Save Datas of the CEC message send */
@@ -5862,6 +5871,9 @@
   /* check if unit corresponding to instance is opened */
   RETIF(UnitTable[Instance].opened == False, TMDL_ERR_DLHDMICEC_RESOURCE_NOT_OWNED)
 
+  /* check if length is valid */
+  RETIF(VendorSpecificRcCodeLength > (sizeof(I2c_Buffer) - 4), TMDL_ERR_DLHDMICEC_INCONSISTENT_PARAMS)
+
   /* check if instance state is correct */
   //RETIF(UnitTable[Instance].state != STATE_NOT_INITIALIZED, TMDL_ERR_DLHDMICEC_INVALID_STATE)
 
@@ -5880,14 +5892,14 @@
   I2c_Buffer[2] |= ReceiverLogicalAddress & 0x0F;                                   /* Receiver logical Address*/
 
   I2c_Buffer[3] = CEC_OPCODE_VENDOR_REMOTE_BUTTON_DOWN ;    /* Vendor Remote Button Down Opcode*/
-  /*Vendor Specific RC code Parameter*/
-  for(loci = 0; loci <= VendorSpecificRcCodeLength ; loci++)
-    {
-        I2c_Buffer[(loci+4)] = pVendorSpecificRcCode[loci];   /* Fill Table with Vendor Specific RC Code data*/
-    }
+
+  /* Fill Table with Vendor Specific RC Code data*/
+  for (loci = 0; loci < VendorSpecificRcCodeLength; loci++) {
+      I2c_Buffer[loci + 4] = pVendorSpecificRcCode[loci];     
+  }
+
   /*Send message Via I2C*/
-  
-  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer,MessLength);
+  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer, MessLength);
   RETIF(errCode != TM_OK, errCode)
 
   /* Save Datas of the CEC message send */
@@ -6010,6 +6022,9 @@
   /* check if unit corresponding to instance is opened */
   RETIF(UnitTable[Instance].opened == False, TMDL_ERR_DLHDMICEC_RESOURCE_NOT_OWNED)
 
+  /* check if length is valid */
+  RETIF(OsdStringLength > (sizeof(I2c_Buffer) - 5), TMDL_ERR_DLHDMICEC_INCONSISTENT_PARAMS)
+
   /* check if instance state is correct */
   //RETIF(UnitTable[Instance].state != STATE_NOT_INITIALIZED, TMDL_ERR_DLHDMICEC_INVALID_STATE)
 
@@ -6018,9 +6033,9 @@
   //======To do : make a prepare message function with parameter
   /* Set OSD String command */
 
-  MessLength = OsdStringLength+5;                   /* Calculate Message length*/
+  MessLength = OsdStringLength + 5;                 /* Calculate Message length*/
 
-  I2c_Buffer[0] = (unsigned char)MessLength;
+  I2c_Buffer[0] = MessLength;
 
   I2c_Buffer[1] = 0x00;     /* Request CEC data */
 
@@ -6031,12 +6046,13 @@
 
   I2c_Buffer[3] = CEC_OPCODE_SET_OSD_STRING ;       /* Set Osd String*/
   I2c_Buffer[4] = DisplayControl;                   /*Display Control*/
-   for(loci = 0; loci <= OsdStringLength ; loci++)
-    {
-        I2c_Buffer[(loci+5)] = pOsdString[loci];         /* Fill Table with OSD Name characters*/
-    }
+
+  /* Fill Table with OSD Name characters*/
+  for (loci = 0; loci < OsdStringLength; loci++) {
+      I2c_Buffer[loci + 5] = pOsdString[loci];        
+  }
   
-  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer,(MessLength)); /* CEC Data register */
+  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer, MessLength);
   RETIF(errCode != TM_OK, errCode)
 
   /* Save Datas of the CEC message send */
@@ -6156,6 +6172,9 @@
   /* check if unit corresponding to instance is opened */
   RETIF(UnitTable[Instance].opened == False, TMDL_ERR_DLHDMICEC_RESOURCE_NOT_OWNED)
 
+  /* check if length is valid */
+  RETIF(OsdNameLength > (sizeof(I2c_Buffer) - 4), TMDL_ERR_DLHDMICEC_INCONSISTENT_PARAMS)
+
   /* check if instance state is correct */
   //RETIF(UnitTable[Instance].state != STATE_NOT_INITIALIZED, TMDL_ERR_DLHDMICEC_INVALID_STATE)
 
@@ -6164,9 +6183,9 @@
   //======To do : make a prepare message function with parameter
   /* Set OSD Name command */
 
-  MessLength = OsdNameLength+4;                         /* Calculate Message length*/
+  MessLength = OsdNameLength + 4;                       /* Calculate Message length*/
 
-  I2c_Buffer[0] = (unsigned char)MessLength;
+  I2c_Buffer[0] = MessLength;
   
   I2c_Buffer[1] = 0x00;     /* Request CEC data */
 
@@ -6176,12 +6195,13 @@
   I2c_Buffer[2] |= ReceiverLogicalAddress & 0x0F;                                   /* Receiver logical Address*/
 
   I2c_Buffer[3] = CEC_OPCODE_SET_OSD_NAME ;     /* Set Osd Name*/
-    for(loci = 0; loci <= OsdNameLength ; loci++)
-    {
-        I2c_Buffer[(loci+4)] = pOsdName[loci];       /* Fill Table with OSD Name characters*/
-    }
 
-  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer,(MessLength)); /* CEC Data register */
+  /* Fill Table with OSD Name characters*/
+  for (loci = 0; loci < OsdNameLength; loci++) {
+      I2c_Buffer[loci + 4] = pOsdName[loci];      
+  }
+
+  errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer, MessLength);
   RETIF(errCode != TM_OK, errCode)
 
   /* Save Datas of the CEC message send */
@@ -7440,18 +7460,18 @@ tmErrorCode_t tmdlHdmiCecSendMessage(
   RETIF(UnitTable[instance].opened == False, TMDL_ERR_DLHDMICEC_RESOURCE_NOT_OWNED)
   
   /* check if CEC message length is valid */
-  RETIF((lenData == 0 || lenData > 17), TMDL_ERR_DLHDMICEC_INCONSISTENT_PARAMS)
+  RETIF((lenData == 0 || lenData > (sizeof(I2c_Buffer) - 2)), TMDL_ERR_DLHDMICEC_INCONSISTENT_PARAMS)
 
   pDis = &gtmdlHdmiCecDriverConfigTable[instance];
 
   /* Calculate Internal Message length*/
-  MessLength = lenData + 2;
+  MessLength = (unsigned char)(lenData + 2);
   
   I2c_Buffer[0] = MessLength;  /* Param number */
   I2c_Buffer[1] = 0x00;        /* Request CEC data */
   I2c_Buffer[3] = 0x00;        /* Initialize (for the case it's a poll) */
 
-  /* copy data */
+  /* Copy data */
   for (loci = 0; loci < lenData; loci++) {
       I2c_Buffer[loci + 2] = pData[loci]; 
   }
@@ -7463,7 +7483,7 @@ tmErrorCode_t tmdlHdmiCecSendMessage(
           ((unsigned char)(UnitTable[instance].DeviceLogicalAddress) << 4);
   }
 
-  /* write CEC Data register */
+  /* Write CEC Data registers */
   errCode = setCecHwRegisters(pDis, E_REG_CDR0, I2c_Buffer, MessLength); 
   RETIF(errCode != TM_OK, errCode)
   
