diff --git a/arch/arm/mach-dove/cubox-setup.c b/arch/arm/mach-dove/cubox-setup.c
index 2fc7837..25c4e04 100644
--- a/arch/arm/mach-dove/cubox-setup.c
+++ b/arch/arm/mach-dove/cubox-setup.c
@@ -58,15 +58,11 @@
 	MPP13_AD1_I2S_EXT_MCLK,	/* i2s1 external clock input */
 	MPP18_GPIO18,		/* red LED */
 	MPP19_GPIO19,		/* IR sensor */
-#if 0
-	/* Not supported for now - FIXME */
-	MPP27_GPIO27,     /* HDMI interrupt */
-#endif
 	0
 };
 
 static unsigned int cubox_mpp_grp_list[] __initdata = {
-	MPP_GRP_24_39_GPIO,
+	MPP_GRP_24_39_GPIO,	/* HDMI interrupt on GPIO27 */
 	MPP_GRP_40_45_SD0,
 	MPP_GRP_46_51_GPIO,
 	MPP_GRP_62_63_UA1,
diff --git a/drivers/video/dovefb/nxp_hdmi/tda998x.c b/drivers/video/dovefb/nxp_hdmi/tda998x.c
index 2e9fd06..b8fff8b 100755
--- a/drivers/video/dovefb/nxp_hdmi/tda998x.c
+++ b/drivers/video/dovefb/nxp_hdmi/tda998x.c
@@ -72,6 +72,7 @@
 static struct cdev our_cdev, *this_cdev=&our_cdev;
 static int initialized = 0;
 static int saved_mode = -1;
+static cec_callback_t cec_callback = NULL;
 #ifdef ANDROID_DSS
 static struct omap_video_timings video_640x480at60Hz_panel_timings = {
    .x_res          = 640,
@@ -785,7 +786,8 @@ static void interrupt_polling(struct work_struct *dummy)
    TRY(tmdlHdmiTxHandleInterrupt(this->tda.instance));
 
    /* CEC part */
-   if (this->driver.cec_callback) this->driver.cec_callback(dummy);
+   if (this->driver.cec_callback)
+	this->driver.cec_callback(dummy);
 
    /* FIX : IT anti debounce */
    TRY(tmdlHdmiTxHandleInterrupt(this->tda.instance));
@@ -852,7 +854,10 @@ void register_cec_interrupt(cec_callback_t fct)
 {
    tda_instance *this=&our_instance;
 
-   this->driver.cec_callback = fct;
+   if (initialized) 
+	this->driver.cec_callback = fct;
+   else
+	cec_callback = fct;
 }
 EXPORT_SYMBOL(register_cec_interrupt);
 
@@ -860,6 +865,7 @@ void unregister_cec_interrupt(void)
 {
    tda_instance *this=&our_instance;
 
+   cec_callback = NULL;
    this->driver.cec_callback = NULL;
 }
 EXPORT_SYMBOL(unregister_cec_interrupt);
@@ -2419,6 +2425,11 @@ static int __init tx_init(void)
 	show_video(this);
    }
 
+   /* enable cec callback */
+   if (cec_callback) {
+	this->driver.cec_callback = cec_callback;
+   }
+
    return 0;
 
  init_out:
diff --git a/drivers/video/dovefb/nxp_hdmi/tda998x_cec.c b/drivers/video/dovefb/nxp_hdmi/tda998x_cec.c
index dfe1f5f..2cdb4b7 100755
--- a/drivers/video/dovefb/nxp_hdmi/tda998x_cec.c
+++ b/drivers/video/dovefb/nxp_hdmi/tda998x_cec.c
@@ -447,12 +447,20 @@ static void cec_on(cec_instance *this)
 
    disable_irq(gpio_to_irq(TDA_IRQ_CALIB));
 
+   /* turn GPIO into calib pulse generator */
+   err = gpio_direction_output(TDA_IRQ_CALIB,0); /* output (1 means try-state or high) */
+   if (err < 0) {
+	LOG(KERN_ERR,"%s: Cannot access GPIO %d, err:%d\n",__func__,TDA_IRQ_CALIB,err);
+
+	enable_irq(gpio_to_irq(TDA_IRQ_CALIB));
+	return;
+   }
+
+   __gpio_set_value(TDA_IRQ_CALIB,1);
+
    this->cec.power = tmPowerOn;
    TRY(tmdlHdmiCecSetPowerState(this->cec.inst,this->cec.power));
 
-   /* turn GPIO into calib pulse generator */
-   gpio_direction_output(TDA_IRQ_CALIB,0); /* output (1 means try-state or high) */
-   __gpio_set_value(TDA_IRQ_CALIB,1);
    this->cec.clock = TMDL_HDMICEC_CLOCK_FRO;
    TRY(tmdlHdmiCecEnableCalibration(this->cec.inst,this->cec.clock));
    msleep(10);
@@ -476,14 +484,12 @@ static void cec_on(cec_instance *this)
    this->cec.setup.cecClockSource = this->cec.clock;
    TRY(tmdlHdmiCecInstanceSetup(this->cec.inst,&this->cec.setup));
 
-   /* turn GPIO into IRQ */
-   gpio_direction_input(TDA_IRQ_CALIB);
-   enable_irq(gpio_to_irq(TDA_IRQ_CALIB));
-
    LOG(KERN_INFO,"standby --> on\n");
 
  TRY_DONE:
-   (void)0;
+   /* turn GPIO into IRQ */
+   gpio_direction_input(TDA_IRQ_CALIB);
+   enable_irq(gpio_to_irq(TDA_IRQ_CALIB));
 }
 
 /*
@@ -1905,7 +1911,7 @@ static int __devinit this_i2c_probe(struct i2c_client *client, const struct i2c_
    /* FRO calibration */
    err=gpio_request(TDA_IRQ_CALIB,"tda19989 calibration");
    if (err < 0) {
-      printk(KERN_ERR "hdmicec:%s:cannot use GPIO 107\n",__func__);
+      printk(KERN_ERR "hdmicec:%s:Cannot use GPIO %d, err:%d\n",__func__,TDA_IRQ_CALIB,err);
       goto i2c_out;
    }
    /* turn GPIO into IRQ */

