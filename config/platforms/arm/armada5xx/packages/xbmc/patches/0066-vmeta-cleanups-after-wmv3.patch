diff -aur --unidirectional-new-file a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp	2013-04-21 10:14:40.661168931 +0200
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp	2013-04-21 10:12:29.617175637 +0200
@@ -46,6 +46,7 @@
 #include "settings/GUISettings.h"
 #include "DVDCodecs/DVDCodecs.h"
 
+
 #define ENABLE_MPEG1            // use vMeta for MPEG1 decoding
 //#define ENABLE_PTS              // honour presentation time stamps
 
@@ -56,7 +57,6 @@
 #define PADDED_SIZE(s)          ALIGN_SIZE((s), 128)    // align to multiple of 128 (vMeta requirement)
 #define PADDING_LEN(s)          ALIGN_OFFSET((s), 128)  // align to multiple of 128 (vMeta requirement) 
 #define PADDING_BYTE            0x88            // the vmeta decoder needs a padding of 0x88 at the end of a frame
-#define OPTIMIZE_OFFSET_FOR_VMETAVC1MP 16       // add some workspace to avoid vMeta internal data copying
 
 #define STREAM_VDECBUF_SIZE     (512*1024U)     // must equal to or greater than 64k and multiple of 128
 #define STREAM_VDECBUF_NUM      7               // number of stream buffers
@@ -121,8 +121,6 @@
 void CDVDVideoCodecVMETA::SetHardwareClock(int clkRate)
 {
   int clkFreqHz = (clkRate == VMETA_CLK_667) ? 667000000 : 500000000;
-  
-  CLog::Log(LOGINFO, "%s : Changing vmeta clock to %d MHz", __FUNCTION__, clkFreqHz / 1000000);
 
   FILE *Fh = fopen("/sys/devices/platform/dove_clocks_sysfs.0/vmeta","w");
 
@@ -138,18 +136,24 @@
  
 bool CDVDVideoCodecVMETA::Open(CDVDStreamInfo &hints, CDVDCodecOptions &options)
 {
-  if (!m_DllVMETA->Load() || !m_DllMiscGen->Load())
-  {
-    CLog::Log(LOGERROR, "%s::%s Error : failed to load vMeta libs !", CLASSNAME, __func__);
-    return false;
-  }
+  IppCodecStatus ret;
+  bool bSendCodecConfig = true;
 
   m_picture_width  = m_decoded_width  = hints.width;
   m_picture_height = m_decoded_height = hints.height;
 
+  memset(&m_VDecInfo, 0, sizeof(IppVmetaDecInfo));
+  memset(&m_VDecParSet, 0, sizeof(IppVmetaDecParSet));
+
   if(!m_decoded_width || !m_decoded_height)
     return false;
 
+  if (!m_DllVMETA->Load() || !m_DllMiscGen->Load())
+  {
+    CLog::Log(LOGERROR, "%s::%s Error : failed to load vMeta libs !", CLASSNAME, __func__);
+    return false;
+  }
+
   m_converter = new CBitstreamConverter();
 
   if (m_converter->Open(hints.codec, 
@@ -173,11 +177,6 @@
     }
   }
   
-  bool bSendCodecConfig = false;
-
-  memset(&m_VDecInfo, 0, sizeof(IppVmetaDecInfo));
-  memset(&m_VDecParSet, 0, sizeof(IppVmetaDecParSet));
-
   switch (hints.codec)
   {
     case CODEC_ID_H264:
@@ -202,13 +201,13 @@
       }
 
       m_VDecParSet.strm_fmt = IPP_VIDEO_STRM_FMT_H264;
+      bSendCodecConfig = false;
     }
     break;
 
     case CODEC_ID_MPEG4:
       m_VDecParSet.strm_fmt = IPP_VIDEO_STRM_FMT_MPG4;
       m_video_codec_name = "vmeta-mpeg4";
-      bSendCodecConfig = true;
       
       if (hints.codec_tag = MKTAG('X','V','I','D'))
         m_codec_species = 3;
@@ -225,44 +224,37 @@
     case CODEC_ID_MPEG2VIDEO:
       m_VDecParSet.strm_fmt = IPP_VIDEO_STRM_FMT_MPG2;
       m_video_codec_name = "vmeta-mpeg2";
-      bSendCodecConfig = true;
       break;
 
     case CODEC_ID_H263:
       m_VDecParSet.strm_fmt = IPP_VIDEO_STRM_FMT_H263;
       m_video_codec_name = "vmeta-h263";
-      bSendCodecConfig = true;
       break;
 
     case CODEC_ID_VC1:
       m_VDecParSet.strm_fmt = IPP_VIDEO_STRM_FMT_VC1;
       m_video_codec_name = "vmeta-vc1";
-      bSendCodecConfig = true;
       break;
 
     case CODEC_ID_WMV3:
       m_VDecParSet.strm_fmt = IPP_VIDEO_STRM_FMT_VC1M;
       m_video_codec_name = "vmeta-wmv3";
-      bSendCodecConfig = true;
       break;
       
 #ifdef ENABLE_MPEG1
     case CODEC_ID_MPEG1VIDEO:
       m_VDecParSet.strm_fmt = IPP_VIDEO_STRM_FMT_MPG1;
       m_video_codec_name = "vmeta-mpeg1";
-      bSendCodecConfig = true;
       break;
 #endif
 
     default:
       CLog::Log(LOGDEBUG, "%s::%s CodecID 0x%08x (%.4s) not supported by VMETA decoder", 
                 CLASSNAME, __func__, hints.codec, (char *)&hints.codec_tag);
+      Dispose();
       return false;
   }
 
-  m_VDecParSet.opt_fmt = IPP_YCbCr422I;
-
-  IppCodecStatus ret;
 
   if(m_DllMiscGen->miscInitGeneralCallbackTable(&m_pCbTable) != 0)
   {
@@ -271,6 +263,7 @@
     return false;
   }
 
+  m_VDecParSet.opt_fmt = IPP_YCbCr422I;
   ret = m_DllVMETA->DecoderInitAlloc_Vmeta(&m_VDecParSet, m_pCbTable, &m_pDecState);
   if(ret != IPP_STATUS_NOERR)
   {
@@ -327,7 +320,7 @@
   m_extrasize = 0;
   m_numBufSubmitted = 0;
   m_video_convert = false;
-  m_video_codec_name  = "";
+  m_video_codec_name = "";
   
   if (m_extradata)
   {
@@ -428,9 +421,8 @@
     seqInfo.hrd_buffer = 0x007fff;
     seqInfo.hrd_rate   = 0x00007fff;
     seqInfo.frame_rate = 0xffffffff;
-    seqInfo.exthdrsize = m_extrasize;
-    memcpy(seqInfo.exthdr, m_extradata, 
-           std::min<unsigned>(m_extrasize, sizeof(seqInfo.exthdr)));
+    seqInfo.exthdrsize = std::min<uint32_t>(m_extrasize, sizeof(seqInfo.exthdr));
+    memcpy(seqInfo.exthdr, m_extradata, seqInfo.exthdrsize);
     
     retCodec = m_DllVMETA->DecodeSendCmd_Vmeta(
                   IPPVC_SET_VC1M_SEQ_INFO, &seqInfo, NULL, m_pDecState);
@@ -446,6 +438,7 @@
     return IPP_STATUS_ERR;
 
   memcpy(pStream->pBuf, m_extradata, m_extrasize);
+  pStream->nOffset  = 0;
   pStream->nDataLen = m_extrasize;
   pStream->nFlag    = IPP_VMETA_STRM_BUF_END_OF_UNIT;
 
@@ -502,15 +495,17 @@
     }
     else if (m_VDecParSet.strm_fmt == IPP_VIDEO_STRM_FMT_VC1)
     {
-      if (digest_vc1_inbuf(pData, iSize))
-      {
-        bInjectHdr = true;
+      // SMPTE 421M sec. G.8 says the frame start code is optional,
+      // but vMeta only can decode the stream with frame start code
+      bInjectHdr = digest_vc1_inbuf(pData, iSize);
+      if (bInjectHdr)
         bufOfs = sizeof(uint32_t);
-      }
     }
     else if (m_VDecParSet.strm_fmt == IPP_VIDEO_STRM_FMT_VC1M)
     {
-      bufOfs = OPTIMIZE_OFFSET_FOR_VMETAVC1MP;
+      // this offset is not strictly necessary, but it may
+      // avoid internal memory copy
+      bufOfs = VMETA_COM_PKT_HDR_SIZE;
     }
   }
 
@@ -544,6 +539,7 @@
         pStream->pBuf = (Ipp8u *)m_DllVMETA->vdec_os_api_dma_alloc_writecombine(
                               dataLen, VMETA_STRM_BUF_ALIGN, &pStream->nPhyAddr);
         pStream->nBufSize = dataLen;
+        pStream->nOffset  = 0;
         pStream->nDataLen = 0;
 
         // retry (using a larger buffer)
@@ -563,10 +559,13 @@
         if (bInjectHdr)
         {
           *(uint32_t *)pStream->pBuf = *(uint32_t *)VC1FrameStartCode;
-          bufOfs = 0;
+          pStream->nOffset = 0;
+        }
+        else
+        {
+          pStream->nOffset = bufOfs;
         }
 
-        pStream->nOffset = bufOfs;
         pStream->nDataLen = dataLen;
         pStream->nFlag = IPP_VMETA_STRM_BUF_END_OF_UNIT;
 
diff -aur --unidirectional-new-file a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.h
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.h	2013-04-21 10:14:40.505168939 +0200
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.h	2013-04-21 07:50:57.857610203 +0200
@@ -59,7 +59,7 @@
 
   uint8_t *digest_mpeg4_inbuf(uint8_t *pData, int iSize);
   uint8_t *digest_mpeg2_inbuf(uint8_t *pData, int iSize);
-  bool    digest_vc1_inbuf(uint8_t *pData, int iSize);
+  inline bool digest_vc1_inbuf(uint8_t *pData, int iSize);
   
 protected:
   // Video format
