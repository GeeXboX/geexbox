diff -Naur xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/system/peripherals.xml xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/system/peripherals.xml
--- xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/system/peripherals.xml	2012-11-13 10:41:03.000000000 +0100
+++ xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/system/peripherals.xml	2012-11-13 10:43:53.250809080 +0100
@@ -59,4 +59,27 @@
   <peripheral vendor_product="15C2:32,15C2:33,15C2:34,15C2:35,15C2:36,15C2:37,15C2:38,15C2:39,15C2:3A,15C2:3B,15C2:3C,15C2:3D,15C2:3E,15C2:3F,15C2:41,15C2:42,15C2:43,15C2:44,15C2:45,15C2:46" bus="usb" name="iMON HID device" mapTo="imon">
     <setting key="do_not_use_custom_keymap" type="bool" value="1" label="35009" order="1" configurable="0"/>
   </peripheral>
+
+  <peripheral vendor_product="0471:1001" bus="builtin" name="CuBox CEC Adapter" mapTo="cec">
+    <setting key="enabled" type="bool" value="1" label="305" order="1" />
+    <setting key="activate_source" type="bool" value="1" label="36020" order="2" />
+    <setting key="wake_devices" type="enum" value="36037" label="36007" lvalues="36037|36038|36039|231" order="3" />
+    <setting key="standby_devices" type="enum" value="36037" label="36008" lvalues="36037|36038|36039|231" order="4" />
+    <setting key="send_inactive_source" type="bool" value="1" label="36025" order="5" />
+    <setting key="cec_standby_screensaver" type="bool" value="0" label="36009" order="7" />
+    <setting key="standby_pc_on_tv_standby" type="enum" value="13011" label="36029" order="7" lvalues="36028|13005|13011" />
+    <setting key="standby_tv_on_pc_standby" type="bool" value="1" label="36026" order="8" />
+    <setting key="use_tv_menu_language" type="bool" value="1" label="36018" order="9" />
+
+    <setting key="tv_vendor" type="int" value="0" configurable="0" />
+    <setting key="device_name" type="string" value="XBMC" configurable="0" />
+    <setting key="device_type" type="int" value="1" configurable="0" />
+    <setting key="physical_address" type="string" label="36021" value="0" configurable="0" />
+    <setting key="cec_hdmi_port" type="int" value="1" label="36015" configurable="0" />
+    <setting key="connected_device" type="int" label="36019" value="0" configurable="0" />
+    <setting key="port" type="string" value="" label="36022" configurable="0" />
+    <setting key="wake_devices_advanced" type="string" value="" configurable="0" />
+    <setting key="standby_devices_advanced" type="string" value="" configurable="0" />
+    <setting key="double_tap_timeout_ms" type="int" min="0" value="2000" configurable="0" />
+  </peripheral>
 </peripherals>
diff -Naur xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/bus/Makefile.in xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/bus/Makefile.in
--- xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/bus/Makefile.in	2012-11-01 14:13:41.000000000 +0100
+++ xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/bus/Makefile.in	2012-11-13 10:44:00.620819891 +0100
@@ -1,4 +1,5 @@
-SRCS  = PeripheralBus.cpp
+SRCS  = PeripheralBus.cpp \
+    PeripheralBusBuiltin.cpp
 
 ifeq (@USE_LIBUDEV@,1)
 SRCS += linux/PeripheralBusUSBLibUdev.cpp
diff -Naur xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/bus/PeripheralBusBuiltin.cpp xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/bus/PeripheralBusBuiltin.cpp
--- xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/bus/PeripheralBusBuiltin.cpp	1970-01-01 01:00:00.000000000 +0100
+++ xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/bus/PeripheralBusBuiltin.cpp	2012-11-13 10:43:42.910793919 +0100
@@ -0,0 +1,56 @@
+/*
+ *      Copyright (C) 2005-2011 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+ *  http://www.gnu.org/copyleft/gpl.html
+ *
+ */
+
+#include "PeripheralBusBuiltin.h"
+#include "peripherals/Peripherals.h"
+#include "peripherals/devices/PeripheralCecAdapter.h"
+#include "utils/log.h"
+#include "utils/StringUtils.h"
+
+using namespace PERIPHERALS;
+
+CPeripheralBusBuiltin::CPeripheralBusBuiltin(CPeripherals *manager) :
+    CPeripheralBus(manager, PERIPHERAL_BUS_INTERNAL)
+{
+  m_bNeedsPolling = false;
+  m_bDetectionDone = false;
+}
+
+bool CPeripheralBusBuiltin::PerformDeviceScan(PeripheralScanResults &results)
+{
+  if (!m_bDetectionDone)
+  {
+#if defined(HAVE_LIBCEC)
+    CPeripheralCecAdapter::AutoDetectDevices(m_detected);
+#endif
+    
+    m_bDetectionDone = true;
+  }
+    
+  for (size_t i = 0; i < m_detected.size(); i++)
+  {
+    if (!results.ContainsResult(m_detected[i]))
+      results.m_results.push_back(m_detected[i]);
+  }
+
+  return true;
+}
+
diff -Naur xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/bus/PeripheralBusBuiltin.h xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/bus/PeripheralBusBuiltin.h
--- xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/bus/PeripheralBusBuiltin.h	1970-01-01 01:00:00.000000000 +0100
+++ xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/bus/PeripheralBusBuiltin.h	2012-11-13 10:43:46.570799287 +0100
@@ -0,0 +1,43 @@
+#pragma once
+/*
+ *      Copyright (C) 2005-2011 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+ *  http://www.gnu.org/copyleft/gpl.html
+ *
+ */
+
+#include "peripherals/bus/PeripheralBus.h"
+#include "peripherals/devices/Peripheral.h"
+
+namespace PERIPHERALS
+{
+  class CPeripherals;
+
+  class CPeripheralBusBuiltin : public CPeripheralBus
+  {
+    std::vector<PeripheralScanResult> m_detected;
+    bool m_bDetectionDone;
+
+  public:
+    CPeripheralBusBuiltin(CPeripherals *manager);
+
+    /*!
+     * @see PeripheralBus::PerformDeviceScan()
+     */
+    bool PerformDeviceScan(PeripheralScanResults &results);
+  };
+}
diff -Naur xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/devices/PeripheralCecAdapter.cpp xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
--- xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/devices/PeripheralCecAdapter.cpp	2012-11-01 14:13:41.000000000 +0100
+++ xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/devices/PeripheralCecAdapter.cpp	2012-11-13 10:43:29.210773827 +0100
@@ -1229,11 +1229,13 @@
 
 bool CPeripheralCecAdapter::TranslateComPort(CStdString &strLocation)
 {
-  if ((strLocation.Left(18).Equals("peripherals://usb/") ||
-         strLocation.Left(18).Equals("peripherals://rpi/")) &&
-       strLocation.Right(4).Equals(".dev"))
+    CStdString strPrefix("peripherals://");
+  strPrefix.append(PeripheralTypeTranslator::BusTypeToString(m_busType));
+  strPrefix.append("/");
+  
+  if (strLocation.Left(strPrefix.length()) == strPrefix && strLocation.Right(4).Equals(".dev"))
   {
-    strLocation = strLocation.Right(strLocation.length() - 18);
+    strLocation = strLocation.Right(strLocation.length() - strPrefix.length());
     strLocation = strLocation.Left(strLocation.length() - 4);
     return true;
   }
@@ -1693,6 +1695,8 @@
   InitialiseFeature(FEATURE_CEC);
 }
 
+
+
 void CPeripheralCecAdapter::ActivateSource(void)
 {
   CSingleLock lock(m_critSection);
@@ -1733,4 +1737,66 @@
     m_cecAdapter->StandbyDevices(CECDEVICE_BROADCAST);
 }
 
+bool CPeripheralCecAdapter::AutoDetectDevices(std::vector<PeripheralScanResult> &devices)
+{
+  DllLibCEC dll;
+  bool bOk = false;
+  ICECAdapter *detector;
+  cec_adapter deviceList[16];
+  libcec_configuration config;
+  PeripheralScanResult device;
+  
+  if (dll.Load() && dll.IsLoaded())
+  {
+    detector = dll.CECInitialise(&config);
+
+    if (detector)
+    {
+      if (config.serverVersion >= CEC_LIB_SUPPORTED_VERSION)
+      {
+        int devCount = detector->FindAdapters(deviceList, 16);
+
+        for (int i = 0; i < devCount; i++)
+        {
+          if (detector->GetDeviceInformation(deviceList[i].comm, &config))
+          {
+	    switch (config.adapterType)
+            {
+            case ADAPTERTYPE_RPI:
+              // todo: IDs should be queried !
+              device.m_iVendorId  = 0x2708;
+              device.m_iProductId = 0x1001;
+              break;
+
+            case ADAPTERTYPE_TDA995x:
+              // todo: IDs should be queried !
+              device.m_iVendorId  = 0x0471;
+              device.m_iProductId = 0x1001;
+              break;
+
+            default:
+              device.m_iVendorId  = 0;
+              device.m_iProductId = 0;
+              break;
+            }
+        
+            if (device.m_iVendorId || device.m_iProductId)
+            {
+              device.m_type = PERIPHERAL_CEC;
+              device.m_strLocation = deviceList[i].comm;
+              devices.push_back(device);
+            }
+          }
+        }
+        
+        bOk = true;
+      }
+
+      dll.CECDestroy(detector);
+    }
+  }
+  
+  return bOk;
+}
+
 #endif
diff -Naur xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/devices/PeripheralCecAdapter.h xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/devices/PeripheralCecAdapter.h
--- xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/devices/PeripheralCecAdapter.h	2012-11-01 14:13:41.000000000 +0100
+++ xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/devices/PeripheralCecAdapter.h	2012-11-13 10:43:37.360785779 +0100
@@ -45,6 +45,7 @@
 #else
 
 #include "PeripheralHID.h"
+#include "peripherals/bus/PeripheralBus.h"
 #include "interfaces/AnnouncementManager.h"
 #include "threads/Thread.h"
 #include "threads/CriticalSection.h"
@@ -110,6 +111,8 @@
 
     void PushCecKeypress(const CEC::cec_keypress &key);
 
+    static bool AutoDetectDevices(std::vector<PeripheralScanResult> &devices);
+
     void ActivateSource(void);
     void StandbyDevices(void);
 
@@ -138,8 +141,7 @@
     void Process(void);
     void ProcessVolumeChange(void);
     void SetMenuLanguage(const char *strLanguage);
-    static bool FindConfigLocation(CStdString &strString);
-    static bool TranslateComPort(CStdString &strPort);
+    bool TranslateComPort(CStdString &strPort);
 
     void ResetMembers(void);
 
diff -Naur xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/Peripherals.cpp xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/Peripherals.cpp
--- xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/Peripherals.cpp	2012-11-01 14:13:41.000000000 +0100
+++ xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/Peripherals.cpp	2012-11-13 10:43:39.110788342 +0100
@@ -29,6 +29,7 @@
 #include "devices/PeripheralCecAdapter.h"
 #include "devices/PeripheralImon.h"
 #include "bus/PeripheralBusUSB.h"
+#include "bus/PeripheralBusBuiltin.h"
 #include "dialogs/GUIDialogPeripheralManager.h"
 
 #ifdef HAVE_CEC_RPI_API
@@ -81,6 +82,8 @@
     /* load mappings from peripherals.xml */
     LoadMappings();
 
+    m_busses.push_back(new CPeripheralBusBuiltin(this));
+
 #if defined(HAVE_PERIPHERAL_BUS_USB)
     m_busses.push_back(new CPeripheralBusUSB(this));
 #endif
diff -Naur xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/PeripheralTypes.h xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/PeripheralTypes.h
--- xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921-origin/xbmc/peripherals/PeripheralTypes.h	2012-11-01 14:13:41.000000000 +0100
+++ xbmc-frodo-r4aad468f9bb5d27902fefc68474eabe2b7751921/xbmc/peripherals/PeripheralTypes.h	2012-11-13 10:43:40.840790883 +0100
@@ -35,7 +35,8 @@
     PERIPHERAL_BUS_UNKNOWN = 0,
     PERIPHERAL_BUS_USB,
     PERIPHERAL_BUS_PCI,
-    PERIPHERAL_BUS_RPI
+    PERIPHERAL_BUS_RPI,
+    PERIPHERAL_BUS_INTERNAL
   };
 
   enum PeripheralFeature
@@ -143,6 +144,8 @@
         return "pci";
       case PERIPHERAL_BUS_RPI:
         return "rpi";
+      case PERIPHERAL_BUS_INTERNAL:
+	return "builtin";
       default:
         return "unknown";
       }
@@ -159,7 +162,8 @@
         return PERIPHERAL_BUS_PCI;
       else if (strTypeLowerCase.Equals("rpi"))
         return PERIPHERAL_BUS_RPI;
-
+      else if (strTypeLowerCase.Equals("builtin"))
+        return PERIPHERAL_BUS_INTERNAL;
       return PERIPHERAL_BUS_UNKNOWN;
     };
 
