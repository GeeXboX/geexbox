diff -aur --unidirectional-new-file a/xbmc/utils/BitstreamConverter.cpp b1/xbmc/utils/BitstreamConverter.cpp
--- a/xbmc/utils/BitstreamConverter.cpp	2013-01-12 11:50:57.000000000 +0100
+++ b1/xbmc/utils/BitstreamConverter.cpp	2013-01-19 14:11:57.000000000 +0100
@@ -424,6 +424,10 @@
   m_dllAvUtil         = NULL;
   m_dllAvFormat       = NULL;
   m_convert_bytestream = false;
+  
+  m_byteStreamSize    = 0;
+  m_byteStreamAlloc   = -1;
+  m_byteStreamBuffer  = NULL;
 }
 
 CBitstreamConverter::~CBitstreamConverter()
@@ -591,21 +595,18 @@
     {
       if(m_to_annexb)
       {
-        int demuxer_bytes = iSize;
-  
-        uint8_t *demuxer_content = pData;
-
         if (m_convert_bitstream)
         {
           // convert demuxer packet from bitstream to bytestream (AnnexB)
-          int bytestream_size = 0;
-          uint8_t *bytestream_buff = NULL;
-
-          BitstreamConvert(demuxer_content, demuxer_bytes, &bytestream_buff, &bytestream_size);
-          if (bytestream_buff && (bytestream_size > 0))
+          m_byteStreamSize = 0;
+          m_byteStreamAlloc = -1;
+          m_byteStreamBuffer = 0;
+          
+          BitstreamConvert(pData, iSize);
+          if (m_byteStreamBuffer && m_byteStreamSize > 0)
           {
-            m_convertSize   = bytestream_size;
-            m_convertBuffer = bytestream_buff;
+            m_convertSize   = m_byteStreamSize;
+            m_convertBuffer = m_byteStreamBuffer;
           }
           else
           {
@@ -770,11 +771,12 @@
   m_sps_pps_context.sps_pps_data = out;
   m_sps_pps_context.size = total_size;
   m_sps_pps_context.first_idr = 1;
+  m_first_idr_state = 1;
 
   return true;
 }
 
-bool CBitstreamConverter::BitstreamConvert(uint8_t* pData, int iSize, uint8_t **poutbuf, int *poutbuf_size)
+bool CBitstreamConverter::BitstreamConvert(uint8_t* pData, int iSize)
 {
   // based on h264_mp4toannexb_bsf.c (ffmpeg)
   // which is Copyright (c) 2007 Benoit Fouet <benoit.fouet@free.fr>
@@ -809,13 +811,13 @@
     // prepend only to the first type 5 NAL unit of an IDR picture
     if (m_sps_pps_context.first_idr && unit_type == 5)
     {
-      BitstreamAllocAndCopy(poutbuf, poutbuf_size,
+      BitstreamAllocAndCopy(
         m_sps_pps_context.sps_pps_data, m_sps_pps_context.size, buf, nal_size);
       m_sps_pps_context.first_idr = 0;
     }
     else
     {
-      BitstreamAllocAndCopy(poutbuf, poutbuf_size, NULL, 0, buf, nal_size);
+      BitstreamAllocAndCopy(NULL, 0, buf, nal_size);
       if (!m_sps_pps_context.first_idr && unit_type == 1)
           m_sps_pps_context.first_idr = 1;
     }
@@ -827,44 +829,100 @@
   return true;
 
 fail:
-  free(*poutbuf);
-  *poutbuf = NULL;
-  *poutbuf_size = 0;
+  if (m_byteStreamAlloc < 0)
+  {
+    free(m_byteStreamBuffer);
+    m_byteStreamBuffer = 0;
+  }
+  
+  m_byteStreamSize = 0;
   return false;
 }
 
-void CBitstreamConverter::BitstreamAllocAndCopy( uint8_t **poutbuf, int *poutbuf_size,
+void CBitstreamConverter::BitstreamAllocAndCopy(
     const uint8_t *sps_pps, uint32_t sps_pps_size, const uint8_t *in, uint32_t in_size)
 {
   // based on h264_mp4toannexb_bsf.c (ffmpeg)
   // which is Copyright (c) 2007 Benoit Fouet <benoit.fouet@free.fr>
   // and Licensed GPL 2.1 or greater
 
-  #define CHD_WB32(p, d) { \
-    ((uint8_t*)(p))[3] = (d); \
-    ((uint8_t*)(p))[2] = (d) >> 8; \
-    ((uint8_t*)(p))[1] = (d) >> 16; \
-    ((uint8_t*)(p))[0] = (d) >> 24; }
+  uint32_t offset = m_byteStreamSize;
+  uint32_t nal_header_size = offset ?  3 : 4;
 
-  uint32_t offset = *poutbuf_size;
-  uint8_t nal_header_size = offset ? 3 : 4;
+  m_byteStreamSize += sps_pps_size + in_size + nal_header_size;
+
+  if (m_byteStreamAlloc < 0)
+  {
+    m_byteStreamBuffer = (uint8_t*)realloc(m_byteStreamBuffer, m_byteStreamSize);
+  }
+  else if (m_byteStreamSize > m_byteStreamAlloc)
+  {
+    return;
+  }
+
+  uint8_t *p = m_byteStreamBuffer + offset;
 
-  *poutbuf_size += sps_pps_size + in_size + nal_header_size;
-  *poutbuf = (uint8_t*)realloc(*poutbuf, *poutbuf_size);
   if (sps_pps)
-    memcpy(*poutbuf + offset, sps_pps, sps_pps_size);
+    memcpy(p, sps_pps, sps_pps_size);
+
+  p += sps_pps_size + nal_header_size;
 
-  memcpy(*poutbuf + sps_pps_size + nal_header_size + offset, in, in_size);
   if (!offset)
+    p[-4] = 0x00;
+
+  p[-3] = 0x00;
+  p[-2] = 0x00;
+  p[-1] = 0x01;
+
+  memcpy(p, in, in_size);
+}
+
+bool CBitstreamConverter::Convert(uint8_t *pData, int iSize, uint8_t *pBuffer, uint32_t *pBuffSize, bool retry)
+{
+  uint32_t buffSize = *pBuffSize;
+  
+  if (pData && m_codec == CODEC_ID_H264 && m_to_annexb)
   {
-    CHD_WB32(*poutbuf + sps_pps_size, 1);
+    if (!m_convert_bitstream)
+    {
+      if( buffSize > (uint32_t)iSize)
+        buffSize = iSize;
+
+      memcpy(pBuffer, pData, buffSize);
+      
+      *pBuffSize = iSize;
+      return true;
+    }
+    
+    if (retry)
+      m_sps_pps_context.first_idr = m_first_idr_state;
+    else
+      m_first_idr_state = m_sps_pps_context.first_idr;
+
+    m_byteStreamBuffer = pBuffer;
+    m_byteStreamAlloc = buffSize;
+    m_byteStreamSize = 0;
+
+    BitstreamConvert(pData, iSize);
+
+    *pBuffSize = m_byteStreamSize;
+    return true;
   }
-  else
+
+  if (Convert(pData, iSize))
   {
-    (*poutbuf + offset + sps_pps_size)[0] = 0;
-    (*poutbuf + offset + sps_pps_size)[1] = 0;
-    (*poutbuf + offset + sps_pps_size)[2] = 1;
+    uint32_t convSize = GetConvertSize();
+
+    if (buffSize > convSize)
+      buffSize = convSize;
+
+    memcpy(pBuffer, GetConvertBuffer(), buffSize);
+    
+    *pBuffSize = convSize;
+    return true;
   }
+  
+  *pBuffSize = 0;
+  return false;
 }
 
-
diff -aur --unidirectional-new-file a/xbmc/utils/BitstreamConverter.h b1/xbmc/utils/BitstreamConverter.h
--- a/xbmc/utils/BitstreamConverter.h	2013-01-12 11:50:57.000000000 +0100
+++ b1/xbmc/utils/BitstreamConverter.h	2013-01-19 13:36:24.000000000 +0100
@@ -118,11 +118,13 @@
   void Close(void);
   bool NeedConvert(void) { return m_convert_bitstream; };
   bool Convert(uint8_t *pData, int iSize);
+  bool Convert(uint8_t *pData, int iSize, uint8_t *pBuffer, uint32_t *pBuffSize, bool retry);
   uint8_t *GetConvertBuffer(void);
   int GetConvertSize();
   uint8_t *GetExtraData(void);
   int GetExtraSize();
   void parseh264_sps(const uint8_t *sps, const uint32_t sps_size, bool *interlaced, int32_t *max_ref_frames);
+  
 protected:
   // bytestream (Annex B) to bistream conversion support.
   void nal_bs_init(nal_bitstream *bs, const uint8_t *data, size_t size);
@@ -136,8 +138,8 @@
   const int isom_write_avcc(AVIOContext *pb, const uint8_t *data, int len);
   // bitstream to bytestream (Annex B) conversion support.
   bool BitstreamConvertInit(void *in_extradata, int in_extrasize);
-  bool BitstreamConvert(uint8_t* pData, int iSize, uint8_t **poutbuf, int *poutbuf_size);
-  void BitstreamAllocAndCopy( uint8_t **poutbuf, int *poutbuf_size,
+  bool BitstreamConvert(uint8_t* pData, int iSize);
+  inline void BitstreamAllocAndCopy(
     const uint8_t *sps_pps, uint32_t sps_pps_size, const uint8_t *in, uint32_t in_size);
 
   typedef struct omx_bitstream_ctx {
@@ -147,6 +149,11 @@
       uint32_t size;
   } omx_bitstream_ctx;
 
+  int               m_byteStreamSize;
+  int               m_byteStreamAlloc;
+  uint8_t           *m_byteStreamBuffer;
+  uint8_t           m_first_idr_state;    
+
   uint8_t           *m_convertBuffer;
   int               m_convertSize;
   uint8_t           *m_inputBuffer;
