diff -aur --unidirectional-new-file a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h	2013-01-13 13:11:14.918768581 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h	2013-01-12 22:00:49.000000000 +0100
@@ -69,13 +69,11 @@
     struct {
       struct __CVBuffer *cvBufferRef;
     };
-  };
 
-#ifdef HAS_MARVELL_DOVE
-  struct {
-    struct _IppVideoPicture *vmeta;
+    struct {
+      struct _IppVideoPicture *vmeta;
+    };
   };
-#endif
     
   unsigned int iFlags;
 
diff -aur --unidirectional-new-file a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp	2013-01-13 13:11:15.078768573 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp	2013-01-12 23:38:51.724807159 +0100
@@ -723,8 +723,6 @@
   
   pDvdVideoPicture->dts             = DVD_NOPTS_VALUE;
   pDvdVideoPicture->pts             = DVD_NOPTS_VALUE;
-  pDvdVideoPicture->format          = RENDER_FMT_UYVY422;
-
   pDvdVideoPicture->iDisplayWidth   = m_decoded_width;
   pDvdVideoPicture->iDisplayHeight  = m_decoded_height;
   pDvdVideoPicture->iWidth          = m_picture_width;
@@ -733,17 +731,9 @@
   if (m_output_ready.getHead(pPicture))
   {
     // clone the video picture buffer settings.
-    pDvdVideoPicture->vmeta           = pPicture;
-    pDvdVideoPicture->data[0]         = (Ipp8u *)(pPicture->pic.ppPicPlane[0]) +
-                                        (pPicture->pic.picROI.y * pPicture->pic.picPlaneStep[0]) +
-                                        (pPicture->pic.picROI.x << 1);
-    pDvdVideoPicture->iLineSize[0]    = ALIGN_SIZE(pPicture->pic.picWidth, 4);
-    pDvdVideoPicture->data[1]         = 0;      // not needed in UYVY
-    pDvdVideoPicture->iLineSize[1]    = 0;
-    pDvdVideoPicture->data[2]         = 0;      // not needed in UYVY
-    pDvdVideoPicture->iLineSize[2]    = 0;
-
-    pDvdVideoPicture->iFlags          = DVP_FLAG_ALLOCATED;
+    pDvdVideoPicture->vmeta         = pPicture;
+    pDvdVideoPicture->format        = RENDER_FMT_VMETA;
+    pDvdVideoPicture->iFlags        = DVP_FLAG_ALLOCATED;
     
     if (m_drop_state || (unsigned)pPicture->pUsrData1 < 2)
       pDvdVideoPicture->iFlags |= DVP_FLAG_DROPPED;
@@ -753,26 +743,12 @@
       m_pts_queue.getHead(pDvdVideoPicture->pts);
 #endif
       
-    /*
-    printf("%d : pic width [%dx%d] [%d:%d:%d] [0x%08x:0x%08x:0x%08x] %f\n",
-           (unsigned int)pPicture->pUsrData1 , pDvdVideoPicture->iDisplayWidth, pDvdVideoPicture->iDisplayHeight,
-           pDvdVideoPicture->iLineSize[0], pDvdVideoPicture->iLineSize[1], pDvdVideoPicture->iLineSize[2],
-           (unsigned int)pDvdVideoPicture->data[0], (unsigned int)pDvdVideoPicture->data[1],
-           (unsigned int)pDvdVideoPicture->data[2], (double)pDvdVideoPicture->pts / (double)DVD_TIME_BASE);
-    */
-
     return true;
   }
 
   pDvdVideoPicture->vmeta           = 0;
-  pDvdVideoPicture->iFlags          = 0; //DVP_FLAG_DROPPED;
-
-  pDvdVideoPicture->data[0]         = 0;
-  pDvdVideoPicture->iLineSize[0]    = 0;
-  pDvdVideoPicture->data[1]         = 0;
-  pDvdVideoPicture->iLineSize[1]    = 0;
-  pDvdVideoPicture->data[2]         = 0;
-  pDvdVideoPicture->iLineSize[2]    = 0;
+  pDvdVideoPicture->iFlags          = 0;
+  pDvdVideoPicture->format          = RENDER_FMT_NONE;
   
   return false;
 }
@@ -782,7 +758,7 @@
 {
   // release any previous retained image buffer ref that
   // has not been passed up to renderer (ie. dropped frames, etc).
-  if (pDvdVideoPicture->vmeta)
+  if (pDvdVideoPicture->format == RENDER_FMT_VMETA)
     m_output_available.putTail(pDvdVideoPicture->vmeta);
 
   memset(pDvdVideoPicture, 0, sizeof(DVDVideoPicture));
diff -aur --unidirectional-new-file a/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp b/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp
--- a/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp	2013-01-12 11:50:57.000000000 +0100
+++ b/xbmc/cores/dvdplayer/DVDPlayerVideo.cpp	2013-01-12 22:52:50.000000000 +0100
@@ -1130,6 +1130,9 @@
       case RENDER_FMT_NONE:
         formatstr = "NONE";
         break;
+      case RENDER_FMT_VMETA:
+        formatstr = "VMETA";
+        break;
     }
 
     if(m_bAllowFullscreen)
diff -aur --unidirectional-new-file a/xbmc/cores/VideoRenderers/DoveOverlayRenderer.cpp b/xbmc/cores/VideoRenderers/DoveOverlayRenderer.cpp
--- a/xbmc/cores/VideoRenderers/DoveOverlayRenderer.cpp	2013-01-13 13:11:14.918768581 +0100
+++ b/xbmc/cores/VideoRenderers/DoveOverlayRenderer.cpp	2013-01-13 13:07:52.000000000 +0100
@@ -49,16 +49,10 @@
 {
   memset(m_SoftPicture, 0, sizeof(OutputBuffer) * NUM_BUFFERS);
 
-  for(int i = 0; i < NUM_BUFFERS; i++)
-  {
-    m_SoftPicture[i].pPicture = (IppVmetaPicture *)malloc(sizeof(IppVmetaPicture));
-    
-    if(m_SoftPicture[i].pPicture)
-      memset(m_SoftPicture[i].pPicture, 0, sizeof(IppVmetaPicture));
-  }
-
   m_DllMiscGen        = new DllLibMiscGen();
   m_DllVMETA          = new DllLibVMETA();
+  m_overlayfd         = -1;
+  m_enabled           = 0;
 
   UnInit();
 }
@@ -68,13 +62,6 @@
 {
   UnInit();
 
-  for(int i = 0; i < NUM_BUFFERS; i++)
-  {
-    if(m_SoftPicture[i].pPicture)
-      free(m_SoftPicture[i].pPicture);
-    m_SoftPicture[i].pPicture = NULL;
-  }
-
   m_DllVMETA->Unload();
   m_DllMiscGen->Unload();
 
@@ -106,22 +93,13 @@
 
   OutputBuffer &currPict = m_SoftPicture[m_currentBuffer];
 
-  if (m_format == RENDER_FMT_UYVY422)
-  {
-    m_overlaySurface.videoMode = DOVEFB_VMODE_YUV422PACKED_SWAPYUorV;
-    if (currPict.iLineSize[0])
-      m_overlaySurface.viewPortInfo.ycPitch = currPict.iLineSize[0] * 2;
-    else
-      m_overlaySurface.viewPortInfo.ycPitch = (m_sourceRect.x2 - m_sourceRect.x1) * 2;
-    m_overlaySurface.viewPortInfo.uvPitch = 0;
-  } 
-  else if (m_format == RENDER_FMT_YUV420P)
+  if (m_format == RENDER_FMT_YUV420P)
   {
     m_overlaySurface.videoMode = DOVEFB_VMODE_YUV420PLANAR;
-    if (currPict.iLineSize[0])
+    if (currPict.lineSize[0] && currPict.lineSize[1])
     {
-      m_overlaySurface.viewPortInfo.ycPitch = currPict.iLineSize[0];
-      m_overlaySurface.viewPortInfo.uvPitch = currPict.iLineSize[1];
+      m_overlaySurface.viewPortInfo.ycPitch = currPict.lineSize[0];
+      m_overlaySurface.viewPortInfo.uvPitch = currPict.lineSize[1];
     } 
     else
     {
@@ -129,6 +107,15 @@
       m_overlaySurface.viewPortInfo.uvPitch = (m_sourceRect.x2 - m_sourceRect.x1) / 2;
     }
   } 
+  else /*if (m_format == RENDER_FMT_VMETA || m_format == RENDER_FMT_UYVY422)*/
+  {
+    m_overlaySurface.videoMode = DOVEFB_VMODE_YUV422PACKED_SWAPYUorV;
+    if (currPict.lineSize[0])
+      m_overlaySurface.viewPortInfo.ycPitch = currPict.lineSize[0];
+    else
+      m_overlaySurface.viewPortInfo.ycPitch = (m_sourceRect.x2 - m_sourceRect.x1) * 2;
+    m_overlaySurface.viewPortInfo.uvPitch = 0;
+  } 
 
   m_overlaySurface.viewPortInfo.srcWidth  = m_sourceRect.x2 - m_sourceRect.x1;
   m_overlaySurface.viewPortInfo.srcHeight = m_sourceRect.y2 - m_sourceRect.y1;
@@ -148,6 +135,13 @@
   
   if (first || memcmp (&tmp_overlaySurface.viewPortInfo, &m_overlaySurface.viewPortInfo, sizeof (struct _sViewPortInfo)))
   {
+    CLog::Log(LOGDEBUG, "m_sourceRect.x1 %f m_sourceRect.x2 %f m_sourceRect.y1 %f m_sourceRect.y2 %f m_sourceFrameRatio %f",
+        m_sourceRect.x1, m_sourceRect.x2, m_sourceRect.y1, m_sourceRect.y2, m_sourceFrameRatio);
+    CLog::Log(LOGDEBUG, "m_destRect.x1 %f m_destRect.x2 %f m_destRect.y1 %f m_destRect.y2 %f",
+        m_destRect.x1, m_destRect.x2, m_destRect.y1, m_destRect.y2);
+    CLog::Log(LOGDEBUG, "%s::%s - Setting ycPitch to %d, uvPitch to %d", CLASSNAME, __func__,
+        m_overlaySurface.viewPortInfo.ycPitch ,m_overlaySurface.viewPortInfo.uvPitch);
+    
     if (ioctl(m_overlayfd, DOVEFB_IOCTL_SET_VIEWPORT_INFO, &m_overlaySurface.viewPortInfo) != 0)
     {
       CLog::Log(LOGERROR, "%s::%s - Failed to setup video port", CLASSNAME, __func__);
@@ -168,7 +162,9 @@
   unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height, 
   float fps, unsigned int flags, ERenderFormat format, unsigned extended_format, unsigned int orientation)
 {
-  m_bConfigured = false;
+  m_bConfigured   = false;
+  m_enabled       = 0;
+  m_currentBuffer = 0;
   
   memset (&m_overlaySurface, 0, sizeof(m_overlaySurface));
   m_overlaySurface.videoBufferAddr.startAddr = 0;
@@ -176,7 +172,7 @@
   m_overlaySurface.videoBufferAddr.inputData = 0;
   m_overlaySurface.videoBufferAddr.frameID = 0;
 
-  if (format != RENDER_FMT_UYVY422 && format != RENDER_FMT_YUV420P)
+  if (format != RENDER_FMT_VMETA && format != RENDER_FMT_UYVY422 && format != RENDER_FMT_YUV420P)
   {
     CLog::Log(LOGERROR, "%s::%s - Unknown format 0x%x", CLASSNAME, __func__, format);
     
@@ -201,29 +197,15 @@
     CLog::Log(LOGERROR, "%s::%s - Failed to open framebuffer", CLASSNAME, __func__);
     return false;
   }
-
-  ManageDisplay(true);
-
-  CLog::Log(LOGDEBUG, "%s::%s - Setting ycPitch to %d, uvPitch to %d", CLASSNAME, __func__,
-      m_overlaySurface.viewPortInfo.ycPitch ,m_overlaySurface.viewPortInfo.uvPitch);
-
-  CLog::Log(LOGDEBUG, "m_sourceRect.x1 %f m_sourceRect.x2 %f m_sourceRect.y1 %f m_sourceRect.y2 %f m_sourceFrameRatio %f",
-      m_sourceRect.x1, m_sourceRect.x2, m_sourceRect.y1, m_sourceRect.y2, m_sourceFrameRatio);
-  CLog::Log(LOGDEBUG, "m_destRect.x1 %f m_destRect.x2 %f m_destRect.y1 %f m_destRect.y2 %f",
-      m_destRect.x1, m_destRect.x2, m_destRect.y1, m_destRect.y2);
-
-  m_enabled = 0;
-
+  
   int srcMode = SHM_NORMAL;
-
   if (ioctl(m_overlayfd, DOVEFB_IOCTL_SET_SRC_MODE, &srcMode) == -1)
   {
-    CLog::Log(LOGERROR, "%s::%s - Failed to enable video overlay", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s - Failed set source mode", CLASSNAME, __func__);
     return false;
   }
   
   int interpolation = 3; // bi-linear interpolation
-
   if (ioctl(m_overlayfd, DOVEFB_IOCTL_SET_INTERPOLATION_MODE, &interpolation) != 0)
   {
     CLog::Log(LOGERROR, "%s::%s - Failed to setup video interpolation mode", CLASSNAME, __func__);
@@ -254,11 +236,9 @@
     return false;
   }
 
-  m_currentBuffer = 0;
-  m_bConfigured   = true;
-
   CLog::Log(LOGDEBUG, "%s::%s - Proper format, continuing", CLASSNAME, __func__);
 
+  m_bConfigured = true;
   return m_bConfigured;
 }
 
@@ -270,8 +250,6 @@
 
   UnInit();
 
-  m_currentBuffer = 0;
-
   m_resolution = g_guiSettings.m_LookAndFeelResolution;
   if ( m_resolution == RES_WINDOW )
     m_resolution = RES_DESKTOP;
@@ -282,26 +260,26 @@
 
 void CDoveOverlayRenderer::FlipPage(int source)
 {
+  bool next_frame_present = false;
+  OutputBuffer &currPict = m_SoftPicture[m_currentBuffer];
+
   if (!m_bConfigured)
     return;
 
-  ManageDisplay(false);
+  ManageDisplay(m_enabled);
 
-  unsigned phy_addr[3];
-  bool next_frame_present = false;
-  OutputBuffer &currPict = m_SoftPicture[m_currentBuffer];
-  IppVmetaPicture *pPicture = currPict.pPicture;
-
-  struct shm_private_info info;
-  info.method = SHM_VMETA;
-  ioctl(m_overlayfd, DOVEFB_IOCTL_SET_SRC_MODE, &info.method);
+  if (m_enabled == 0) 
+  {
+    int srcMode = SHM_VMETA;
+    ioctl(m_overlayfd, DOVEFB_IOCTL_SET_SRC_MODE, &srcMode);
+  }
 
   m_overlaySurface.videoBufferAddr.frameID = 0;
 
-  if(pPicture && pPicture->nPhyAddr)
+  if (currPict.phyBuf[0])
   {
-    m_overlaySurface.videoBufferAddr.startAddr = (unsigned char *)pPicture->nPhyAddr;
-    m_overlaySurface.videoBufferAddr.length    = pPicture->nBufSize;
+    m_overlaySurface.videoBufferAddr.startAddr = (unsigned char *)currPict.phyBuf[0];
+    m_overlaySurface.videoBufferAddr.length    = currPict.nBufSize;
   } 
   else 
   {
@@ -309,27 +287,14 @@
     m_overlaySurface.videoBufferAddr.length    = 0;
   }
 
-  //ioctl by Solid-Run not in marvel kernel
-  if (m_format == RENDER_FMT_UYVY422) /* Typically frames from vMeta */
+  if (m_format == RENDER_FMT_VMETA || m_format == RENDER_FMT_UYVY422 || m_format == RENDER_FMT_YUV420P)
   {
-    phy_addr[0] = (unsigned int) currPict.buf[0];
-    phy_addr[1] = (unsigned int) currPict.buf[0];
-    phy_addr[2] = (unsigned int) currPict.buf[0];
-    next_frame_present = true;
-    if(ioctl(m_overlayfd, DOVEFB_IOCTL_NEXT_FRAME_PRESENT, &phy_addr) != 0)
+    //ioctl by Solid-Run not in marvel kernel
+    if(ioctl(m_overlayfd, DOVEFB_IOCTL_NEXT_FRAME_PRESENT, currPict.phyBuf) != 0)
       CLog::Log(LOGERROR, "%s::%s - Error flipping", CLASSNAME, __func__);
-  } 
-  else if (m_format == RENDER_FMT_YUV420P)
-  {
-    phy_addr[0] = (unsigned int) currPict.buf[0];
-    phy_addr[1] = (unsigned int) currPict.buf[1];
-    phy_addr[2] = (unsigned int) currPict.buf[2];
     next_frame_present = true;
-    if(ioctl(m_overlayfd, DOVEFB_IOCTL_NEXT_FRAME_PRESENT, &phy_addr) != 0)
-      CLog::Log(LOGERROR, "%s::%s - Error flipping", CLASSNAME, __func__);
-
   } 
-  else if(ioctl(m_overlayfd, DOVEFB_IOCTL_FLIP_VID_BUFFER, &m_overlaySurface) != 0)
+  else if (ioctl(m_overlayfd, DOVEFB_IOCTL_FLIP_VID_BUFFER, &m_overlaySurface) != 0)
   {
       CLog::Log(LOGERROR, "%s::%s - Error flipping", CLASSNAME, __func__);
   }
@@ -364,7 +329,7 @@
 }
 
 
-void CDoveOverlayRenderer::Update(bool bPauseDrawing)
+void CDoveOverlayRenderer::Update(bool /*bPauseDrawing*/)
 {
   if (!m_bConfigured)
     return;
@@ -395,93 +360,84 @@
 
 bool CDoveOverlayRenderer::DrawSlice(DVDVideoPicture *pDvdVideoPicture)
 {
-  OutputBuffer    &currPict = m_SoftPicture[m_currentBuffer];
-  IppVmetaPicture *pPicture = currPict.pPicture;
-    
-  if(!pPicture)
-    return false;
+  OutputBuffer &currPict = m_SoftPicture[m_currentBuffer];
 
-  // Save the original data buffers and pitch
-  currPict.data[0] = pDvdVideoPicture->data[0];
-  currPict.data[1] = pDvdVideoPicture->data[1];
-  currPict.data[2] = pDvdVideoPicture->data[2];
-  currPict.data[3] = pDvdVideoPicture->data[3];
-  currPict.iLineSize[0] = pDvdVideoPicture->iLineSize[0];
-  currPict.iLineSize[1] = pDvdVideoPicture->iLineSize[1];
-  currPict.iLineSize[2] = pDvdVideoPicture->iLineSize[2];
-  currPict.iLineSize[3] = pDvdVideoPicture->iLineSize[3];
+  if (pDvdVideoPicture->format != m_format)
+      return false;
   
   // from vMeta ?
-  if(pDvdVideoPicture->vmeta)
+  if (m_format == RENDER_FMT_VMETA)
   {
-    if(m_format != RENDER_FMT_UYVY422)
-      return false;
-    
     // switched from other format...
-    if(pPicture->nFlag == PICBUF_ALLOCATED)
-      m_DllVMETA->vdec_os_api_dma_free(pPicture->pBuf);
+    if(currPict.nFlag & PBF_ALLOCATED)
+      m_DllVMETA->vdec_os_api_dma_free(currPict.pBuf);
     
     // Decoder allocated buffer
-    pPicture->nPhyAddr = pDvdVideoPicture->vmeta->nPhyAddr;
-    pPicture->nBufSize = pDvdVideoPicture->vmeta->nBufSize;
-    pPicture->pBuf     = pDvdVideoPicture->vmeta->pBuf;
-    pPicture->nFlag    = PICBUF_IMPORTED;
-
-    currPict.buf[0] = (unsigned char *)pPicture->nPhyAddr;
-    currPict.buf[1] = (unsigned char *)pPicture->nPhyAddr + 
-      (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight);
-    currPict.buf[2] = (unsigned char *)pPicture->nPhyAddr + 
-      (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight) +
-      (pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2);
+    currPict.nFlag       = PBF_IMPORTED;
+    currPict.pBuf        = pDvdVideoPicture->vmeta->pBuf;
+    currPict.nBufSize    = pDvdVideoPicture->vmeta->nBufSize;
+    currPict.phyBuf[0]   = pDvdVideoPicture->vmeta->nPhyAddr;
+    currPict.lineSize[0] = pDvdVideoPicture->vmeta->pic.picPlaneStep[0];
+
+    currPict.phyBuf[1]   = currPict.phyBuf[2] = 0;
+    currPict.lineSize[1] = currPict.lineSize[2] = 0;
   } 
   else
   {
-    if(m_format != RENDER_FMT_YUV420P)
-      return false;
-
+    unsigned int nBufSize = pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight;
+    
     // Software decoding. Allocate buffer for ouput
-    unsigned int memSize = (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight) +
-                           (pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2) +
-                           (pDvdVideoPicture->iLineSize[2] * pDvdVideoPicture->iHeight / 2);
+    if (m_format == RENDER_FMT_YUV420P)
+    {
+      nBufSize += (pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2) +
+                  (pDvdVideoPicture->iLineSize[2] * pDvdVideoPicture->iHeight / 2);
+    }
+    else if (m_format != RENDER_FMT_UYVY422)
+    {
+      return false;
+    }
 
     // Check for size change ...
-    if(pPicture->nFlag == PICBUF_ALLOCATED && pPicture->nBufSize < memSize)
+    if((currPict.nFlag & PBF_ALLOCATED) && currPict.nBufSize < nBufSize)
     {
-      m_DllVMETA->vdec_os_api_dma_free(pPicture->pBuf);
-      pPicture->nFlag = PICBUF_IMPORTED;
+      m_DllVMETA->vdec_os_api_dma_free(currPict.pBuf);
+      currPict.nFlag = PBF_UNUSED;
     }
 
     // Allocate, if necessary
-    if(pPicture->nFlag != PICBUF_ALLOCATED)
+    if(!(currPict.nFlag & PBF_ALLOCATED))
     {
-      pPicture->pBuf = (Ipp8u*)m_DllVMETA->vdec_os_api_dma_alloc_cached(
-                                    memSize, VMETA_DIS_BUF_ALIGN, &(pPicture->nPhyAddr));
-      pPicture->nBufSize = memSize;
-      pPicture->nFlag    = PICBUF_ALLOCATED;
+      currPict.pBuf = (Ipp8u*)m_DllVMETA->vdec_os_api_dma_alloc_cached(
+                                nBufSize, VMETA_DIS_BUF_ALIGN, &currPict.phyBuf[0]);
+      currPict.nBufSize = nBufSize;
+      currPict.nFlag    = PBF_ALLOCATED;
     }
     
-    if(!pPicture->pBuf)
+    if(!currPict.pBuf)
     {
-      pPicture->nBufSize = 0;
-      pPicture->nPhyAddr = 0;
-      pPicture->nFlag    = PICBUF_IMPORTED;
+      currPict.nFlag    = PBF_UNUSED;
       CLog::Log(LOGERROR, "%s::%s - Failed to alloc memory", CLASSNAME, __func__);
       return false;
     }
 
-    currPict.buf[0] = (unsigned char *)pPicture->nPhyAddr;
-    currPict.buf[1] = (unsigned char *)pPicture->nPhyAddr + 
-      (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight);
-    currPict.buf[2] = (unsigned char *)pPicture->nPhyAddr + 
-      (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight) +
-      (pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2);
-
-    unsigned char *dst = pPicture->pBuf;
+    unsigned char *dst = currPict.pBuf;
     memcpy( dst, pDvdVideoPicture->data[0], pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight );
-    dst += pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight;
-    memcpy( dst, pDvdVideoPicture->data[1], pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2 );
-    dst += pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2;
-    memcpy( dst, pDvdVideoPicture->data[2], pDvdVideoPicture->iLineSize[2] * pDvdVideoPicture->iHeight / 2 );
+    
+    if (m_format == RENDER_FMT_YUV420P)
+    {
+      currPict.phyBuf[1] = currPict.phyBuf[0] + (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight);
+      currPict.phyBuf[2] = currPict.phyBuf[1] + (pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2);
+
+      dst += pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight;
+      memcpy( dst, pDvdVideoPicture->data[1], pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2 );
+      
+      dst += pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2;
+      memcpy( dst, pDvdVideoPicture->data[2], pDvdVideoPicture->iLineSize[2] * pDvdVideoPicture->iHeight / 2 );
+    }
+    else
+    {
+      currPict.phyBuf[1] = currPict.phyBuf[2] = 0;
+    }
   }
   
   return true;
@@ -492,44 +448,39 @@
 {
   CLog::Log(LOGDEBUG, "%s::%s", CLASSNAME, __func__);
 
-  memset(m_FreeBufAddr, 0, MAX_QUEUE_NUM * sizeof(unsigned char*));
+  memset(m_FreeBufAddr, 0, MAX_QUEUE_NUM * sizeof(m_FreeBufAddr[0]));
+  
   if(m_overlayfd != -1)
+  {
     ioctl(m_overlayfd, DOVEFB_IOCTL_GET_FREELIST, &m_FreeBufAddr);
 
-  if(m_enabled)
-  {
-    m_enabled = 0;
+    if(m_enabled)
+    {
+      m_enabled = 0;
 
-    if (ioctl(m_overlayfd, DOVEFB_IOCTL_WAIT_VSYNC, 0) != 0)
-      CLog::Log(LOGERROR, "%s::%s - Error waiting for vsync", CLASSNAME, __func__);
+      if (ioctl(m_overlayfd, DOVEFB_IOCTL_WAIT_VSYNC, 0) != 0)
+        CLog::Log(LOGERROR, "%s::%s - Error waiting for vsync", CLASSNAME, __func__);
 
-    if(ioctl(m_overlayfd, DOVEFB_IOCTL_SWITCH_VID_OVLY, &m_enabled) == -1)
-      CLog::Log(LOGERROR, "%s::%s Failed to disable video overlay", CLASSNAME, __func__);
-  }
+      if(ioctl(m_overlayfd, DOVEFB_IOCTL_SWITCH_VID_OVLY, &m_enabled) == -1)
+        CLog::Log(LOGERROR, "%s::%s Failed to disable video overlay", CLASSNAME, __func__);
+    }
 
-  if (m_overlayfd != -1)
     close(m_overlayfd);
+    m_overlayfd = -1;
+  }
 
   for(int i = 0; i < NUM_BUFFERS; i++)
   {
-    IppVmetaPicture *pPicture = m_SoftPicture[i].pPicture;
+    OutputBuffer &currPict = m_SoftPicture[i];
     
-    if(pPicture)
-    {
-      if(pPicture->nFlag == PICBUF_ALLOCATED)
-        m_DllVMETA->vdec_os_api_dma_free(pPicture->pBuf);
-      
-      pPicture->pBuf     = NULL;
-      pPicture->nPhyAddr = 0;
-      pPicture->nBufSize = 0;
-      pPicture->nFlag    = PICBUF_IMPORTED;
-    }
+    if(currPict.nFlag & PBF_ALLOCATED)
+      m_DllVMETA->vdec_os_api_dma_free(currPict.pBuf);
   }
+  memset(m_SoftPicture, 0, sizeof(OutputBuffer) * NUM_BUFFERS);
 
+  m_bConfigured             = false;
   m_currentBuffer           = 0;
   m_iFlags                  = 0;
-  m_bConfigured             = false;
-  m_overlayfd               = -1;
   m_sourceWidth             = 0;
   m_sourceHeight            = 0;
 
diff -aur --unidirectional-new-file a/xbmc/cores/VideoRenderers/DoveOverlayRenderer.h b/xbmc/cores/VideoRenderers/DoveOverlayRenderer.h
--- a/xbmc/cores/VideoRenderers/DoveOverlayRenderer.h	2013-01-13 13:11:14.918768581 +0100
+++ b/xbmc/cores/VideoRenderers/DoveOverlayRenderer.h	2013-01-06 09:29:21.000000000 +0100
@@ -120,16 +120,17 @@
 
 typedef struct _OutputBuffer
 {
-  unsigned char   *buf[3];
-  IppVmetaPicture *pPicture;
-  
-  /* Original data from pPicture */
-  BYTE* data[4];      // [4] = alpha channel, currently not used
-  int iLineSize[4];   // [4] = alpha channel, currently not used
+  unsigned      nFlag;          // see PBF_xxx
+  unsigned char *pBuf;
+  unsigned      nBufSize;
+
+  unsigned      phyBuf[3];
+  unsigned      lineSize[3];
 } OutputBuffer;
 
-#define PICBUF_IMPORTED         0       // owned by decoder (vMeta)
-#define PICBUF_ALLOCATED        1       // owned by renderer
+#define PBF_UNUSED      0x00    // empty
+#define PBF_IMPORTED    0x01    // owned by decoder (vMeta)
+#define PBF_ALLOCATED   0x02    // owned by renderer
 
 class CDoveOverlayRenderer : public CBaseRenderer
 {
@@ -177,25 +178,21 @@
   void          ManageDisplay(bool first);
   bool          DrawSlice(DVDVideoPicture *pDvdVideoPicture);
 
-  bool          m_bConfigured;
-  unsigned int  m_iFlags;
-  ERenderFormat m_format;
-
-  unsigned int  m_currentBuffer;
-
-  // The Overlay handlers
-  int           m_overlayfd;
+  bool                  m_bConfigured;
+  ERenderFormat         m_format;
 
-  int                       m_enabled;
-  struct _sOvlySurface      m_overlaySurface;
-  struct _sViewPortInfo     m_overlayPlaneInfo;
+  int                   m_overlayfd;
+  int                   m_enabled;
+  struct _sOvlySurface  m_overlaySurface;
+  struct _sViewPortInfo m_overlayPlaneInfo;
 
-  DllLibMiscGen             *m_DllMiscGen;
-  DllLibVMETA               *m_DllVMETA;
+  DllLibMiscGen         *m_DllMiscGen;
+  DllLibVMETA           *m_DllVMETA;
 
-  OutputBuffer              m_SoftPicture[NUM_BUFFERS];
+  unsigned int          m_currentBuffer;
+  OutputBuffer          m_SoftPicture[NUM_BUFFERS];
 
-  unsigned char             *m_FreeBufAddr[MAX_QUEUE_NUM];
+  unsigned char         *m_FreeBufAddr[MAX_QUEUE_NUM];
 };
 
 inline int NP2( unsigned x )
diff -aur --unidirectional-new-file a/xbmc/cores/VideoRenderers/RenderFormats.h b/xbmc/cores/VideoRenderers/RenderFormats.h
--- a/xbmc/cores/VideoRenderers/RenderFormats.h	2013-01-12 11:50:57.000000000 +0100
+++ b/xbmc/cores/VideoRenderers/RenderFormats.h	2013-01-12 12:23:58.000000000 +0100
@@ -34,6 +34,7 @@
   RENDER_FMT_OMXEGL,
   RENDER_FMT_CVBREF,
   RENDER_FMT_BYPASS,
+  RENDER_FMT_VMETA,
 };
 
 #endif
