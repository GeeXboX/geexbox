diff -aur --unidirectional-new-file a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h	2013-01-01 17:44:02.907810707 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h	2013-01-01 14:23:33.000000000 +0100
@@ -70,12 +70,13 @@
       struct __CVBuffer *cvBufferRef;
     };
   };
+
 #ifdef HAS_MARVELL_DOVE
   struct {
-    void *vmeta;
+    struct _IppVideoPicture *vmeta;
   };
 #endif
-
+    
   unsigned int iFlags;
 
   double       iRepeatPicture;
diff -aur --unidirectional-new-file a/xbmc/cores/VideoRenderers/DoveOverlayRenderer.cpp b/xbmc/cores/VideoRenderers/DoveOverlayRenderer.cpp
--- a/xbmc/cores/VideoRenderers/DoveOverlayRenderer.cpp	2013-01-01 17:44:06.815810545 +0100
+++ b/xbmc/cores/VideoRenderers/DoveOverlayRenderer.cpp	2013-01-01 14:23:33.000000000 +0100
@@ -33,11 +33,9 @@
 #undef COLOR_KEY_BLACK
 #define COLOR_KEY_ALPHA
 #include "DoveOverlayRenderer.h"
-#include "dovefb.h"
 #include "utils/log.h"
 #include <stdlib.h>
 #include <malloc.h>
-#include "utils/fastmemcpy.h"
 #include "guilib/GraphicContext.h"
 
 #if defined(CLASSNAME)
@@ -46,17 +44,15 @@
 
 #define CLASSNAME "CDoveOverlayRenderer"
 
+
 CDoveOverlayRenderer::CDoveOverlayRenderer()
 {
   memset(m_SoftPicture, 0, sizeof(OutputBuffer) * NUM_BUFFERS);
 
   for(int i = 0; i < NUM_BUFFERS; i++)
   {
-    m_yuvBuffers[i].plane[0]  = NULL;
-    m_yuvBuffers[i].plane[1]  = NULL;
-    m_yuvBuffers[i].plane[2]  = NULL;
-
     m_SoftPicture[i].pPicture = (IppVmetaPicture *)malloc(sizeof(IppVmetaPicture));
+    
     if(m_SoftPicture[i].pPicture)
       memset(m_SoftPicture[i].pPicture, 0, sizeof(IppVmetaPicture));
   }
@@ -67,6 +63,7 @@
   UnInit();
 }
 
+
 CDoveOverlayRenderer::~CDoveOverlayRenderer()
 {
   UnInit();
@@ -90,6 +87,7 @@
 {
   CRect view;
   struct _sOvlySurface tmp_overlaySurface;
+
   memcpy (&tmp_overlaySurface, &m_overlaySurface, sizeof(struct _sOvlySurface));
   view.x1 = (float)g_settings.m_ResInfo[m_resolution].Overscan.left;
   view.y1 = (float)g_settings.m_ResInfo[m_resolution].Overscan.top;
@@ -101,14 +99,18 @@
   m_sourceRect.x2 = (float)m_sourceWidth - g_settings.m_currentVideoSettings.m_CropRight;
   m_sourceRect.y2 = (float)m_sourceHeight - g_settings.m_currentVideoSettings.m_CropBottom;
 
-  CalcNormalDisplayRect(view.x1, view.y1, view.Width(), view.Height(), GetAspectRatio() * g_settings.m_fPixelRatio, g_settings.m_fZoomAmount, g_settings.m_fVerticalShift);
+  CalcNormalDisplayRect(view.x1, view.y1, 
+                        view.Width(), view.Height(), 
+                        GetAspectRatio() * g_settings.m_fPixelRatio, 
+                        g_settings.m_fZoomAmount, g_settings.m_fVerticalShift);
+
+  OutputBuffer &currPict = m_SoftPicture[m_currentBuffer];
 
   if (m_format == RENDER_FMT_UYVY422)
   {
-    int delta;
     m_overlaySurface.videoMode = DOVEFB_VMODE_YUV422PACKED_SWAPYUorV;
-    if (m_SoftPicture[m_currentBuffer].iLineSize[0])
-      m_overlaySurface.viewPortInfo.ycPitch = m_SoftPicture[m_currentBuffer].iLineSize[0] * 2;
+    if (currPict.iLineSize[0])
+      m_overlaySurface.viewPortInfo.ycPitch = currPict.iLineSize[0] * 2;
     else
       m_overlaySurface.viewPortInfo.ycPitch = (m_sourceRect.x2 - m_sourceRect.x1) * 2;
     m_overlaySurface.viewPortInfo.uvPitch = 0;
@@ -116,11 +118,12 @@
   else if (m_format == RENDER_FMT_YUV420P)
   {
     m_overlaySurface.videoMode = DOVEFB_VMODE_YUV420PLANAR;
-    if (m_SoftPicture[m_currentBuffer].iLineSize[0])
+    if (currPict.iLineSize[0])
     {
-      m_overlaySurface.viewPortInfo.ycPitch = m_SoftPicture[m_currentBuffer].iLineSize[0];
-      m_overlaySurface.viewPortInfo.uvPitch = m_SoftPicture[m_currentBuffer].iLineSize[1];
-    } else
+      m_overlaySurface.viewPortInfo.ycPitch = currPict.iLineSize[0];
+      m_overlaySurface.viewPortInfo.uvPitch = currPict.iLineSize[1];
+    } 
+    else
     {
       m_overlaySurface.viewPortInfo.ycPitch = m_sourceRect.x2 - m_sourceRect.x1;
       m_overlaySurface.viewPortInfo.uvPitch = (m_sourceRect.x2 - m_sourceRect.x1) / 2;
@@ -134,53 +137,58 @@
 
   m_overlaySurface.viewPortOffset.xOffset = m_destRect.x1;
   m_overlaySurface.viewPortOffset.yOffset = m_destRect.y1;
+
   if (first || (tmp_overlaySurface.videoMode != m_overlaySurface.videoMode))
   {
     if (ioctl(m_overlayfd, DOVEFB_IOCTL_SET_VIDEO_MODE, &m_overlaySurface.videoMode) == -1)
     {
-      CLog::Log(LOGERROR, "%s::%s - Failed to setup video mode\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s - Failed to setup video mode", CLASSNAME, __func__);
     }
   }
+  
   if (first || memcmp (&tmp_overlaySurface.viewPortInfo, &m_overlaySurface.viewPortInfo, sizeof (struct _sViewPortInfo)))
   {
     if (ioctl(m_overlayfd, DOVEFB_IOCTL_SET_VIEWPORT_INFO, &m_overlaySurface.viewPortInfo) != 0)
     {
-      CLog::Log(LOGERROR, "%s::%s - Failed to setup video port\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s - Failed to setup video port", CLASSNAME, __func__);
     }
   }
+  
   if (first || memcmp (&tmp_overlaySurface.viewPortOffset, &m_overlaySurface.viewPortOffset, sizeof (struct _sVideoBufferAddr)))
   {
     if (ioctl(m_overlayfd, DOVEFB_IOCTL_SET_VID_OFFSET, &m_overlaySurface.viewPortOffset) != 0)
     {
-      CLog::Log(LOGERROR, "%s::%s - Failed to setup video port offset\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s - Failed to setup video port offset", CLASSNAME, __func__);
     }
   }
 }
 
-bool CDoveOverlayRenderer::Configure(unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height, float fps, unsigned int flags, ERenderFormat format, unsigned extended_format, unsigned int orientation)
+
+bool CDoveOverlayRenderer::Configure(
+  unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height, 
+  float fps, unsigned int flags, ERenderFormat format, unsigned extended_format, unsigned int orientation)
 {
-  if (format == RENDER_FMT_NV12)
-  {
-    CLog::Log(LOGERROR, "%s::%s - Bad format\n", CLASSNAME, __func__);
-    return false;
-  }
+  m_bConfigured = false;
+  
+  memset (&m_overlaySurface, 0, sizeof(m_overlaySurface));
+  m_overlaySurface.videoBufferAddr.startAddr = 0;
+  m_overlaySurface.videoBufferAddr.length = 0;//frameSize;
+  m_overlaySurface.videoBufferAddr.inputData = 0;
+  m_overlaySurface.videoBufferAddr.frameID = 0;
 
   if (format != RENDER_FMT_UYVY422 && format != RENDER_FMT_YUV420P)
   {
     CLog::Log(LOGERROR, "%s::%s - Unknown format 0x%x", CLASSNAME, __func__, format);
+    
+    m_format = RENDER_FMT_NONE;
     return false;
   }
 
-  memset (&m_overlaySurface, 0, sizeof(m_overlaySurface));
-  m_overlaySurface.videoBufferAddr.startAddr = 0;
-  m_overlaySurface.videoBufferAddr.length = 0;//frameSize;
-  m_overlaySurface.videoBufferAddr.inputData = 0;
-  m_overlaySurface.videoBufferAddr.frameID = 0;
-
   m_sourceWidth   = width;
   m_sourceHeight  = height;
   m_iFlags        = flags;
   m_format        = format;
+
   // Calculate the input frame aspect ratio.
   CalculateFrameAspectRatio(d_width, d_height);
   ChooseBestResolution(fps);
@@ -196,12 +204,12 @@
 
   ManageDisplay(true);
 
-  CLog::Log(LOGDEBUG, "%s::%s - Setting ycPitch to %d, uvPitch to %d\n", CLASSNAME, __func__,
+  CLog::Log(LOGDEBUG, "%s::%s - Setting ycPitch to %d, uvPitch to %d", CLASSNAME, __func__,
       m_overlaySurface.viewPortInfo.ycPitch ,m_overlaySurface.viewPortInfo.uvPitch);
 
-  CLog::Log(LOGDEBUG, "m_sourceRect.x1 %f m_sourceRect.x2 %f m_sourceRect.y1 %f m_sourceRect.y2 %f m_sourceFrameRatio %f\n",
+  CLog::Log(LOGDEBUG, "m_sourceRect.x1 %f m_sourceRect.x2 %f m_sourceRect.y1 %f m_sourceRect.y2 %f m_sourceFrameRatio %f",
       m_sourceRect.x1, m_sourceRect.x2, m_sourceRect.y1, m_sourceRect.y2, m_sourceFrameRatio);
-  CLog::Log(LOGDEBUG, "m_destRect.x1 %f m_destRect.x2 %f m_destRect.y1 %f m_destRect.y2 %f\n",
+  CLog::Log(LOGDEBUG, "m_destRect.x1 %f m_destRect.x2 %f m_destRect.y1 %f m_destRect.y2 %f",
       m_destRect.x1, m_destRect.x2, m_destRect.y1, m_destRect.y2);
 
   m_enabled = 0;
@@ -210,14 +218,15 @@
 
   if (ioctl(m_overlayfd, DOVEFB_IOCTL_SET_SRC_MODE, &srcMode) == -1)
   {
-    CLog::Log(LOGERROR, "%s::%s - Failed to enable video overlay\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s - Failed to enable video overlay", CLASSNAME, __func__);
     return false;
   }
+  
   int interpolation = 3; // bi-linear interpolation
 
   if (ioctl(m_overlayfd, DOVEFB_IOCTL_SET_INTERPOLATION_MODE, &interpolation) != 0)
   {
-    CLog::Log(LOGERROR, "%s::%s - Failed to setup video interpolation mode\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s - Failed to setup video interpolation mode", CLASSNAME, __func__);
     return false;
   }
 
@@ -241,24 +250,19 @@
 
   if (ioctl(m_overlayfd, DOVEFB_IOCTL_SET_COLORKEYnALPHA, &alpha) == -1)
   {
-    CLog::Log(LOGERROR, "%s::%s - Failed to configure alpha\n", CLASSNAME, __func__);
+    CLog::Log(LOGERROR, "%s::%s - Failed to configure alpha", CLASSNAME, __func__);
     return false;
   }
 
-  for (unsigned int i = 0; i < NUM_BUFFERS; i++)
-  {
-    FreeYV12Image(i);
-    CreateYV12Image(i, m_sourceWidth, m_sourceHeight);
-  }
-
   m_currentBuffer = 0;
   m_bConfigured   = true;
 
-  CLog::Log(LOGDEBUG, "%s::%s - Proper format, continuing\n", CLASSNAME, __func__);
+  CLog::Log(LOGDEBUG, "%s::%s - Proper format, continuing", CLASSNAME, __func__);
 
   return m_bConfigured;
 }
 
+
 unsigned int CDoveOverlayRenderer::PreInit()
 {
   if(!m_DllVMETA->Load() || !m_DllMiscGen->Load())
@@ -275,46 +279,18 @@
   return true;
 }
 
-int CDoveOverlayRenderer::GetImage(YV12Image *image, int source, bool readonly)
-{
-  if(!image)
-    return -1;
-
-  /* take next available buffer */
-  if( source == AUTOSOURCE)
-    source = NextYV12Image();
-
-  YV12Image &im = m_yuvBuffers[source];
-
-  for(int p = 0; p < MAX_PLANES; p++)
-  {
-    image->plane[p]  = im.plane[p];
-    image->stride[p] = im.stride[p];
-  }
-
-  image->width    = im.width;
-  image->height   = im.height;
-  image->flags    = im.flags;
-  image->cshift_x = im.cshift_x;
-  image->cshift_y = im.cshift_y;
-
-  return source;
-}
-
-void CDoveOverlayRenderer::ReleaseImage(int source, bool preserve)
-{
-}
 
 void CDoveOverlayRenderer::FlipPage(int source)
 {
-  unsigned phy_addr[3];
-  bool m_next_frame_present = false;
   if (!m_bConfigured)
     return;
 
   ManageDisplay(false);
 
-  IppVmetaPicture *pPicture = m_SoftPicture[m_currentBuffer].pPicture;
+  unsigned phy_addr[3];
+  bool next_frame_present = false;
+  OutputBuffer &currPict = m_SoftPicture[m_currentBuffer];
+  IppVmetaPicture *pPicture = currPict.pPicture;
 
   struct shm_private_info info;
   info.method = SHM_VMETA;
@@ -336,61 +312,67 @@
   //ioctl by Solid-Run not in marvel kernel
   if (m_format == RENDER_FMT_UYVY422) /* Typically frames from vMeta */
   {
-    phy_addr[0] = (unsigned int) m_SoftPicture[m_currentBuffer].buf[0];
-    phy_addr[1] = (unsigned int) m_SoftPicture[m_currentBuffer].buf[0];
-    phy_addr[2] = (unsigned int) m_SoftPicture[m_currentBuffer].buf[0];
-    m_next_frame_present = true;
+    phy_addr[0] = (unsigned int) currPict.buf[0];
+    phy_addr[1] = (unsigned int) currPict.buf[0];
+    phy_addr[2] = (unsigned int) currPict.buf[0];
+    next_frame_present = true;
     if(ioctl(m_overlayfd, DOVEFB_IOCTL_NEXT_FRAME_PRESENT, &phy_addr) != 0)
-      CLog::Log(LOGERROR, "%s::%s - Error flipping\n", CLASSNAME, __func__);
-  } else if (m_format == RENDER_FMT_YUV420P)
+      CLog::Log(LOGERROR, "%s::%s - Error flipping", CLASSNAME, __func__);
+  } 
+  else if (m_format == RENDER_FMT_YUV420P)
   {
-    phy_addr[0] = (unsigned int) m_SoftPicture[m_currentBuffer].buf[0];
-    phy_addr[1] = (unsigned int) m_SoftPicture[m_currentBuffer].buf[1];
-    phy_addr[2] = (unsigned int) m_SoftPicture[m_currentBuffer].buf[2];
-    m_next_frame_present = true;
+    phy_addr[0] = (unsigned int) currPict.buf[0];
+    phy_addr[1] = (unsigned int) currPict.buf[1];
+    phy_addr[2] = (unsigned int) currPict.buf[2];
+    next_frame_present = true;
     if(ioctl(m_overlayfd, DOVEFB_IOCTL_NEXT_FRAME_PRESENT, &phy_addr) != 0)
-      CLog::Log(LOGERROR, "%s::%s - Error flipping\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s - Error flipping", CLASSNAME, __func__);
 
-  } else if(ioctl(m_overlayfd, DOVEFB_IOCTL_FLIP_VID_BUFFER, &m_overlaySurface) != 0)
-      CLog::Log(LOGERROR, "%s::%s - Error flipping\n", CLASSNAME, __func__);
+  } 
+  else if(ioctl(m_overlayfd, DOVEFB_IOCTL_FLIP_VID_BUFFER, &m_overlaySurface) != 0)
+  {
+      CLog::Log(LOGERROR, "%s::%s - Error flipping", CLASSNAME, __func__);
+  }
 
   if (m_enabled == 0) 
   {
     m_enabled = 1;
 
     if (ioctl(m_overlayfd, DOVEFB_IOCTL_SWITCH_VID_OVLY, &m_enabled) == -1)
-      CLog::Log(LOGERROR, "%s::%s - Failed to enable video overlay\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s - Failed to enable video overlay", CLASSNAME, __func__);
   }
 
   /*
    * Is only needed for DOVEFB_IOCTL_NEXT_FRAME_PRESENT
    */
-  if (m_next_frame_present == true)
+  if (next_frame_present)
+  {
     if (ioctl(m_overlayfd, DOVEFB_IOCTL_WAIT_VSYNC, 0) != 0)
-      CLog::Log(LOGERROR, "%s::%s - Error waiting for vsync\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s - Error waiting for vsync", CLASSNAME, __func__);
+  }
 
   if( source >= 0 && source < NUM_BUFFERS )
     m_currentBuffer = source;
   else
-    m_currentBuffer = NextYV12Image();
+    m_currentBuffer = (m_currentBuffer + 1) % NUM_BUFFERS;
 }
 
+
 void CDoveOverlayRenderer::Reset()
 {
+  CLog::Log(LOGNOTICE, "%s::%s - Not implemented", CLASSNAME, __func__);
 }
 
-void CDoveOverlayRenderer::Update(bool bPauseDrawing)
-{
-}
 
-void CDoveOverlayRenderer::AddProcessor(YV12Image *image, DVDVideoPicture *pDvdVideoPicture)
+void CDoveOverlayRenderer::Update(bool bPauseDrawing)
 {
   if (!m_bConfigured)
     return;
 
-  DrawSlice(pDvdVideoPicture);
+  ManageDisplay(false);
 }
 
+
 void CDoveOverlayRenderer::RenderUpdate(bool clear, DWORD flags, DWORD alpha)
 {
   if (!m_bConfigured)
@@ -403,120 +385,144 @@
 #endif
 }
 
+
 bool CDoveOverlayRenderer::RenderCapture(CRenderCapture* capture)
 {
-  CLog::Log(LOGERROR, "%s::%s - Not implemented\n", CLASSNAME, __func__);
+  CLog::Log(LOGNOTICE, "%s::%s - Not implemented", CLASSNAME, __func__);
   return true;
 }
 
 
-unsigned int CDoveOverlayRenderer::DrawSlice(DVDVideoPicture *pDvdVideoPicture)
+bool CDoveOverlayRenderer::DrawSlice(DVDVideoPicture *pDvdVideoPicture)
 {
-  Ipp32u nPhyAddr = 0;
-  Ipp32u nBufSize = 0;
-
-  if(pDvdVideoPicture->vmeta)
-  {
-    IppVmetaPicture *pPicture = (IppVmetaPicture *)pDvdVideoPicture->vmeta;
-    nPhyAddr = pPicture->nPhyAddr;
-    nBufSize = pPicture->nBufSize;
-  }
-
-  IppVmetaPicture *pPicture = m_SoftPicture[m_currentBuffer].pPicture;
-
-  m_SoftPicture[m_currentBuffer].buf[0] = NULL;
-  m_SoftPicture[m_currentBuffer].buf[1] = NULL;
-  m_SoftPicture[m_currentBuffer].buf[2] = NULL;
-
+  OutputBuffer    &currPict = m_SoftPicture[m_currentBuffer];
+  IppVmetaPicture *pPicture = currPict.pPicture;
+    
   if(!pPicture)
     return false;
 
-  /* Save the original data buffers and pitch */
-  for (int i = 0 ; i < 4 ; i ++)
-  {
-        m_SoftPicture[m_currentBuffer].iLineSize[i] = pDvdVideoPicture->iLineSize[i];
-        m_SoftPicture[m_currentBuffer].data[i] = pDvdVideoPicture->data[i];
-  }
-  if(nPhyAddr)
+  // Save the original data buffers and pitch
+  currPict.data[0] = pDvdVideoPicture->data[0];
+  currPict.data[1] = pDvdVideoPicture->data[1];
+  currPict.data[2] = pDvdVideoPicture->data[2];
+  currPict.data[3] = pDvdVideoPicture->data[3];
+  currPict.iLineSize[0] = pDvdVideoPicture->iLineSize[0];
+  currPict.iLineSize[1] = pDvdVideoPicture->iLineSize[1];
+  currPict.iLineSize[2] = pDvdVideoPicture->iLineSize[2];
+  currPict.iLineSize[3] = pDvdVideoPicture->iLineSize[3];
+  
+  // from vMeta ?
+  if(pDvdVideoPicture->vmeta)
   {
+    if(m_format != RENDER_FMT_UYVY422)
+      return false;
+    
+    // switched from other format...
+    if(pPicture->nFlag == PICBUF_ALLOCATED)
+      m_DllVMETA->vdec_os_api_dma_free(pPicture->pBuf);
+    
     // Decoder allocated buffer
-    pPicture->nPhyAddr = nPhyAddr;
-    pPicture->nBufSize = nBufSize;
-    m_SoftPicture[m_currentBuffer].bFree = false;
-    m_SoftPicture[m_currentBuffer].buf[0] = (unsigned char *)pPicture->nPhyAddr;
-    m_SoftPicture[m_currentBuffer].buf[1] = (unsigned char *)pPicture->nPhyAddr + 
+    pPicture->nPhyAddr = pDvdVideoPicture->vmeta->nPhyAddr;
+    pPicture->nBufSize = pDvdVideoPicture->vmeta->nBufSize;
+    pPicture->pBuf     = pDvdVideoPicture->vmeta->pBuf;
+    pPicture->nFlag    = PICBUF_IMPORTED;
+
+    currPict.buf[0] = (unsigned char *)pPicture->nPhyAddr;
+    currPict.buf[1] = (unsigned char *)pPicture->nPhyAddr + 
       (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight);
-    m_SoftPicture[m_currentBuffer].buf[2] = (unsigned char *)pPicture->nPhyAddr + 
+    currPict.buf[2] = (unsigned char *)pPicture->nPhyAddr + 
       (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight) +
       (pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2);
   } 
   else
   {
-    // Software decoding. Allocate buffer for ouput
     if(m_format != RENDER_FMT_YUV420P)
       return false;
 
+    // Software decoding. Allocate buffer for ouput
     unsigned int memSize = (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight) +
-      (pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2) +
-      (pDvdVideoPicture->iLineSize[2] * pDvdVideoPicture->iHeight / 2);
-    /* Potentiall issue since pre-allocated buffer might be too small */
-    if(!pPicture->pBuf)
-      pPicture->pBuf = (Ipp8u*)m_DllVMETA->vdec_os_api_dma_alloc_cached(memSize, VMETA_DIS_BUF_ALIGN, &(pPicture->nPhyAddr));
+                           (pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2) +
+                           (pDvdVideoPicture->iLineSize[2] * pDvdVideoPicture->iHeight / 2);
 
+    // Check for size change ...
+    if(pPicture->nFlag == PICBUF_ALLOCATED && pPicture->nBufSize < memSize)
+    {
+      m_DllVMETA->vdec_os_api_dma_free(pPicture->pBuf);
+      pPicture->nFlag = PICBUF_IMPORTED;
+    }
+
+    // Allocate, if necessary
+    if(pPicture->nFlag != PICBUF_ALLOCATED)
+    {
+      pPicture->pBuf = (Ipp8u*)m_DllVMETA->vdec_os_api_dma_alloc_cached(
+                                    memSize, VMETA_DIS_BUF_ALIGN, &(pPicture->nPhyAddr));
+      pPicture->nBufSize = memSize;
+      pPicture->nFlag    = PICBUF_ALLOCATED;
+    }
+    
     if(!pPicture->pBuf)
     {
-      CLog::Log(LOGERROR, "%s::%s - Failed to alloc memory\n", CLASSNAME, __func__);
+      pPicture->nBufSize = 0;
+      pPicture->nPhyAddr = 0;
+      pPicture->nFlag    = PICBUF_IMPORTED;
+      CLog::Log(LOGERROR, "%s::%s - Failed to alloc memory", CLASSNAME, __func__);
       return false;
     }
-    m_SoftPicture[m_currentBuffer].bFree = true;
-    m_SoftPicture[m_currentBuffer].buf[0] = (unsigned char *)pPicture->nPhyAddr;
-    m_SoftPicture[m_currentBuffer].buf[1] = (unsigned char *)pPicture->nPhyAddr + 
+
+    currPict.buf[0] = (unsigned char *)pPicture->nPhyAddr;
+    currPict.buf[1] = (unsigned char *)pPicture->nPhyAddr + 
       (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight);
-    m_SoftPicture[m_currentBuffer].buf[2] = (unsigned char *)pPicture->nPhyAddr + 
+    currPict.buf[2] = (unsigned char *)pPicture->nPhyAddr + 
       (pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight) +
       (pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2);
-    unsigned char *dst = (unsigned char *)pPicture->pBuf;
 
-    fast_memcpy( dst, (unsigned char *)pDvdVideoPicture->data[0], pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight );
+    unsigned char *dst = pPicture->pBuf;
+    memcpy( dst, pDvdVideoPicture->data[0], pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight );
     dst += pDvdVideoPicture->iLineSize[0] * pDvdVideoPicture->iHeight;
-    fast_memcpy( dst, (unsigned char *)pDvdVideoPicture->data[1], pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2 );
+    memcpy( dst, pDvdVideoPicture->data[1], pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2 );
     dst += pDvdVideoPicture->iLineSize[1] * pDvdVideoPicture->iHeight / 2;
-    fast_memcpy( dst, (unsigned char *)pDvdVideoPicture->data[2], pDvdVideoPicture->iLineSize[2] * pDvdVideoPicture->iHeight / 2 );
+    memcpy( dst, pDvdVideoPicture->data[2], pDvdVideoPicture->iLineSize[2] * pDvdVideoPicture->iHeight / 2 );
   }
-  return 0;
+  
+  return true;
 }
 
+
 void CDoveOverlayRenderer::UnInit()
 {
-  CLog::Log(LOGDEBUG, "%s::%s\n", CLASSNAME, __func__);
+  CLog::Log(LOGDEBUG, "%s::%s", CLASSNAME, __func__);
 
   memset(m_FreeBufAddr, 0, MAX_QUEUE_NUM * sizeof(unsigned char*));
-  if(m_overlayfd)
+  if(m_overlayfd != -1)
     ioctl(m_overlayfd, DOVEFB_IOCTL_GET_FREELIST, &m_FreeBufAddr);
 
   if(m_enabled)
   {
-    m_enabled                 = 0;
+    m_enabled = 0;
 
     if (ioctl(m_overlayfd, DOVEFB_IOCTL_WAIT_VSYNC, 0) != 0)
-      CLog::Log(LOGERROR, "%s::%s - Error waiting for vsync\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s - Error waiting for vsync", CLASSNAME, __func__);
 
     if(ioctl(m_overlayfd, DOVEFB_IOCTL_SWITCH_VID_OVLY, &m_enabled) == -1)
-      CLog::Log(LOGERROR, "%s::%s Failed to disable video overlay\n", CLASSNAME, __func__);
+      CLog::Log(LOGERROR, "%s::%s Failed to disable video overlay", CLASSNAME, __func__);
   }
 
-  if (m_overlayfd > 0)
+  if (m_overlayfd != -1)
     close(m_overlayfd);
 
   for(int i = 0; i < NUM_BUFFERS; i++)
   {
-    FreeYV12Image(i);
-    if(m_SoftPicture[i].bFree)
+    IppVmetaPicture *pPicture = m_SoftPicture[i].pPicture;
+    
+    if(pPicture)
     {
-      if(m_SoftPicture[i].pPicture && m_SoftPicture[i].pPicture->pBuf)
-        m_DllVMETA->vdec_os_api_dma_free(m_SoftPicture[i].pPicture->pBuf);
-      m_SoftPicture[i].pPicture->pBuf = NULL;
-      m_SoftPicture[i].bFree = false;
+      if(pPicture->nFlag == PICBUF_ALLOCATED)
+        m_DllVMETA->vdec_os_api_dma_free(pPicture->pBuf);
+      
+      pPicture->pBuf     = NULL;
+      pPicture->nPhyAddr = 0;
+      pPicture->nBufSize = 0;
+      pPicture->nFlag    = PICBUF_IMPORTED;
     }
   }
 
@@ -531,32 +537,31 @@
   memset(&m_overlayPlaneInfo, 0, sizeof(struct _sViewPortInfo));
 }
 
-void CDoveOverlayRenderer::CreateThumbnail(CBaseTexture* texture, unsigned int width, unsigned int height)
-{
-  CLog::Log(LOGDEBUG, "%s::%s Was asked to create thumbnail (width = %d, height = %d\n", 
-      CLASSNAME, __func__, width, height);
-}
 
 bool CDoveOverlayRenderer::Supports(EDEINTERLACEMODE mode)
 {
   return false;
 }
 
+
 bool CDoveOverlayRenderer::Supports(ERENDERFEATURE feature)
 {
   return false;
 }
 
+
 bool CDoveOverlayRenderer::SupportsMultiPassRendering()
 {
   return false;
 }
 
+
 bool CDoveOverlayRenderer::Supports(EINTERLACEMETHOD method)
 {
   return false;
 }
 
+
 bool CDoveOverlayRenderer::Supports(ESCALINGMETHOD method)
 {
   if(method == VS_SCALINGMETHOD_NEAREST || method == VS_SCALINGMETHOD_LINEAR)
@@ -565,55 +570,10 @@
   return false;
 }
 
+
 EINTERLACEMETHOD CDoveOverlayRenderer::AutoInterlaceMethod()
 {
   return VS_INTERLACEMETHOD_NONE;
 }
 
-unsigned int CDoveOverlayRenderer::NextYV12Image()
-{
-  return (m_currentBuffer + 1) % NUM_BUFFERS;
-}
-
-bool CDoveOverlayRenderer::CreateYV12Image(unsigned int index, unsigned int width, unsigned int height)
-{
-  YV12Image &im = m_yuvBuffers[index];
-
-  im.width  = width;
-  im.height = height;
-  im.cshift_x = 1;
-  im.cshift_y = 1;
-
-  unsigned paddedWidth = (im.width + 15) & ~15;
-
-  im.stride[0] = paddedWidth;
-  im.stride[1] = paddedWidth >> im.cshift_x;
-  im.stride[2] = paddedWidth >> im.cshift_x;
-
-  im.planesize[0] = im.stride[0] * im.height;
-  im.planesize[1] = im.stride[1] * ( im.height >> im.cshift_y );
-  im.planesize[2] = im.stride[2] * ( im.height >> im.cshift_y );
-
-  /*
-  for (int i = 0; i < MAX_PLANES; i++)
-    im.plane[i] = new BYTE[im.planesize[i]];
-  */
-
-  return true;
-}
-
-bool CDoveOverlayRenderer::FreeYV12Image(unsigned int index)
-{
-  YV12Image &im = m_yuvBuffers[index];
-
-  for (int i = 0; i < MAX_PLANES; i++)
-  {
-    //delete[] im.plane[i];
-    im.plane[i] = NULL;
-  }
-
-  memset(&im , 0, sizeof(YV12Image));
-
-  return true;
-}
 #endif
diff -aur --unidirectional-new-file a/xbmc/cores/VideoRenderers/DoveOverlayRenderer.h b/xbmc/cores/VideoRenderers/DoveOverlayRenderer.h
--- a/xbmc/cores/VideoRenderers/DoveOverlayRenderer.h	2013-01-01 17:44:06.819810544 +0100
+++ b/xbmc/cores/VideoRenderers/DoveOverlayRenderer.h	2013-01-01 16:49:54.000000000 +0100
@@ -37,9 +37,6 @@
 class CRenderCapture;
 class CBaseTexture;
 
-#undef ALIGN
-#define ALIGN(value, alignment) (((value)+((alignment)-1))&~((alignment)-1))
-
 #define AUTOSOURCE -1
 
 #define IMAGE_FLAG_WRITING   0x01 /* image is in use after a call to GetImage, caller may be reading or writing */
@@ -123,78 +120,82 @@
 
 typedef struct _OutputBuffer
 {
-  IppVmetaPicture *pPicture;
-  bool            bFree;
   unsigned char   *buf[3];
+  IppVmetaPicture *pPicture;
+  
   /* Original data from pPicture */
   BYTE* data[4];      // [4] = alpha channel, currently not used
   int iLineSize[4];   // [4] = alpha channel, currently not used
 } OutputBuffer;
 
+#define PICBUF_IMPORTED         0       // owned by decoder (vMeta)
+#define PICBUF_ALLOCATED        1       // owned by renderer
+
 class CDoveOverlayRenderer : public CBaseRenderer
 {
-  public:
-    CDoveOverlayRenderer();
-    virtual ~CDoveOverlayRenderer();
-
-    virtual void Update(bool bPauseDrawing);
-    virtual void SetupScreenshot() {};
-
-    bool RenderCapture(CRenderCapture* capture); 
-
-    void CreateThumbnail(CBaseTexture *texture, unsigned int width, unsigned int height);
-
-    // Player functions
-    virtual void ManageDisplay(bool first);
-    virtual bool Configure(unsigned int width, unsigned int height, unsigned int d_width, unsigned int d_height,  
-                           float fps, unsigned int flags, ERenderFormat format, unsigned extended_format, unsigned int orientation);
-    virtual bool IsConfigured() { return m_bConfigured; }
-    virtual int          GetImage(YV12Image *image, int source = AUTOSOURCE, bool readonly = false);
-    virtual void         ReleaseImage(int source, bool preserve = false);
-    virtual unsigned int DrawSlice(DVDVideoPicture *pDvdVideoPicture);
-    virtual void         FlipPage(int source);
-    virtual unsigned int PreInit();
-    virtual void         UnInit();
-    virtual void         Reset(); /* resets renderer after seek for example */
-
-    virtual void         AddProcessor(YV12Image *image, DVDVideoPicture *pDvdVideoPicture);
-
-    virtual void RenderUpdate(bool clear, DWORD flags = 0, DWORD alpha = 255);
-
-    // Feature support
-    virtual bool SupportsMultiPassRendering();
-    virtual bool Supports(ERENDERFEATURE feature);
-    virtual bool Supports(EDEINTERLACEMODE mode);
-    virtual bool Supports(EINTERLACEMETHOD method);
-    virtual bool Supports(ESCALINGMETHOD method);
-
-    virtual EINTERLACEMETHOD AutoInterlaceMethod();
-
-  private:
-    unsigned int NextYV12Image();
-    bool CreateYV12Image(unsigned int index, unsigned int width, unsigned int height);
-    bool FreeYV12Image(unsigned int index);
-
-    bool          m_bConfigured;
-    unsigned int  m_iFlags;
-    ERenderFormat m_format;
-
-    YV12Image     m_yuvBuffers[NUM_BUFFERS];
-    unsigned int  m_currentBuffer;
-
-    // The Overlay handlers
-    int           m_overlayfd;
-
-    int                       m_enabled;
-    struct _sOvlySurface      m_overlaySurface;
-    struct _sViewPortInfo     m_overlayPlaneInfo;
+public:
+  CDoveOverlayRenderer();
+  virtual ~CDoveOverlayRenderer();
+
+  virtual void Update(bool bPauseDrawing);
+  virtual void SetupScreenshot() {};
+
+  bool RenderCapture(CRenderCapture* capture); 
+
+  // Player functions
+  virtual bool Configure(unsigned int width, unsigned int height, 
+                         unsigned int d_width, unsigned int d_height,  
+                         float fps, unsigned int flags, ERenderFormat format, 
+                         unsigned extended_format, unsigned int orientation);
+  virtual bool IsConfigured() { return m_bConfigured; }
+  virtual int          GetImage(YV12Image *image, int source = AUTOSOURCE, bool readonly = false) { return -1; }
+  virtual void         ReleaseImage(int source, bool preserve = false) {};
+  virtual void         FlipPage(int source);
+  virtual unsigned int PreInit();
+  virtual void         UnInit();
+  virtual void         Reset(); /* resets renderer after seek for example */
+
+  virtual void RenderUpdate(bool clear, DWORD flags = 0, DWORD alpha = 255);
+
+  // Re-implemented CBaseRenderer function(s)
+  virtual bool AddVideoPicture(DVDVideoPicture* picture)
+  {
+    DrawSlice(picture); 
+    return true;
+  }
+  
+  // Feature support
+  virtual bool SupportsMultiPassRendering();
+  virtual bool Supports(ERENDERFEATURE feature);
+  virtual bool Supports(EDEINTERLACEMODE mode);
+  virtual bool Supports(EINTERLACEMETHOD method);
+  virtual bool Supports(ESCALINGMETHOD method);
+
+  virtual EINTERLACEMETHOD AutoInterlaceMethod();
+
+private:
+  void          ManageDisplay(bool first);
+  bool          DrawSlice(DVDVideoPicture *pDvdVideoPicture);
+
+  bool          m_bConfigured;
+  unsigned int  m_iFlags;
+  ERenderFormat m_format;
+
+  unsigned int  m_currentBuffer;
+
+  // The Overlay handlers
+  int           m_overlayfd;
+
+  int                       m_enabled;
+  struct _sOvlySurface      m_overlaySurface;
+  struct _sViewPortInfo     m_overlayPlaneInfo;
 
-    DllLibMiscGen             *m_DllMiscGen;
-    DllLibVMETA               *m_DllVMETA;
+  DllLibMiscGen             *m_DllMiscGen;
+  DllLibVMETA               *m_DllVMETA;
 
-    OutputBuffer              m_SoftPicture[NUM_BUFFERS];
+  OutputBuffer              m_SoftPicture[NUM_BUFFERS];
 
-    unsigned char             *m_FreeBufAddr[MAX_QUEUE_NUM];
+  unsigned char             *m_FreeBufAddr[MAX_QUEUE_NUM];
 };
 
 inline int NP2( unsigned x )
diff -aur --unidirectional-new-file a/xbmc/cores/VideoRenderers/RenderManager.cpp b/xbmc/cores/VideoRenderers/RenderManager.cpp
--- a/xbmc/cores/VideoRenderers/RenderManager.cpp	2013-01-01 17:44:05.023810620 +0100
+++ b/xbmc/cores/VideoRenderers/RenderManager.cpp	2013-01-01 14:23:33.000000000 +0100
@@ -848,11 +848,7 @@
   || pic.format == RENDER_FMT_YUV420P10
   || pic.format == RENDER_FMT_YUV420P16)
   {
-#ifdef HAS_MARVELL_DOVE
-    m_pRenderer->AddProcessor(&image, &pic);
-#else
     CDVDCodecUtils::CopyPicture(&image, &pic);
-#endif
   }
   else if(pic.format == RENDER_FMT_NV12)
   {
@@ -861,11 +857,7 @@
   else if(pic.format == RENDER_FMT_YUYV422
        || pic.format == RENDER_FMT_UYVY422)
   {
-#ifdef HAS_MARVELL_DOVE
-    m_pRenderer->AddProcessor(&image, &pic);
-#else
     CDVDCodecUtils::CopyYUV422PackedPicture(&image, &pic);
-#endif
   }
   else if(pic.format == RENDER_FMT_DXVA)
   {

