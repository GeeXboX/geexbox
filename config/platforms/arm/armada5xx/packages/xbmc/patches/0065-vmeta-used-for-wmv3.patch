diff -aur --unidirectional-new-file a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp	2013-04-20 17:04:56.551182468 +0200
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp	2013-04-20 16:47:56.779234654 +0200
@@ -46,7 +46,6 @@
 #include "settings/GUISettings.h"
 #include "DVDCodecs/DVDCodecs.h"
 
-
 #define ENABLE_MPEG1            // use vMeta for MPEG1 decoding
 //#define ENABLE_PTS              // honour presentation time stamps
 
@@ -57,6 +56,7 @@
 #define PADDED_SIZE(s)          ALIGN_SIZE((s), 128)    // align to multiple of 128 (vMeta requirement)
 #define PADDING_LEN(s)          ALIGN_OFFSET((s), 128)  // align to multiple of 128 (vMeta requirement) 
 #define PADDING_BYTE            0x88            // the vmeta decoder needs a padding of 0x88 at the end of a frame
+#define OPTIMIZE_OFFSET_FOR_VMETAVC1MP 16       // add some workspace to avoid vMeta internal data copying
 
 #define STREAM_VDECBUF_SIZE     (512*1024U)     // must equal to or greater than 64k and multiple of 128
 #define STREAM_VDECBUF_NUM      7               // number of stream buffers
@@ -240,6 +240,12 @@
       bSendCodecConfig = true;
       break;
 
+    case CODEC_ID_WMV3:
+      m_VDecParSet.strm_fmt = IPP_VIDEO_STRM_FMT_VC1M;
+      m_video_codec_name = "vmeta-wmv3";
+      bSendCodecConfig = true;
+      break;
+      
 #ifdef ENABLE_MPEG1
     case CODEC_ID_MPEG1VIDEO:
       m_VDecParSet.strm_fmt = IPP_VIDEO_STRM_FMT_MPG1;
@@ -249,8 +255,8 @@
 #endif
 
     default:
-      CLog::Log(LOGDEBUG, "%s::%s CodecID 0x%08x not supported by VMETA decoder", 
-                CLASSNAME, __func__, hints.codec);
+      CLog::Log(LOGDEBUG, "%s::%s CodecID 0x%08x (%.4s) not supported by VMETA decoder", 
+                CLASSNAME, __func__, hints.codec, (char *)&hints.codec_tag);
       return false;
   }
 
@@ -406,12 +412,39 @@
   IppCodecStatus retCodec;
   IppVmetaBitstream *pStream;
   
-  if (!m_extradata || !m_extrasize || 
-      !m_pDecState || !m_input_available.getHead(pStream) )
-  {
+  if (!m_extradata || !m_extrasize || !m_pDecState)
     return IPP_STATUS_ERR;
+  
+
+  if (m_VDecParSet.strm_fmt == IPP_VIDEO_STRM_FMT_VC1M)
+  {
+    vc1m_seq_header seqInfo;
+    
+    seqInfo.num_frames = 0xffffff;
+    seqInfo.vert_size  = m_picture_height;
+    seqInfo.horiz_size = m_picture_width;
+    seqInfo.level      = ((m_extradata[0]>>4) == 4) ? 4 : 2;
+    seqInfo.cbr        = 1;
+    seqInfo.hrd_buffer = 0x007fff;
+    seqInfo.hrd_rate   = 0x00007fff;
+    seqInfo.frame_rate = 0xffffffff;
+    seqInfo.exthdrsize = m_extrasize;
+    memcpy(seqInfo.exthdr, m_extradata, 
+           std::min<unsigned>(m_extrasize, sizeof(seqInfo.exthdr)));
+    
+    retCodec = m_DllVMETA->DecodeSendCmd_Vmeta(
+                  IPPVC_SET_VC1M_SEQ_INFO, &seqInfo, NULL, m_pDecState);
+    
+    if (retCodec != IPP_STATUS_NOERR)
+      CLog::Log(LOGERROR, "%s::%s Error : Set VC1M sequence info ", CLASSNAME, __func__);
+
+    return retCodec;  
   }
 
+
+  if (!m_input_available.getHead(pStream))
+    return IPP_STATUS_ERR;
+
   memcpy(pStream->pBuf, m_extradata, m_extrasize);
   pStream->nDataLen = m_extrasize;
   pStream->nFlag    = IPP_VMETA_STRM_BUF_END_OF_UNIT;
@@ -420,16 +453,16 @@
   if (paddingLen)
     memset(pStream->pBuf + m_extrasize, PADDING_BYTE, paddingLen);
 
-  retCodec = m_DllVMETA->DecoderPushBuffer_Vmeta(IPP_VMETA_BUF_TYPE_STRM, pStream, m_pDecState);
-  if(retCodec != IPP_STATUS_NOERR)
+  retCodec = m_DllVMETA->DecoderPushBuffer_Vmeta(
+                IPP_VMETA_BUF_TYPE_STRM, pStream, m_pDecState);
+
+  if (retCodec != IPP_STATUS_NOERR)
   {
     CLog::Log(LOGERROR, "%s::%s Error : Push streambuffer", CLASSNAME, __func__);
-
     m_input_available.putTail(pStream);
-    return IPP_STATUS_ERR;
   }
 
-  return IPP_STATUS_NOERR;
+  return retCodec;
 }
 
 
@@ -437,6 +470,7 @@
 {
   int iSize2nd = 0;
   uint32_t bufOfs = 0;
+  bool bInjectHdr = false;
   static const uint8_t VC1FrameStartCode[4]  = { 0x00, 0x00, 0x01, 0x0d };
 #ifdef ENABLE_PTS
   int numStreamBufs = 0;
@@ -468,8 +502,15 @@
     }
     else if (m_VDecParSet.strm_fmt == IPP_VIDEO_STRM_FMT_VC1)
     {
-      if (digest_vc1_inbuf(pData, iSize) )
-        bufOfs = sizeof(VC1FrameStartCode);
+      if (digest_vc1_inbuf(pData, iSize))
+      {
+        bInjectHdr = true;
+        bufOfs = sizeof(uint32_t);
+      }
+    }
+    else if (m_VDecParSet.strm_fmt == IPP_VIDEO_STRM_FMT_VC1M)
+    {
+      bufOfs = OPTIMIZE_OFFSET_FOR_VMETAVC1MP;
     }
   }
 
@@ -490,9 +531,6 @@
       }
       else
       {
-        if (bufOfs)
-          memcpy(pStream->pBuf, VC1FrameStartCode, sizeof(VC1FrameStartCode));
-
         memcpy(pStream->pBuf+bufOfs, pData, std::min<uint32_t>(dataLen-bufOfs, iSize));
         dataLen = (uint32_t)iSize+bufOfs;
       }
@@ -515,9 +553,6 @@
         }
         else
         {
-          if (bufOfs)
-            memcpy(pStream->pBuf, VC1FrameStartCode, sizeof(VC1FrameStartCode));
-
           memcpy(pStream->pBuf+bufOfs, pData, iSize);
           dataLen = (uint32_t)iSize+bufOfs;
         }
@@ -525,8 +560,15 @@
       
       if (dataLen)
       {
-        pStream->nFlag = IPP_VMETA_STRM_BUF_END_OF_UNIT;
+        if (bInjectHdr)
+        {
+          *(uint32_t *)pStream->pBuf = *(uint32_t *)VC1FrameStartCode;
+          bufOfs = 0;
+        }
+
+        pStream->nOffset = bufOfs;
         pStream->nDataLen = dataLen;
+        pStream->nFlag = IPP_VMETA_STRM_BUF_END_OF_UNIT;
 
         dataLen = PADDING_LEN(dataLen);
         if (dataLen)
