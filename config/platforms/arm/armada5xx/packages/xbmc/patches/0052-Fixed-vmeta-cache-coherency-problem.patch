From 0d1675ef0922a952dae717339c536832777ccd21 Mon Sep 17 00:00:00 2001
From: Rabeeh Khoury <rabeeh@solid-run.com>
Date: Mon, 21 Jan 2013 20:22:38 +0200
Subject: [PATCH] Fixed vmeta cache coherency problem

Previous patches set data allocation to be with cached area attribute.
The bug is that those buffers must be flushed after being occupied with data, but before being sent to the vmeta hardware engine.
Due to that bug vmeta showed some blockiness on the decoded frame (corrupted data).

Signed-off-by: Rabeeh Khoury <rabeeh@solid-run.com>
---
 .../DVDCodecs/Video/DVDVideoCodecVMETA.cpp         |   11 ++++++++---
 xbmc/cores/dvdplayer/DVDCodecs/Video/DllVMETA.h    |    3 +++
 2 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp
index 7b5cd99..5a93f3c 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecVMETA.cpp
@@ -385,7 +385,8 @@ IppCodecStatus CDVDVideoCodecVMETA::SendCodecConfig()
   paddingLen = PADDING_LEN(m_extrasize);
   if (paddingLen)
     memset(pStream->pBuf + m_extrasize, PADDING_BYTE, paddingLen);
-  
+  m_DllVMETA->vdec_os_api_flush_cache (pStream->pBuf, m_extrasize + paddingLen, DMA_TO_DEVICE);
+
   retCodec = m_DllVMETA->DecoderPushBuffer_Vmeta(IPP_VMETA_BUF_TYPE_STRM, pStream, m_pDecState);
   if(retCodec != IPP_STATUS_NOERR)
   {
@@ -452,6 +453,7 @@ int CDVDVideoCodecVMETA::Decode(uint8_t *pData, int iSize, double dts, double pt
         memcpy(pStream->pBuf, pData, std::min<uint32_t>(dataLen, iSize));
         dataLen = (uint32_t)iSize;
       }
+      m_DllVMETA->vdec_os_api_flush_cache (pStream->pBuf, std::min<uint32_t>(dataLen, iSize), DMA_TO_DEVICE);
 
       // did it fit in ?
       if (PADDED_SIZE(dataLen) > pStream->nBufSize)
@@ -474,6 +476,7 @@ int CDVDVideoCodecVMETA::Decode(uint8_t *pData, int iSize, double dts, double pt
           memcpy(pStream->pBuf, pData, iSize);
           dataLen = (uint32_t)iSize;
         }
+        m_DllVMETA->vdec_os_api_flush_cache (pStream->pBuf, std::min<uint32_t>(dataLen, iSize), DMA_TO_DEVICE);
       }
       
       if (dataLen)
@@ -482,8 +485,10 @@ int CDVDVideoCodecVMETA::Decode(uint8_t *pData, int iSize, double dts, double pt
         pStream->nDataLen = dataLen;
 
         dataLen = PADDING_LEN(dataLen);
-        if (dataLen)
+        if (dataLen) {
           memset(pStream->pBuf + pStream->nDataLen, PADDING_BYTE, dataLen);
+          m_DllVMETA->vdec_os_api_flush_cache (pStream->pBuf + pStream->nDataLen, dataLen, DMA_TO_DEVICE);
+        }
         
         if( !m_input_ready.putTail(pStream) )
         {
@@ -655,7 +660,7 @@ IppCodecStatus CDVDVideoCodecVMETA::DecodeInternal()
         if (pPicture->pBuf)
           m_DllVMETA->vdec_os_api_dma_free(pPicture->pBuf);
 
-        pPicture->pBuf = (Ipp8u *)m_DllVMETA->vdec_os_api_dma_alloc_cached(
+        pPicture->pBuf = (Ipp8u *)m_DllVMETA->vdec_os_api_dma_alloc(
                             m_VDecInfo.seq_info.dis_buf_size, VMETA_DIS_BUF_ALIGN, &(pPicture->nPhyAddr));
         pPicture->nBufSize = m_VDecInfo.seq_info.dis_buf_size;
         //printf("vdec_os_api_dma_alloc pPicture->pBuf 0x%08x nr %d\n", (unsigned int)pPicture->pBuf, (int)pPicture->pUsrData0);
diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/DllVMETA.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/DllVMETA.h
index 5553f5e..01f864a 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DllVMETA.h
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DllVMETA.h
@@ -75,6 +75,7 @@ public:
   virtual void vdec_os_api_dma_free(void *ptr) = 0;
   virtual SIGN32 vdec_os_api_suspend_check(void) = 0;
   virtual void vdec_os_api_suspend_ready(void) = 0;
+  virtual UNSG32 vdec_os_api_flush_cache (Ipp8u *addr, UNSG32 size, enum dma_data_direction p3) = 0;
 };
 
 class DllLibVMETA : public DllDynamic, DllLibVMETAInterface
@@ -93,6 +94,7 @@ class DllLibVMETA : public DllDynamic, DllLibVMETAInterface
   DEFINE_METHOD1(void,           vdec_os_api_dma_free,    (void *p1))
   DEFINE_METHOD0(SIGN32,         vdec_os_api_suspend_check)
   DEFINE_METHOD0(void,           vdec_os_api_suspend_ready)
+  DEFINE_METHOD3(UNSG32,         vdec_os_api_flush_cache,   (Ipp8u * p1, UNSG32 p2, enum dma_data_direction p3))
 
   BEGIN_METHOD_RESOLVE()
     RESOLVE_METHOD(DecoderPushBuffer_Vmeta)
@@ -107,6 +109,7 @@ class DllLibVMETA : public DllDynamic, DllLibVMETAInterface
     RESOLVE_METHOD(vdec_os_api_dma_free)
     RESOLVE_METHOD(vdec_os_api_suspend_check)
     RESOLVE_METHOD(vdec_os_api_suspend_ready)
+    RESOLVE_METHOD(vdec_os_api_flush_cache)
   END_METHOD_RESOLVE()
 };
 #endif
-- 
1.7.9.5

