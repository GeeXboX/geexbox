From 910f5303734552aa943b6fa1da827d9aced17434 Mon Sep 17 00:00:00 2001
From: huceke <gimli@i7.(none)>
Date: Tue, 20 Mar 2012 19:05:35 +0100
Subject: [PATCH 07/17] [dove] workaround for our cpu/fpu comination.

---
 xbmc/guilib/GUIFontTTF.cpp |    6 +++
 xbmc/threads/Atomics.cpp   |   83 ++++++++++++++++++++++++++++++++++++++++++++
 xbmc/utils/MathUtils.h     |    2 +-
 3 files changed, 90 insertions(+), 1 deletions(-)

diff --git a/xbmc/guilib/GUIFontTTF.cpp b/xbmc/guilib/GUIFontTTF.cpp
index 35c36ed..001c94e 100644
--- a/xbmc/guilib/GUIFontTTF.cpp
+++ b/xbmc/guilib/GUIFontTTF.cpp
@@ -668,8 +668,14 @@ void CGUIFontTTFBase::RenderCharacter(float posX, float posY, const Character *c
     // really interests us anyway.
     float rx0 = (float)MathUtils::round_int(x[0]);
     float rx3 = (float)MathUtils::round_int(x[3]);
+    /* Error: bad instruction on for marvell arm */
+#if defined(TARGET_MARVELL_DOVE)
+    x[1] = (float)floor(x[1] + 0.5f);
+    x[2] = (float)floor(x[2] + 0.5f);
+#else
     x[1] = (float)MathUtils::truncate_int(x[1]);
     x[2] = (float)MathUtils::truncate_int(x[2]);
+#endif
     if (rx0 > x[0])
       x[1] += 1;
     if (rx3 > x[3])
diff --git a/xbmc/threads/Atomics.cpp b/xbmc/threads/Atomics.cpp
index 5b09f18..5b4e480 100644
--- a/xbmc/threads/Atomics.cpp
+++ b/xbmc/threads/Atomics.cpp
@@ -46,6 +46,11 @@ long cas(volatile long *pAddr, long expectedVal, long swapVal)
   return prev;
 }
 
+#elif defined(TARGET_MARVELL_DOVE)
+long cas(volatile long* pAddr, long expectedVal, long swapVal)
+{
+  return(__sync_val_compare_and_swap(pAddr, expectedVal, swapVal));
+}
 #elif defined(__arm__)
 long cas(volatile long* pAddr, long expectedVal, long swapVal)
 {
@@ -188,6 +193,25 @@ long AtomicIncrement(volatile long* pAddr)
   return val;
 }
 
+#elif defined(TARGET_MARVELL_DOVE)
+
+long AtomicIncrement(volatile long* pAddr)
+{
+  register long val;
+  asm volatile (
+                "1:                     \n" 
+                "ldrex   %0, [%1]       \n" // (val = *pAddr)
+                "add     %0,  #1        \n" // (val += 1)
+                "strex   r1,  %0, [%1]	\n"
+                "cmp     r1,   #0       \n"
+                "bne     1b             \n"
+                : "=&r" (val)
+                : "r"(pAddr)
+                : "r1"
+                );
+  return val;
+}
+
 #elif defined(__arm__)
 
 long AtomicIncrement(volatile long* pAddr)
@@ -267,6 +291,25 @@ long AtomicAdd(volatile long* pAddr, long amount)
   return val;
 }
 
+#elif defined(TARGET_MARVELL_DOVE)
+
+long AtomicAdd(volatile long* pAddr, long amount)
+{
+  register long val;
+  asm volatile (
+                "1:                     \n" 
+                "ldrex   %0, [%1]       \n" // (val = *pAddr)
+                "add     %0,  %2        \n" // (val += amount)
+                "strex   r1,  %0, [%1]	\n"
+                "cmp     r1,   #0       \n"
+                "bne     1b             \n"
+                : "=&r" (val)
+                : "r"(pAddr), "r"(amount)
+                : "r1"
+                );
+  return val;
+}
+
 #elif defined(__arm__)
 
 long AtomicAdd(volatile long* pAddr, long amount)
@@ -345,6 +388,26 @@ long AtomicDecrement(volatile long* pAddr)
   return val;
 }
 
+#elif defined(TARGET_MARVELL_DOVE)
+
+long AtomicDecrement(volatile long* pAddr)
+{
+  register long val;
+  asm volatile (
+                "1:                     \n" 
+                "ldrex   %0, [%1]       \n" // (val = *pAddr)
+                "sub     %0,  #1        \n" // (val -= 1)
+                "strex   r1,  %0, [%1]	\n"
+                "cmp     r1,   #0       \n"
+                "bne     1b             \n"
+                : "=&r" (val)
+                : "r"(pAddr)
+                : "r1"
+                );
+  
+  return val;
+}
+
 #elif defined(__arm__)
 
 long AtomicDecrement(volatile long* pAddr)
@@ -425,6 +488,26 @@ long AtomicSubtract(volatile long* pAddr, long amount)
   return val;
 }
 
+#elif defined(TARGET_MARVELL_DOVE)
+
+long AtomicSubtract(volatile long* pAddr, long amount)
+{
+  register long val;
+  asm volatile (
+                "1:                     \n" 
+                "ldrex   %0, [%1]       \n" // (val = *pAddr)
+                "sub     %0,  %2        \n" // (val -= amount)
+                "strex   r1,  %0, [%1]	\n"
+                "cmp     r1,   #0       \n"
+                "bne     1b             \n"
+                : "=&r" (val)
+                : "r"(pAddr), "r"(amount)
+                : "r1"
+                );
+  
+  return val;
+}
+
 #elif defined(__arm__)
 
 long AtomicSubtract(volatile long* pAddr, long amount)
diff --git a/xbmc/utils/MathUtils.h b/xbmc/utils/MathUtils.h
index 47517b5..6f360f7 100644
--- a/xbmc/utils/MathUtils.h
+++ b/xbmc/utils/MathUtils.h
@@ -63,7 +63,7 @@ namespace MathUtils
       sar i, 1
     }
 #else
-#if defined(__powerpc__) || defined(__ppc__)
+#if defined(__powerpc__) || defined(__ppc__) || defined(TARGET_MARVELL_DOVE)
     i = floor(x + round_to_nearest);
 #elif defined(__arm__)
     // From 'ARMÂ®v7-M Architecture Reference Manual' page A7-569:
-- 
1.7.4.1

