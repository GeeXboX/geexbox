diff --git a/arch/arm/configs/sun4i_defconfig b/arch/arm/configs/sun4i_defconfig
index ee523f6..a6b2dae 100644
--- a/arch/arm/configs/sun4i_defconfig
+++ b/arch/arm/configs/sun4i_defconfig
@@ -326,3 +326,4 @@ CONFIG_CRYPTO_LZO=y
 # CONFIG_CRYPTO_HW is not set
 CONFIG_LIBCRC32C=y
 CONFIG_AVERAGE=y
+CONFIG_IR_SUNXI=m
diff --git a/arch/arm/configs/sun5i_defconfig b/arch/arm/configs/sun5i_defconfig
index cfbcc10..af9a861 100644
--- a/arch/arm/configs/sun5i_defconfig
+++ b/arch/arm/configs/sun5i_defconfig
@@ -255,3 +255,4 @@ CONFIG_CRYPTO_LZO=y
 # CONFIG_CRYPTO_HW is not set
 CONFIG_CRC_ITU_T=y
 CONFIG_LIBCRC32C=y
+CONFIG_IR_SUNXI=m
diff --git a/drivers/input/keyboard/Kconfig b/drivers/input/keyboard/Kconfig
index aa4f1d3..5f6ba21 100644
--- a/drivers/input/keyboard/Kconfig
+++ b/drivers/input/keyboard/Kconfig
@@ -606,12 +606,4 @@ config IR_SUN3I
 	tristate "sun3i IR support"
 	depends on ARCH_SUN3I
 
-config IR_SUN4I
-        tristate "sun4i IR  support"
-	depends on ARCH_SUN4I
-
-config IR_SUN5I
-       tristate "sun5i IR  support"
-       depends on ARCH_SUN5I
-       
 endif
diff --git a/drivers/input/keyboard/Makefile b/drivers/input/keyboard/Makefile
index c8238cd..1152601 100644
--- a/drivers/input/keyboard/Makefile
+++ b/drivers/input/keyboard/Makefile
@@ -60,12 +60,4 @@ ifdef CONFIG_ARCH_SUN3I
 obj-$(CONFIG_IR_SUN3I)			+= sun3i-ir.o
 endif
 
-ifdef CONFIG_ARCH_SUN4I
-obj-$(CONFIG_IR_SUN4I)		        += sun4i-ir.o
-endif
-
-ifdef CONFIG_ARCH_SUN5I
-obj-$(CONFIG_IR_SUN5I)                  += sun5i-ir.o
-endif
-
 obj-$(CONFIG_KEYBOARD_HV2605_KEYBOARD)  += hv2605.o
diff --git a/drivers/input/keyboard/sun4i-ir.c b/drivers/input/keyboard/sun4i-ir.c
deleted file mode 100644
index 1b031d7..0000000
--- a/drivers/input/keyboard/sun4i-ir.c
+++ /dev/null
@@ -1,742 +0,0 @@
-/*
- * drivers/input/keyboard/sun4i-ir.c
- *
- * (C) Copyright 2007-2012
- * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 USA
- */
-
-/****************************************************************
-*
-*VERSION 1.0 Inital Version
-*****************************************************************/
-
-#include <linux/module.h>
-#include <linux/init.h>
-#include <linux/input.h>
-#include <linux/delay.h>
-#include <linux/interrupt.h>
-#include <linux/keyboard.h>
-#include <linux/ioport.h>
-#include <asm/irq.h>
-#include <asm/io.h>
-#include <linux/slab.h>
-#include <linux/timer.h>
-#include <mach/clock.h>
-
-#include <mach/irqs.h>
-#include <mach/system.h>
-#include <mach/hardware.h>
-#include <plat/sys_config.h>
-
-#include <linux/clk.h>
-#ifdef CONFIG_HAS_EARLYSUSPEND
-    #include <linux/pm.h>
-    #include <linux/earlysuspend.h>
-#endif
-
-#include "ir-keymap.h"
-
-static struct clk *apb_ir_clk;
-static struct clk *ir_clk;
-static u32 ir_gpio_hdle;
-
-
-#define SYS_GPIO_CFG_EN
-#define SYS_CLK_CFG_EN
-//#define DEBUG_IR
-#define PRINT_SUSPEND_INFO
-
-#ifdef DEBUG_IR
-#define DEBUG_IR_LEVEL0
-#define DEBUG_IR_LEVEL2
-#define DEBUG_IR_LEVEL1
-#define dprintk(level, fmt, arg...)	if (debug >= level) \
-	printk(KERN_DEBUG fmt , ## arg)
-#else
-#undef DEBUG_IR_LEVEL0
-#undef DEBUG_IR_LEVEL2
-#undef DEBUG_IR_LEVEL1
-#define dprintk(level, fmt, arg...)	//
-#endif
-
-//Registers
-#define IR_REG(x) 	(x)
-#define IR0_BASE		(0xf1c21800)
-#define IR1_BASE		(0xf1c21C00)
-#define IR_BASE		IR0_BASE
-#define IR_IRQNO	(SW_INT_IRQNO_IR0)
-
-//CCM register
-#define CCM_BASE	0xf1c20000
-//PIO register
-#define PI_BASE		0xf1c20800
-
-#define IR_CTRL_REG	IR_REG(0x00) //IR Control
-#define IR_RXCFG_REG	IR_REG(0x10) //Rx Config
-#define IR_RXDAT_REG	IR_REG(0x20) //Rx Data
-#define IR_RXINTE_REG	IR_REG(0x2C) //Rx Interrupt Enable
-#define IR_RXINTS_REG	IR_REG(0x30) //Rx Interrupt Status
-#define IR_SPLCFG_REG	IR_REG(0x34) //IR Sample Config
-
-//Bit Definition of IR_RXINTS_REG Register
-#define IR_RXINTS_RXOF		(0x1<<0)		//Rx FIFO Overflow
-#define IR_RXINTS_RXPE		(0x1<<1)		//Rx Packet End
-#define IR_RXINTS_RXDA		(0x1<<4)		//Rx FIFO Data Available
-
-//Frequency of Sample Clock = 23437.5Hz, Cycle is 42.7us
-//Pulse of NEC Remote >560us
-#define IR_RXFILT_VAL		(8)			//Filter Threshold = 8*42.7 = ~341us	< 500us
-#define IR_RXIDLE_VAL		(2)   	//Idle Threshold = (2+1)*128*42.7 = ~16.4ms > 9ms
-#define IR_FIFO_SIZE		(16)    //16Bytes
-
-#define IR_L1_MIN	(80)		//80*42.7 = ~3.4ms, Lead1(4.5ms) > IR_L1_MIN
-#define IR_L0_MIN	(40)		//40*42.7 = ~1.7ms, Lead0(4.5ms) Lead0R(2.25ms)> IR_L0_MIN
-#define IR_PMAX		(26)		//26*42.7 = ~1109us ~= 561*2, Pluse < IR_PMAX
-#define IR_DMID		(26)		//26*42.7 = ~1109us ~= 561*2, D1 > IR_DMID, D0 =< IR_DMID
-#define IR_DMAX		(53)		//53*42.7 = ~2263us ~= 561*4, D < IR_DMAX
-
-#define IR_ERROR_CODE		(0xffffffff)
-#define IR_REPEAT_CODE		(0x00000000)
-#define DRV_VERSION		"1.00"
-
-
-#ifdef CONFIG_HAS_EARLYSUSPEND
-struct sun4i_ir_data {
-	struct early_suspend early_suspend;
-};
-#endif
-
-struct ir_raw_buffer
-{
-	unsigned long dcnt;                  /*Packet Count*/
-	#define	IR_RAW_BUF_SIZE		128
-	unsigned char buf[IR_RAW_BUF_SIZE];
-};
-
-#ifdef DEBUG_IR
-static int debug = 8;
-#endif
-
-static unsigned int ir_cnt = 0;
-static struct input_dev *ir_dev;
-static struct timer_list *s_timer;
-static unsigned long ir_code=0;
-static int timer_used=0;
-static struct ir_raw_buffer	ir_rawbuf;
-
-#ifdef CONFIG_HAS_EARLYSUSPEND
-static struct sun4i_ir_data *ir_data;
-#endif
-
-
-static inline void ir_reset_rawbuffer(void)
-{
-	ir_rawbuf.dcnt = 0;
-}
-
-static inline void ir_write_rawbuffer(unsigned char data)
-{
-	if(ir_rawbuf.dcnt < IR_RAW_BUF_SIZE)
-	{
-		ir_rawbuf.buf[ir_rawbuf.dcnt++] = data;
-	}
-	else
-	{
-		printk("ir_write_rawbuffer: IR Rx Buffer Full!!\n");
-	}
-}
-
-static inline unsigned char ir_read_rawbuffer(void)
-{
-	unsigned char data = 0x00;
-
-	if(ir_rawbuf.dcnt > 0)
-	{
-		data = ir_rawbuf.buf[--ir_rawbuf.dcnt];
-	}
-
-	return data;
-}
-
-static inline int ir_rawbuffer_empty(void)
-{
-	return (ir_rawbuf.dcnt == 0);
-}
-
-static inline int ir_rawbuffer_full(void)
-{
-	return (ir_rawbuf.dcnt >= IR_RAW_BUF_SIZE);
-}
-
-static void ir_clk_cfg(void)
-{
-#ifdef SYS_CLK_CFG_EN
-        unsigned long rate = 3000000; //3Mhz
-#else
-        unsigned long tmp = 0;
-#endif
-
-#ifdef SYS_CLK_CFG_EN
-	apb_ir_clk = clk_get(NULL, "apb_ir0");
-	if(!apb_ir_clk) {
-			printk("try to get apb_ir0 clock failed!\n");
-			return;
-	}
-
-	ir_clk = clk_get(NULL, "ir0");
-	if(!ir_clk) {
-			printk("try to get ir0 clock failed!\n");
-			return;
-	}
-
-	if(clk_set_rate(ir_clk, rate)) {
-			printk("set ir0 clock freq to 3M failed!\n");
-	}
-
-	if(clk_enable(apb_ir_clk)) {
-		printk("try to enable apb_ir_clk failed!\n");
-		}
-	if(clk_enable(ir_clk)) {
-		printk("try to enable apb_ir_clk failed!\n");
-	}
-
-#else
-	//Enable APB Clock for IR
-	tmp = readl(CCM_BASE + 0x10);
-	tmp |= 0x1<<10;  //IR
-	writel(tmp, CCM_BASE + 0x10);
-
-	//config Special Clock for IR	(24/8=3MHz)
-	tmp = readl(CCM_BASE + 0x34);
-	tmp &= ~(0x3<<8);
-	tmp |= (0x1<<8);   	//Select 24MHz
-	tmp |= (0x1<<7);   	//Open Clock
-	tmp &= ~(0x3f<<0);
-	tmp |= (7<<0);	 	//Divisor = 8
-	writel(tmp, CCM_BASE + 0x34);
-#endif
-
-    return;
-}
-
-static void ir_clk_uncfg(void)
-{
-#ifdef SYS_CLK_CFG_EN
-	clk_put(apb_ir_clk);
-	clk_put(ir_clk);
-#else
-#endif
-
-	return;
-}
-static void ir_sys_cfg(void)
-{
-	//unsigned long tmp;
-#ifdef SYS_GPIO_CFG_EN
-        if(0 == (ir_gpio_hdle = gpio_request_ex("ir_para", "ir0_rx"))){
-	printk("try to request ir_para gpio failed. \n");
-        }
-#else
-	//config IO: PIOB4 to IR_Rx
-	tmp = readl(PI_BASE + 0x24); //PIOB_CFG0_REG
-	tmp &= ~(0xf<<16);
-	tmp |= (0x2<<16);
-	writel(tmp, PI_BASE + 0x24);
-#endif
-
-	ir_clk_cfg();
-
-    return;
-}
-
-static void ir_sys_uncfg(void)
-{
-	//unsigned long tmp;
-#ifdef SYS_GPIO_CFG_EN
-	gpio_release(ir_gpio_hdle, 2);
-#else
-#endif
-	ir_clk_uncfg();
-	return;
-}
-
-static void ir_reg_cfg(void)
-{
-	unsigned long tmp = 0;
-	/*Enable IR Mode*/
-	tmp = 0x3<<4;
-	writel(tmp, IR_BASE+IR_CTRL_REG);
-
-	/*Config IR Smaple Register*/
-	tmp = 0x1<<0; 	//Fsample = 3MHz/128 = 23437.5Hz (42.7us)
-	tmp |= (IR_RXFILT_VAL&0x3f)<<2;	//Set Filter Threshold
-	tmp |= (IR_RXIDLE_VAL&0xff)<<8; //Set Idle Threshold
-	writel(tmp, IR_BASE+IR_SPLCFG_REG);
-
-	/*Invert Input Signal*/
-	writel(0x1<<2, IR_BASE+IR_RXCFG_REG);
-
-	/*Clear All Rx Interrupt Status*/
-	writel(0xff, IR_BASE+IR_RXINTS_REG);
-
-	/*Set Rx Interrupt Enable*/
-	tmp = (0x1<<4)|0x3;
-	tmp |= ((IR_FIFO_SIZE>>1)-1)<<8; //Rx FIFO Threshold = FIFOsz/2;
-	writel(tmp, IR_BASE+IR_RXINTE_REG);
-
-	/*Enable IR Module*/
-	tmp = readl(IR_BASE+IR_CTRL_REG);
-	tmp |= 0x3;
-	writel(tmp, IR_BASE+IR_CTRL_REG);
-
-	return;
-}
-
-static void ir_setup(void)
-{
-	dprintk(2, "ir_setup: ir setup start!!\n");
-
-	ir_code = 0;
-	timer_used = 0;
-	ir_reset_rawbuffer();
-	ir_sys_cfg();
-	ir_reg_cfg();
-
-	dprintk(2, "ir_setup: ir setup end!!\n");
-
-	return;
-}
-
-static inline unsigned char ir_get_data(void)
-{
-	return (unsigned char)(readl(IR_BASE + IR_RXDAT_REG));
-}
-
-static inline unsigned long ir_get_intsta(void)
-{
-	return (readl(IR_BASE + IR_RXINTS_REG));
-}
-
-static inline void ir_clr_intsta(unsigned long bitmap)
-{
-	unsigned long tmp = readl(IR_BASE + IR_RXINTS_REG);
-
-	tmp &= ~0xff;
-	tmp |= bitmap&0xff;
-	writel(tmp, IR_BASE + IR_RXINTS_REG);
-}
-
-static unsigned long ir_packet_handler(unsigned char *buf, unsigned long dcnt)
-{
-	unsigned long len;
-	unsigned char val = 0x00;
-	unsigned char last = 0x00;
-	unsigned long code = 0;
-	int bitCnt = 0;
-	unsigned long i=0;
-
-	//print_hex_dump_bytes("--- ", DUMP_PREFIX_NONE, buf, dcnt);
-
-	dprintk(2, "dcnt = %d \n", (int)dcnt);
-
-	/*Find Lead '1'*/
-	len = 0;
-	for(i=0; i<dcnt; i++)
-	{
-		val = buf[i];
-		if(val & 0x80)
-		{
-			len += val & 0x7f;
-		}
-		else
-		{
-			if(len > IR_L1_MIN)
-				break;
-
-			len = 0;
-		}
-	}
-
-	if((val&0x80) || (len<=IR_L1_MIN))
-		return IR_ERROR_CODE; /*Invalid Code*/
-
-	/*Find Lead '0'*/
-	len = 0;
-	for(; i<dcnt; i++)
-	{
-		val = buf[i];
-		if(val & 0x80)
-		{
-			if(len > IR_L0_MIN)
-				break;
-
-			len = 0;
-		}
-		else
-		{
-			len += val & 0x7f;
-		}
-	}
-
-	if((!(val&0x80)) || (len<=IR_L0_MIN))
-		return IR_ERROR_CODE; /*Invalid Code*/
-
-	/*go decoding*/
-	code = 0;  /*0 for Repeat Code*/
-	bitCnt = 0;
-	last = 1;
-	len = 0;
-	for(; i<dcnt; i++)
-	{
-		val = buf[i];
-		if(last)
-		{
-			if(val & 0x80)
-			{
-				len += val & 0x7f;
-			}
-			else
-			{
-				if(len > IR_PMAX) /*Error Pulse*/
-				{
-					return IR_ERROR_CODE;
-				}
-				last = 0;
-				len = val & 0x7f;
-			}
-		}
-		else
-		{
-			if(val & 0x80)
-			{
-				if(len > IR_DMAX) /*Error Distant*/
-				{
-					return IR_ERROR_CODE;
-				}
-				else
-				{
-					if(len > IR_DMID)
-					{
-						/*data '1'*/
-						code |= 1<<bitCnt;
-					}
-					bitCnt ++;
-					if(bitCnt == 32)
-						break;  /*decode over*/
-				}
-				last = 1;
-				len = val & 0x7f;
-			}
-			else
-			{
-				len += val & 0x7f;
-			}
-		}
-	}
-
-	return code;
-}
-
-static int ir_code_valid(unsigned long code)
-{
-	unsigned long tmp1, tmp2;
-
-#ifdef IR_CHECK_ADDR_CODE
-	/*Check Address Value*/
-	if((code&0xffff) != (IR_ADDR_CODE&0xffff))
-		return 0; /*Address Error*/
-
-	tmp1 = code & 0x00ff0000;
-	tmp2 = (code & 0xff000000)>>8;
-
-	return ((tmp1^tmp2)==0x00ff0000);  /*Check User Code*/
-#else
-	/*Do Not Check Address Value*/
-	tmp1 = code & 0x00ff00ff;
-	tmp2 = (code & 0xff00ff00)>>8;
-
-	//return ((tmp1^tmp2)==0x00ff00ff);
-	return (((tmp1^tmp2) & 0x00ff0000)==0x00ff0000 );
-#endif /*#ifdef IR_CHECK_ADDR_CODE*/
-}
-
-static irqreturn_t ir_irq_service(int irqno, void *dev_id)
-{
-	unsigned long intsta = ir_get_intsta();
-
-#ifdef DEBUG_IR_LEVEL2
-	printk("IR IRQ Serve\n");
-#endif
-	ir_clr_intsta(intsta);
-
-	//if(intsta & (IR_RXINTS_RXDA|IR_RXINTS_RXPE))  /*FIFO Data Valid*/
-	/*Read Data Every Time Enter this Routine*/
-	{
-		unsigned long dcnt =  (ir_get_intsta()>>8) & 0x1f;
-		unsigned long i = 0;
-
-		/*Read FIFO*/
-		for(i=0; i<dcnt; i++)
-		{
-			if(ir_rawbuffer_full())
-			{
-				#ifdef DEBUG_IR_LEVEL0
-				printk("ir_irq_service: Raw Buffer Full!!\n");
-				#endif
-				break;
-			}
-			else
-			{
-				ir_write_rawbuffer(ir_get_data());
-			}
-		}
-	}
-
-	if(intsta & IR_RXINTS_RXPE)	 /*Packet End*/
-	{
-		unsigned long code;
-		int code_valid;
-
-		code = ir_packet_handler(ir_rawbuf.buf, ir_rawbuf.dcnt);
-		ir_rawbuf.dcnt = 0;
-		code_valid = ir_code_valid(code);
-
-		if(timer_used)
-		{
-			if(code_valid)  //the pre-key is released
-			{
-#if 0
-				input_report_key(ir_dev, ir_keycodes[(ir_code>>16)&0xff], 0);
-				input_sync(ir_dev);
-#endif
-				#ifdef DEBUG_IR_LEVEL1
-				printk("IR KEY UP\n");
-				#endif
-				ir_cnt = 0;
-			}
-			if((code==IR_REPEAT_CODE)||(code_valid))  //Error, may interfere from other sources
-			{
-				mod_timer(s_timer, jiffies + (HZ/5));
-			}
-		}
-		else
-		{
-			if(code_valid)
-			{
-				s_timer->expires = jiffies + (HZ/5);  //200ms timeout
-				add_timer(s_timer);
-				timer_used = 1;
-			}
-		}
-
-		if(timer_used)
-		{
-			ir_cnt++;
-			if(ir_cnt == 1)
-			{
-			if(code_valid)	ir_code = code;  /*update saved code with a new valid code*/
-			#ifdef DEBUG_IR_LEVEL0
-			printk("IR RAW CODE : %lu\n",(ir_code>>16)&0xff);
-			#endif
-			input_report_key(ir_dev, ir_keycodes[(ir_code>>16)&0xff], 1);
-			#ifdef DEBUG_IR_LEVEL0
-			printk("IR CODE : %d\n",ir_keycodes[(ir_code>>16)&0xff]);
-			#endif
-			input_sync(ir_dev);
-			#ifdef DEBUG_IR_LEVEL1
-			printk("IR KEY VALE %d\n",ir_keycodes[(ir_code>>16)&0xff]);
-			#endif
-		  }
-
-
-		}
-
-		dprintk(1, "ir_irq_service: Rx Packet End, code=0x%x, ir_code=0x%x, timer_used=%d \n", (int)code, (int)ir_code, timer_used);
-	}
-
-	if(intsta & IR_RXINTS_RXOF)  /*FIFO Overflow*/
-	{
-		/*flush raw buffer*/
-		ir_reset_rawbuffer();
-#ifdef DEBUG_IR_LEVEL0
-		printk("ir_irq_service: Rx FIFO Overflow!!\n");
-#endif
-	}
-
-	return IRQ_HANDLED;
-}
-
-static void ir_timer_handle(unsigned long arg)
-{
-	del_timer(s_timer);
-	timer_used = 0;
-	/*Time Out, means that the key is up*/
-	input_report_key(ir_dev, ir_keycodes[(ir_code>>16)&0xff], 0);
-	input_sync(ir_dev);
-#ifdef DEBUG_IR_LEVEL1
-	printk("IR KEY TIMER OUT UP\n");
-#endif
-	ir_cnt = 0;
-
-	dprintk(2, "ir_timer_handle: timeout \n");
-}
-
-//停用设备
-#ifdef CONFIG_HAS_EARLYSUSPEND
-static void sun4i_ir_suspend(struct early_suspend *h)
-{
-//    unsigned long tmp = 0;
-	/*int ret;
-	struct sun4i_ir_data *ts = container_of(h, struct sun4i_ir_data, early_suspend);
-      */
-#ifdef PRINT_SUSPEND_INFO
-	printk("enter earlysuspend: sun4i_ir_suspend. \n");
-#endif
-/*
-	tmp = readl(IR_BASE+IR_CTRL_REG);
-	tmp &= 0xfffffffc;
-    writel(tmp, IR_BASE+IR_CTRL_REG);
-*/
-	clk_disable(ir_clk);
-	clk_disable(apb_ir_clk);
-
-	return ;
-}
-
-//重新唤醒
-static void sun4i_ir_resume(struct early_suspend *h)
-{
-    //unsigned long tmp = 0;
-	/*int ret;
-	struct sun4i_ir_data *ts = container_of(h, struct sun4i_ir_data, early_suspend);
-    */
-#ifdef PRINT_SUSPEND_INFO
-	printk("enter laterresume: sun4i_ir_resume. \n");
-#endif
-
-	ir_code = 0;
-	timer_used = 0;
-	ir_reset_rawbuffer();
-	ir_clk_cfg();
-	ir_reg_cfg();
-
-	return ;
-}
-#else
-#endif
-
-static int __init ir_init(void)
-{
-	int i,ret;
-	int err =0;
-
-	ir_dev = input_allocate_device();
-	if (!ir_dev)
-	{
-		printk(KERN_ERR "ir_dev: not enough memory for input device\n");
-		err = -ENOMEM;
-		goto fail1;
-	}
-
-	ir_dev->name = "sun4i-ir";
-	ir_dev->phys = "RemoteIR/input1";
-	ir_dev->id.bustype = BUS_HOST;
-	ir_dev->id.vendor = 0x0001;
-	ir_dev->id.product = 0x0001;
-	ir_dev->id.version = 0x0100;
-
-    #ifdef REPORT_REPEAT_KEY_VALUE
-	ir_dev->evbit[0] = BIT_MASK(EV_KEY)|BIT_MASK(EV_REP) ;
-    #else
-    	ir_dev->evbit[0] = BIT_MASK(EV_KEY);
-    #endif
-
-	for (i = 0; i < 256; i++)
-		set_bit(ir_keycodes[i], ir_dev->keybit);
-
-	if (request_irq(IR_IRQNO, ir_irq_service, 0, "RemoteIR",
-			ir_dev)) {
-		err = -EBUSY;
-		goto fail2;
-	}
-
-	ir_setup();
-
-	s_timer = kmalloc(sizeof(struct timer_list), GFP_KERNEL);
-	if (!s_timer)
-	{
-	ret =  - ENOMEM;
-	printk(" IR FAIL TO  Request Time\n");
-	goto fail3;
-	}
-	init_timer(s_timer);
-	s_timer->function = &ir_timer_handle;
-
-	err = input_register_device(ir_dev);
-	if (err)
-		goto fail4;
-	printk("IR Initial OK\n");
-
-#ifdef CONFIG_HAS_EARLYSUSPEND
-	printk("==register_early_suspend =\n");
-	ir_data = kzalloc(sizeof(*ir_data), GFP_KERNEL);
-	if (ir_data == NULL) {
-		err = -ENOMEM;
-		goto err_alloc_data_failed;
-	}
-
-	ir_data->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
-	ir_data->early_suspend.suspend = sun4i_ir_suspend;
-	ir_data->early_suspend.resume	= sun4i_ir_resume;
-	register_early_suspend(&ir_data->early_suspend);
-#endif
-
-	return 0;
-
-#ifdef CONFIG_HAS_EARLYSUSPEND
- err_alloc_data_failed:
-#endif
- fail4:
- 	kfree(s_timer);
- fail3:
- 	free_irq(IR_IRQNO, ir_dev);
- fail2:
- 	input_free_device(ir_dev);
- fail1:
- 	return err;
-}
-
-static void __exit ir_exit(void)
-{
-	#ifdef CONFIG_HAS_EARLYSUSPEND
-	    unregister_early_suspend(&ir_data->early_suspend);
-	#endif
-
-	free_irq(IR_IRQNO, ir_dev);
-	input_unregister_device(ir_dev);
-	ir_sys_uncfg();
- 	kfree(s_timer);
-}
-
-module_init(ir_init);
-module_exit(ir_exit);
-
-MODULE_DESCRIPTION("Remote IR driver");
-MODULE_AUTHOR("DanielWang");
-MODULE_LICENSE("GPL");
-
diff --git a/drivers/input/keyboard/sun5i-ir.c b/drivers/input/keyboard/sun5i-ir.c
deleted file mode 100644
index 11def39..0000000
--- a/drivers/input/keyboard/sun5i-ir.c
+++ /dev/null
@@ -1,767 +0,0 @@
-/*
- * drivers/input/keyboard/sun5i-ir.c
- *
- * (C) Copyright 2007-2012
- * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 USA
- */
-
-/****************************************************************
-*
-*VERSION 1.0 Inital Version
-*note: when swith to real ic, need to define SYS_CLK_CFG_EN & undef FPGA_SIM_CONFIG, vice versa.
-*****************************************************************/
-
-#include <linux/module.h>
-#include <linux/init.h>
-#include <linux/input.h>
-#include <linux/delay.h>
-#include <linux/interrupt.h>
-#include <linux/keyboard.h>
-#include <linux/ioport.h>
-#include <asm/irq.h>
-#include <asm/io.h>
-#include <linux/slab.h>
-#include <linux/timer.h>
-#include <mach/clock.h>
-
-#include <mach/irqs.h>
-#include <mach/system.h>
-#include <mach/hardware.h>
-#include <plat/sys_config.h>
-
-#include <linux/clk.h>
-#ifdef CONFIG_HAS_EARLYSUSPEND
-    #include <linux/pm.h>
-    #include <linux/earlysuspend.h>
-#endif
-
-#include "ir-keymap.h"
-
-static struct clk *apb_ir_clk;
-static struct clk *ir_clk;
-static u32 ir_gpio_hdle;
-
-//#define FPGA_SIM_CONFIG            //input clk is 24M
-#define SYS_CLK_CFG_EN
-
-#define SYS_GPIO_CFG_EN
-//#define DEBUG_IR
-#define PRINT_SUSPEND_INFO
-
-#ifdef DEBUG_IR
-#define DEBUG_IR_LEVEL0
-#define DEBUG_IR_LEVEL2
-#define DEBUG_IR_LEVEL1
-#define dprintk(level, fmt, arg...)	if (debug >= level) \
-	printk(KERN_DEBUG fmt , ## arg)
-#else
-#undef DEBUG_IR_LEVEL0
-#undef DEBUG_IR_LEVEL2
-#undef DEBUG_IR_LEVEL1
-#define dprintk(level, fmt, arg...)	//
-#endif
-
-//Registers
-#define IR_REG(x) 	(x)
-#define IR0_BASE		(0xf1c21800)
-#define IR_BASE		IR0_BASE
-#define IR_IRQNO	(SW_INT_IRQNO_IR0)
-
-//CCM register
-#define CCM_BASE	0xf1c20000
-//PIO register
-#define PI_BASE		0xf1c20800
-
-#define IR_CTRL_REG	IR_REG(0x00) //IR Control
-#define IR_RXCFG_REG	IR_REG(0x10) //Rx Config
-#define IR_RXDAT_REG	IR_REG(0x20) //Rx Data
-#define IR_RXINTE_REG	IR_REG(0x2C) //Rx Interrupt Enable
-#define IR_RXINTS_REG	IR_REG(0x30) //Rx Interrupt Status
-#define IR_SPLCFG_REG	IR_REG(0x34) //IR Sample Config
-
-//Bit Definition of IR_RXINTS_REG Register
-#define IR_RXINTS_RXOF		(0x1<<0)		//Rx FIFO Overflow
-#define IR_RXINTS_RXPE		(0x1<<1)		//Rx Packet End
-#define IR_RXINTS_RXDA		(0x1<<4)		//Rx FIFO Data Available
-
-#define IR_FIFO_SIZE		       (64)    //64Bytes
-//Frequency of Sample Clock = 23437.5Hz, Cycle is 42.7us
-//Pulse of NEC Remote >560us
-#ifdef FPGA_SIM_CONFIG
-#define IR_RXFILT_VAL         (16)   //Filter Threshold = 8*42.7 = ~341us < 500us
-#define IR_RXIDLE_VAL         (5)    //Idle Threshold = (2+1)*128*42.7 = ~16.4ms > 9ms
-
-#define IR_L1_MIN     (160)  //80*42.7 = ~3.4ms, Lead1(4.5ms) > IR_L1_MIN
-#define IR_L0_MIN     (80)  //40*42.7 = ~1.7ms, Lead0(4.5ms) Lead0R(2.25ms)> IR_L0_MIN
-#define IR_PMAX      (52)  //26*42.7 = ~1109us ~= 561*2, Pluse < IR_PMAX
-#define IR_DMID      (52)  //26*42.7 = ~1109us ~= 561*2, D1 > IR_DMID, D0 =< IR_DMID
-#define IR_DMAX      (106)  //53*42.7 = ~2263us ~= 561*4, D < IR_DMAX
-
-#else
-#define IR_RXFILT_VAL		(8)			//Filter Threshold = 8*42.7 = ~341us	< 500us
-#define IR_RXIDLE_VAL		(2)   	//Idle Threshold = (2+1)*128*42.7 = ~16.4ms > 9ms
-
-#define IR_L1_MIN	(80)		//80*42.7 = ~3.4ms, Lead1(4.5ms) > IR_L1_MIN
-#define IR_L0_MIN	(40)		//40*42.7 = ~1.7ms, Lead0(4.5ms) Lead0R(2.25ms)> IR_L0_MIN
-#define IR_PMAX		(26)		//26*42.7 = ~1109us ~= 561*2, Pluse < IR_PMAX
-#define IR_DMID		(26)		//26*42.7 = ~1109us ~= 561*2, D1 > IR_DMID, D0 =< IR_DMID
-#define IR_DMAX		(53)		//53*42.7 = ~2263us ~= 561*4, D < IR_DMAX
-#endif
-
-#define IR_ERROR_CODE		(0xffffffff)
-#define IR_REPEAT_CODE		(0x00000000)
-#define DRV_VERSION		"1.00"
-
-
-#ifdef CONFIG_HAS_EARLYSUSPEND
-struct sun4i_ir_data {
-	struct early_suspend early_suspend;
-};
-#endif
-
-struct ir_raw_buffer
-{
-	unsigned long dcnt;                  /*Packet Count*/
-	#define	IR_RAW_BUF_SIZE		128
-	unsigned char buf[IR_RAW_BUF_SIZE];
-};
-
-#ifdef DEBUG_IR
-static int debug = 8;
-#endif
-
-static unsigned int ir_cnt = 0;
-static struct input_dev *ir_dev;
-static struct timer_list *s_timer;
-static unsigned long ir_code=0;
-static int timer_used=0;
-static struct ir_raw_buffer	ir_rawbuf;
-
-#ifdef CONFIG_HAS_EARLYSUSPEND
-static struct sun4i_ir_data *ir_data;
-#endif
-
-
-static inline void ir_reset_rawbuffer(void)
-{
-	ir_rawbuf.dcnt = 0;
-}
-
-static inline void ir_write_rawbuffer(unsigned char data)
-{
-	if(ir_rawbuf.dcnt < IR_RAW_BUF_SIZE)
-	{
-		ir_rawbuf.buf[ir_rawbuf.dcnt++] = data;
-	}
-	else
-	{
-		printk("ir_write_rawbuffer: IR Rx Buffer Full!!\n");
-	}
-}
-
-static inline unsigned char ir_read_rawbuffer(void)
-{
-	unsigned char data = 0x00;
-
-	if(ir_rawbuf.dcnt > 0)
-	{
-		data = ir_rawbuf.buf[--ir_rawbuf.dcnt];
-	}
-
-	return data;
-}
-
-static inline int ir_rawbuffer_empty(void)
-{
-	return (ir_rawbuf.dcnt == 0);
-}
-
-static inline int ir_rawbuffer_full(void)
-{
-	return (ir_rawbuf.dcnt >= IR_RAW_BUF_SIZE);
-}
-
-static void ir_clk_cfg(void)
-{
-#ifdef SYS_CLK_CFG_EN
-        unsigned long rate = 3000000; //3Mhz
-#else
-        unsigned long tmp = 0;
-#endif
-
-#ifdef SYS_CLK_CFG_EN
-	apb_ir_clk = clk_get(NULL, "apb_ir0");
-	if(!apb_ir_clk) {
-			printk("try to get apb_ir0 clock failed!\n");
-			return;
-	}
-
-	ir_clk = clk_get(NULL, "ir0");
-	if(!ir_clk) {
-			printk("try to get ir0 clock failed!\n");
-			return;
-	}
-
-	if(clk_set_rate(ir_clk, rate)) {
-			printk("set ir0 clock freq to 3M failed!\n");
-	}
-
-	if(clk_enable(apb_ir_clk)) {
-		printk("try to enable apb_ir_clk failed!\n");
-		}
-	if(clk_enable(ir_clk)) {
-		printk("try to enable apb_ir_clk failed!\n");
-	}
-
-#else
-	//Enable APB Clock for IR
-	tmp = readl(CCM_BASE + 0x10);
-	tmp |= 0x1<<10;  //IR
-	writel(tmp, CCM_BASE + 0x10);
-
-	//config Special Clock for IR	(24/8=3MHz)
-	tmp = readl(CCM_BASE + 0x34);
-	tmp &= ~(0x3<<8);
-	tmp |= (0x1<<8);   	//Select 24MHz
-	tmp |= (0x1<<7);   	//Open Clock
-	tmp &= ~(0x3f<<0);
-	tmp |= (7<<0);	 	//Divisor = 8
-	writel(tmp, CCM_BASE + 0x34);
-#endif
-
-    return;
-}
-
-static void ir_clk_uncfg(void)
-{
-#ifdef SYS_CLK_CFG_EN
-	clk_put(apb_ir_clk);
-	clk_put(ir_clk);
-#else
-#endif
-
-	return;
-}
-static void ir_sys_cfg(void)
-{
-	//unsigned long tmp;
-
-#ifdef SYS_GPIO_CFG_EN
-        if(0 == (ir_gpio_hdle = gpio_request_ex("ir_para", "ir0_rx"))){
-	printk("try to request ir_para gpio failed. \n");
-        }
-
-#else
-	//config IO: PIOB4 to IR_Rx
-	tmp = readl(PI_BASE + 0x24); //PIOB_CFG0_REG
-	tmp &= ~(0xf<<16);
-	tmp |= (0x2<<16);
-	writel(tmp, PI_BASE + 0x24);
-#endif
-
-	ir_clk_cfg();
-
-    return;
-}
-
-static void ir_sys_uncfg(void)
-{
-	//unsigned long tmp;
-
-
-	#ifdef SYS_GPIO_CFG_EN
-        gpio_release(ir_gpio_hdle, 2);
-	#else
-	#endif
-
-    ir_clk_uncfg();
-
-	return;
-}
-
-static void ir_reg_cfg(void)
-{
-	unsigned long tmp = 0;
-	/*Enable IR Mode*/
-	tmp = 0x3<<4;
-	writel(tmp, IR_BASE+IR_CTRL_REG);
-
-	/*Config IR Smaple Register*/
-#ifdef FPGA_SIM_CONFIG
-    tmp = 0x3<<0;  //Fsample = 24MHz/512 = 46875Hz (21.33us)
-#else
-    tmp = 0x1<<0;  //Fsample = 3MHz/128 =23437.5Hz (42.7us)
-#endif
-
-
-	tmp |= (IR_RXFILT_VAL&0x3f)<<2;	//Set Filter Threshold
-	tmp |= (IR_RXIDLE_VAL&0xff)<<8; //Set Idle Threshold
-	writel(tmp, IR_BASE+IR_SPLCFG_REG);
-
-	/*Invert Input Signal*/
-	writel(0x1<<2, IR_BASE+IR_RXCFG_REG);
-
-	/*Clear All Rx Interrupt Status*/
-	writel(0xff, IR_BASE+IR_RXINTS_REG);
-
-	/*Set Rx Interrupt Enable*/
-	tmp = (0x1<<4)|0x3;
-	//tmp |= ((IR_FIFO_SIZE>>1)-1)<<8; //Rx FIFO Threshold = FIFOsz/2;
-	tmp |= ((IR_FIFO_SIZE>>2)-1)<<8; //Rx FIFO Threshold = FIFOsz/4;
-	writel(tmp, IR_BASE+IR_RXINTE_REG);
-
-	/*Enable IR Module*/
-	tmp = readl(IR_BASE+IR_CTRL_REG);
-	tmp |= 0x3;
-	writel(tmp, IR_BASE+IR_CTRL_REG);
-
-	return;
-}
-
-static void ir_setup(void)
-{
-	dprintk(2, "ir_setup: ir setup start!!\n");
-
-	ir_code = 0;
-	timer_used = 0;
-	ir_reset_rawbuffer();
-	ir_sys_cfg();
-	ir_reg_cfg();
-
-	dprintk(2, "ir_setup: ir setup end!!\n");
-
-	return;
-}
-
-static inline unsigned char ir_get_data(void)
-{
-	return (unsigned char)(readl(IR_BASE + IR_RXDAT_REG));
-}
-
-static inline unsigned long ir_get_intsta(void)
-{
-	return (readl(IR_BASE + IR_RXINTS_REG));
-}
-
-static inline void ir_clr_intsta(unsigned long bitmap)
-{
-	unsigned long tmp = readl(IR_BASE + IR_RXINTS_REG);
-
-	tmp &= ~0xff;
-	tmp |= bitmap&0xff;
-	writel(tmp, IR_BASE + IR_RXINTS_REG);
-}
-
-static unsigned long ir_packet_handler(unsigned char *buf, unsigned long dcnt)
-{
-	unsigned long len;
-	unsigned char val = 0x00;
-	unsigned char last = 0x00;
-	unsigned long code = 0;
-	int bitCnt = 0;
-	unsigned long i=0;
-
-	//print_hex_dump_bytes("--- ", DUMP_PREFIX_NONE, buf, dcnt);
-
-	dprintk(2, "dcnt = %d \n", (int)dcnt);
-
-	/*Find Lead '1'*/
-	len = 0;
-	for(i=0; i<dcnt; i++)
-	{
-		val = buf[i];
-		if(val & 0x80)
-		{
-			len += val & 0x7f;
-		}
-		else
-		{
-			if(len > IR_L1_MIN)
-				break;
-
-			len = 0;
-		}
-	}
-
-	if((val&0x80) || (len<=IR_L1_MIN))
-		return IR_ERROR_CODE; /*Invalid Code*/
-
-	/*Find Lead '0'*/
-	len = 0;
-	for(; i<dcnt; i++)
-	{
-		val = buf[i];
-		if(val & 0x80)
-		{
-			if(len > IR_L0_MIN)
-				break;
-
-			len = 0;
-		}
-		else
-		{
-			len += val & 0x7f;
-		}
-	}
-
-	if((!(val&0x80)) || (len<=IR_L0_MIN))
-		return IR_ERROR_CODE; /*Invalid Code*/
-
-	/*go decoding*/
-	code = 0;  /*0 for Repeat Code*/
-	bitCnt = 0;
-	last = 1;
-	len = 0;
-	for(; i<dcnt; i++)
-	{
-		val = buf[i];
-		if(last)
-		{
-			if(val & 0x80)
-			{
-				len += val & 0x7f;
-			}
-			else
-			{
-				if(len > IR_PMAX) /*Error Pulse*/
-				{
-					return IR_ERROR_CODE;
-				}
-				last = 0;
-				len = val & 0x7f;
-			}
-		}
-		else
-		{
-			if(val & 0x80)
-			{
-				if(len > IR_DMAX) /*Error Distant*/
-				{
-					return IR_ERROR_CODE;
-				}
-				else
-				{
-					if(len > IR_DMID)
-					{
-						/*data '1'*/
-						code |= 1<<bitCnt;
-					}
-					bitCnt ++;
-					if(bitCnt == 32)
-						break;  /*decode over*/
-				}
-				last = 1;
-				len = val & 0x7f;
-			}
-			else
-			{
-				len += val & 0x7f;
-			}
-		}
-	}
-
-	return code;
-}
-
-static int ir_code_valid(unsigned long code)
-{
-	unsigned long tmp1, tmp2;
-
-#ifdef IR_CHECK_ADDR_CODE
-	/*Check Address Value*/
-	if((code&0xffff) != (IR_ADDR_CODE&0xffff))
-		return 0; /*Address Error*/
-
-	tmp1 = code & 0x00ff0000;
-	tmp2 = (code & 0xff000000)>>8;
-
-	return ((tmp1^tmp2)==0x00ff0000);  /*Check User Code*/
-#else
-	/*Do Not Check Address Value*/
-	tmp1 = code & 0x00ff00ff;
-	tmp2 = (code & 0xff00ff00)>>8;
-
-	//return ((tmp1^tmp2)==0x00ff00ff);
-	return (((tmp1^tmp2) & 0x00ff0000)==0x00ff0000 );
-#endif /*#ifdef IR_CHECK_ADDR_CODE*/
-}
-
-static irqreturn_t ir_irq_service(int irqno, void *dev_id)
-{
-	unsigned long intsta = ir_get_intsta();
-
-#ifdef DEBUG_IR_LEVEL2
-	printk("IR IRQ Serve\n");
-#endif
-	ir_clr_intsta(intsta);
-
-	//if(intsta & (IR_RXINTS_RXDA|IR_RXINTS_RXPE))  /*FIFO Data Valid*/
-	/*Read Data Every Time Enter this Routine*/
-	{
-		//unsigned long dcnt =  (ir_get_intsta()>>8) & 0x1f;
-		unsigned long dcnt =  (ir_get_intsta()>>8) & 0x3f;
-		unsigned long i = 0;
-
-		/*Read FIFO*/
-		for(i=0; i<dcnt; i++)
-		{
-			if(ir_rawbuffer_full())
-			{
-				#ifdef DEBUG_IR_LEVEL0
-				printk("ir_irq_service: Raw Buffer Full!!\n");
-				#endif
-				break;
-			}
-			else
-			{
-				ir_write_rawbuffer(ir_get_data());
-			}
-		}
-	}
-
-	if(intsta & IR_RXINTS_RXPE)	 /*Packet End*/
-	{
-		unsigned long code;
-		int code_valid;
-
-		code = ir_packet_handler(ir_rawbuf.buf, ir_rawbuf.dcnt);
-		ir_rawbuf.dcnt = 0;
-		code_valid = ir_code_valid(code);
-
-		if(timer_used)
-		{
-			if(code_valid)  //the pre-key is released
-			{
-				input_report_key(ir_dev, ir_keycodes[(ir_code>>16)&0xff], 0);
-				input_sync(ir_dev);
-				#ifdef DEBUG_IR_LEVEL1
-				printk("IR KEY UP\n");
-				#endif
-				ir_cnt = 0;
-			}
-			if((code==IR_REPEAT_CODE)||(code_valid))  //Error, may interfere from other sources
-			{
-				mod_timer(s_timer, jiffies + (HZ/5));
-			}
-		}
-		else
-		{
-			if(code_valid)
-			{
-				s_timer->expires = jiffies + (HZ/5);  //200ms timeout
-				add_timer(s_timer);
-				timer_used = 1;
-			}
-		}
-
-		if(timer_used)
-		{
-			ir_cnt++;
-			if(ir_cnt == 1)
-			{
-			if(code_valid)	ir_code = code;  /*update saved code with a new valid code*/
-			#ifdef DEBUG_IR_LEVEL0
-			printk("IR RAW CODE : %lu\n",(ir_code>>16)&0xff);
-			#endif
-			input_report_key(ir_dev, ir_keycodes[(ir_code>>16)&0xff], 1);
-			#ifdef DEBUG_IR_LEVEL0
-			printk("IR CODE : %d\n",ir_keycodes[(ir_code>>16)&0xff]);
-			#endif
-			input_sync(ir_dev);
-			#ifdef DEBUG_IR_LEVEL1
-			printk("IR KEY VALE %d\n",ir_keycodes[(ir_code>>16)&0xff]);
-			#endif
-		  }
-
-
-		}
-
-		dprintk(1, "ir_irq_service: Rx Packet End, code=0x%x, ir_code=0x%x, timer_used=%d \n", (int)code, (int)ir_code, timer_used);
-	}
-
-	if(intsta & IR_RXINTS_RXOF)  /*FIFO Overflow*/
-	{
-		/*flush raw buffer*/
-		ir_reset_rawbuffer();
-#ifdef DEBUG_IR_LEVEL0
-		printk("ir_irq_service: Rx FIFO Overflow!!\n");
-#endif
-	}
-
-	return IRQ_HANDLED;
-}
-
-static void ir_timer_handle(unsigned long arg)
-{
-	del_timer(s_timer);
-	timer_used = 0;
-	/*Time Out, means that the key is up*/
-	input_report_key(ir_dev, ir_keycodes[(ir_code>>16)&0xff], 0);
-	input_sync(ir_dev);
-#ifdef DEBUG_IR_LEVEL1
-	printk("IR KEY TIMER OUT UP\n");
-#endif
-	ir_cnt = 0;
-
-	dprintk(2, "ir_timer_handle: timeout \n");
-}
-
-//停用设备
-#ifdef CONFIG_HAS_EARLYSUSPEND
-static void sun4i_ir_suspend(struct early_suspend *h)
-{
-//    unsigned long tmp = 0;
-	/*int ret;
-	struct sun4i_ir_data *ts = container_of(h, struct sun4i_ir_data, early_suspend);
-      */
-#ifdef PRINT_SUSPEND_INFO
-	printk("enter earlysuspend: sun4i_ir_suspend. \n");
-#endif
-/*
-	tmp = readl(IR_BASE+IR_CTRL_REG);
-	tmp &= 0xfffffffc;
-    writel(tmp, IR_BASE+IR_CTRL_REG);
-*/
-	clk_disable(ir_clk);
-	clk_disable(apb_ir_clk);
-
-	return ;
-}
-
-//重新唤醒
-static void sun4i_ir_resume(struct early_suspend *h)
-{
-    //unsigned long tmp = 0;
-	/*int ret;
-	struct sun4i_ir_data *ts = container_of(h, struct sun4i_ir_data, early_suspend);
-    */
-#ifdef PRINT_SUSPEND_INFO
-	printk("enter laterresume: sun4i_ir_resume. \n");
-#endif
-
-	ir_code = 0;
-	timer_used = 0;
-	ir_reset_rawbuffer();
-	ir_clk_cfg();
-	ir_reg_cfg();
-
-	return ;
-}
-#else
-#endif
-
-static int __init ir_init(void)
-{
-	int i,ret;
-	int err =0;
-
-	ir_dev = input_allocate_device();
-	if (!ir_dev)
-	{
-		printk(KERN_ERR "ir_dev: not enough memory for input device\n");
-		err = -ENOMEM;
-		goto fail1;
-	}
-
-	ir_dev->name = "sun4i-ir";
-	ir_dev->phys = "RemoteIR/input1";
-	ir_dev->id.bustype = BUS_HOST;
-	ir_dev->id.vendor = 0x0001;
-	ir_dev->id.product = 0x0001;
-	ir_dev->id.version = 0x0100;
-
-    #ifdef REPORT_REPEAT_KEY_VALUE
-	ir_dev->evbit[0] = BIT_MASK(EV_KEY)|BIT_MASK(EV_REP) ;
-    #else
-    	ir_dev->evbit[0] = BIT_MASK(EV_KEY);
-    #endif
-
-	for (i = 0; i < 256; i++)
-		set_bit(ir_keycodes[i], ir_dev->keybit);
-
-	if (request_irq(IR_IRQNO, ir_irq_service, 0, "RemoteIR",
-			ir_dev)) {
-		err = -EBUSY;
-		goto fail2;
-	}
-
-	ir_setup();
-
-	s_timer = kmalloc(sizeof(struct timer_list), GFP_KERNEL);
-	if (!s_timer)
-	{
-	ret =  - ENOMEM;
-	printk(" IR FAIL TO  Request Time\n");
-	goto fail3;
-	}
-	init_timer(s_timer);
-	s_timer->function = &ir_timer_handle;
-
-	err = input_register_device(ir_dev);
-	if (err)
-		goto fail4;
-	printk("IR Initial OK\n");
-
-#ifdef CONFIG_HAS_EARLYSUSPEND
-	printk("==register_early_suspend =\n");
-	ir_data = kzalloc(sizeof(*ir_data), GFP_KERNEL);
-	if (ir_data == NULL) {
-		err = -ENOMEM;
-		goto err_alloc_data_failed;
-	}
-
-	ir_data->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
-	ir_data->early_suspend.suspend = sun4i_ir_suspend;
-	ir_data->early_suspend.resume	= sun4i_ir_resume;
-	register_early_suspend(&ir_data->early_suspend);
-#endif
-
-	return 0;
-
-#ifdef CONFIG_HAS_EARLYSUSPEND
- err_alloc_data_failed:
-#endif
- fail4:
- 	kfree(s_timer);
- fail3:
- 	free_irq(IR_IRQNO, ir_dev);
- fail2:
- 	input_free_device(ir_dev);
- fail1:
- 	return err;
-}
-
-static void __exit ir_exit(void)
-{
-	#ifdef CONFIG_HAS_EARLYSUSPEND
-	    unregister_early_suspend(&ir_data->early_suspend);
-	#endif
-
-	free_irq(IR_IRQNO, ir_dev);
-	input_unregister_device(ir_dev);
-	ir_sys_uncfg();
- 	kfree(s_timer);
-}
-
-module_init(ir_init);
-module_exit(ir_exit);
-
-MODULE_DESCRIPTION("Remote IR driver");
-MODULE_AUTHOR("DanielWang");
-MODULE_LICENSE("GPL");
-
diff --git a/drivers/media/rc/Kconfig b/drivers/media/rc/Kconfig
index a3fbb21..51dbbf9 100644
--- a/drivers/media/rc/Kconfig
+++ b/drivers/media/rc/Kconfig
@@ -236,6 +236,17 @@ config IR_STREAMZAP
 	   To compile this driver as a module, choose M here: the
 	   module will be called streamzap.
 
+config IR_SUNXI
+        tristate "SUNXI Infrared Receiver"
+        depends on (ARCH_SUN3I || ARCH_SUN4I || ARCH_SUN5I)
+        depends on RC_CORE
+        ---help---
+           Say Y here to enable support for integrated infrared receiver
+           made by Allwinner.
+
+           To compile this driver as a module, choose M here: the
+           module will be called sunxi-ir.
+
 config IR_WINBOND_CIR
 	tristate "Winbond IR remote control"
 	depends on X86 && PNP
diff --git a/drivers/media/rc/Makefile b/drivers/media/rc/Makefile
index 29f364f..ce9ce71 100644
--- a/drivers/media/rc/Makefile
+++ b/drivers/media/rc/Makefile
@@ -24,6 +24,7 @@ obj-$(CONFIG_IR_NUVOTON) += nuvoton-cir.o
 obj-$(CONFIG_IR_ENE) += ene_ir.o
 obj-$(CONFIG_IR_REDRAT3) += redrat3.o
 obj-$(CONFIG_IR_STREAMZAP) += streamzap.o
+obj-$(CONFIG_IR_SUNXI) += sunxi-cir.o
 obj-$(CONFIG_IR_WINBOND_CIR) += winbond-cir.o
 obj-$(CONFIG_RC_LOOPBACK) += rc-loopback.o
 obj-$(CONFIG_IR_GPIO_CIR) += gpio-ir-recv.o
diff --git a/drivers/media/rc/sunxi-cir.c b/drivers/media/rc/sunxi-cir.c
new file mode 100644
index 0000000..74362d6
--- /dev/null
+++ b/drivers/media/rc/sunxi-cir.c
@@ -0,0 +1,365 @@
+/*
+ *  IR remote control driver for sunxi platform (Allwinner A1X)
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License 2 as published
+ *  by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/clk.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/spinlock.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <plat/sys_config.h>
+#include <media/rc-core.h>
+
+#define DRIVER_NAME                "sunxi-cir"
+#define DRIVER_VERS                "1.1"
+
+/* RC5 protocol has min pulse width, so sample=8us */
+/* JVC has minimum packet period so idle=30ms */
+#define IR_CLOCK_RATE                8000000      /* ir clock rate (Hz) */
+#define IR_SAMPLE_CLK_SEL        (0x0 << 0)   /* ir clk div (DIV = 64 << SEL) */
+#define IR_RXFILT_VAL                (1)          /* Pulse threshold = 8us */
+#define IR_RXIDLE_VAL                (29)         /* Idle threshold = 30ms */
+#define IR_DRIVER_TIMEOUT        (30)         /* Same as above (30ms)  */
+#define IR_FIFO_SIZE                (16)         /* FIFO len is 16 bytes  */
+#define IR_INVERT_INPUT                (1)          /* 1 - invert, 0 - not invert  */
+#define VALUE_MASK                0x80         /* Bit15 - value (pulse/space) */
+#define PERIOD_MASK                0x7f         /* Bits0:14 - sample duration  */
+
+/* IRQ num & registers base */
+#define IR_IRQNO                SW_INT_IRQNO_IR0
+#define IR_BASE                        SW_PA_IR0_IO_BASE
+#define IR_RANGE_SIZE                200
+
+/* Calculate sample freq and period */
+#define CIR_SAMPLE_HZ                (IR_CLOCK_RATE / (64 << IR_SAMPLE_CLK_SEL))
+#define CIR_SAMPLE_PERIOD        (1000000000ul / CIR_SAMPLE_HZ) /* ns */
+
+/* IR controller registers */
+#define IR_REG(x)                (x)
+#define IR_CTRL_REG                IR_REG(0x00) /* IR Control */
+#define IR_RXCFG_REG                IR_REG(0x10) /* Rx Config */
+#define IR_RXDAT_REG                IR_REG(0x20) /* Rx Data */
+#define IR_RXINTE_REG                IR_REG(0x2C) /* Rx Interrupt Enable */
+#define IR_RXINTS_REG                IR_REG(0x30) /* Rx Interrupt Status */
+#define IR_SPLCFG_REG                IR_REG(0x34) /* IR Sample Config */
+
+/* Bits of IR_RXINTS_REG register */
+#define IR_RXINTS_RXOF                (0x1 << 0)   /* Rx FIFO Overflow */
+#define IR_RXINTS_RXPE                (0x1 << 1)   /* Rx Packet End */
+#define IR_RXINTS_RXDA                (0x1 << 4)   /* Rx FIFO Data ready */
+
+/* Bits of IR_CTRL_REG register */
+#define IRDA_MODE_CIR                (0x3 << 4)   /* IRDA mode CIR (for rc) */
+#define IR_RX_EN                (0x1 << 1)   /* IR receiver enable flag */
+#define IR_GLOB_EN                (0x1 << 0)   /* Global IR enable flag */
+
+/* Bits of IR_RXCFG_REG register */
+#define IR_INVERT_EN                (IR_INVERT_INPUT << 2)  /* Invert input bit */
+
+/* Bits of IR_RXINTE_REG register */
+#define RPEI_EN                        (0x1 << 0)   /* recv packet end int enable */
+#define RISI_EN                        (0x1 << 1)   /* recv illegal sym int enable */
+#define RAI_EN                        (0x1 << 4)   /* RX FIFO available int enable */
+
+#define SUCCESS                        (0)          /* for functions "return" op */
+
+struct sunxi_ir_chip {
+        struct rc_dev *rcdev;
+        struct device *dev;
+        void __iomem *gaddr;
+        unsigned gpio_hdle;
+        spinlock_t irq_lock;
+        struct clk *apb_ir_clk;
+        struct clk *ir_clk;
+};
+
+/* Configure and enable ir receiver in cir mode */
+static int ir_setup(struct sunxi_ir_chip *ir_chip)
+{
+        unsigned long tmp = 0;
+
+        ir_chip->gpio_hdle = gpio_request_ex("ir_para", "ir0_rx");
+        if (!ir_chip->gpio_hdle) {
+                pr_err("Try to request ir_para gpio failed!\n");
+                return -EINVAL;
+        }
+
+        ir_chip->apb_ir_clk = clk_get(NULL, "apb_ir0");
+        if (!ir_chip->apb_ir_clk) {
+                pr_err("Try to get apb_ir0 clock failed!\n");
+                return -EINVAL;
+        }
+
+        ir_chip->ir_clk = clk_get(NULL, "ir0");
+        if (!ir_chip->ir_clk) {
+                pr_err("Try to get ir0 clock failed!\n");
+                return -EINVAL;
+        }
+
+        if (clk_set_rate(ir_chip->ir_clk, IR_CLOCK_RATE)) {
+                pr_err("Try to set ir0 clock rate failed!\n");
+                return -EINTR;
+        }
+
+        /* Should we recalculate CIR_SAMPLE_PERIOD using this ? */
+        pr_info("IR clock rate: %luHz\n",
+                (unsigned long)clk_get_rate(ir_chip->ir_clk));
+        pr_info("IR sample period: %luns\n",
+                (unsigned long)CIR_SAMPLE_PERIOD);
+
+        if (clk_enable(ir_chip->apb_ir_clk)) {
+                pr_err("Try to enable apb_ir_clk failed!\n");
+                return -EINTR;
+        }
+
+        if (clk_enable(ir_chip->ir_clk)) {
+                pr_err("Try to enable apb_ir_clk failed!\n");
+                return -EINTR;
+        }
+
+        /* Enable CIR Mode */
+        writel(IRDA_MODE_CIR, ir_chip->gaddr + IR_CTRL_REG);
+
+        /* Config IR Smaple Register */
+        tmp = IR_SAMPLE_CLK_SEL;            /* Fsample divider */
+        tmp |= (IR_RXFILT_VAL & 0x3f) << 2; /* Set Filter Threshold */
+        tmp |= (IR_RXIDLE_VAL & 0xff) << 8; /* Set Idle Threshold */
+        writel(tmp, ir_chip->gaddr + IR_SPLCFG_REG);
+
+        /* Set up signal inversion */
+        writel(IR_INVERT_EN, ir_chip->gaddr + IR_RXCFG_REG);
+
+        /* Clear All Rx Interrupt Status */
+        writel(0xff, ir_chip->gaddr + IR_RXINTS_REG);
+
+        /* Enable rx interrupt & set RAL = FIFOsz/2; */
+        tmp = RPEI_EN | RISI_EN | RAI_EN;
+        tmp |= ((IR_FIFO_SIZE >> 1) - 1) << 8;
+        writel(tmp, ir_chip->gaddr + IR_RXINTE_REG);
+
+        /* Enable IR Module */
+        tmp = readl(ir_chip->gaddr + IR_CTRL_REG);
+        writel((tmp | IR_GLOB_EN | IR_RX_EN), ir_chip->gaddr + IR_CTRL_REG);
+
+        return SUCCESS;
+}
+
+/* Disable ir receiver, stop clock, free gpio */
+static void ir_stop(struct sunxi_ir_chip *ir_chip)
+{
+        /* Disable Rx Interrupts */
+        writel(0, ir_chip->gaddr + IR_RXINTE_REG);
+
+        /* Clear All Rx Interrupt Status */
+        writel(0xff, ir_chip->gaddr + IR_RXINTS_REG);
+
+        /* Disable IR Module */
+        writel(0, ir_chip->gaddr + IR_CTRL_REG);
+
+        if (ir_chip->ir_clk)
+                clk_disable(ir_chip->ir_clk);
+        if (ir_chip->apb_ir_clk)
+                clk_disable(ir_chip->apb_ir_clk);
+
+        gpio_release(ir_chip->gpio_hdle, 1);
+}
+
+/* STUB: Protocol change callback (this can be used */
+/* to ajust ir controller settings for protocols)   */
+int change_protocol(struct rc_dev *dev, u64 rc_type)
+{
+        /* pr_info("Proto_change to [0x%08lX]\n", (unsigned long)rc_type); */
+        return SUCCESS;
+}
+
+/* IR controller interrupt handler */
+static irqreturn_t sunxi_ir_irq(int irq, void *devid)
+{
+        int i = 0;
+        u8 gval = 0;
+        u8 scnt = 0;
+        __u32 intsta = 0;
+        unsigned long flags;
+        DEFINE_IR_RAW_EVENT(rawir);
+        struct sunxi_ir_chip *ir_chip = devid;
+
+        /* Read & clear interrupt status */
+        spin_lock_irqsave(&ir_chip->irq_lock, flags);
+        intsta = readl(ir_chip->gaddr + IR_RXINTS_REG);
+        writel(intsta & 0xff, ir_chip->gaddr + IR_RXINTS_REG);
+
+        /* Status bits 7:15 - number of fifo samples available */
+        scnt = (intsta >> 8) & 0xff;
+
+        /* Read all data from FIFO buffer */
+        init_ir_raw_event(&rawir);
+        for (i = 0; i < scnt; i++) {
+                gval = (u8)(readl(ir_chip->gaddr + IR_RXDAT_REG));
+                rawir.pulse = ((gval & VALUE_MASK) != 0);
+                rawir.duration = (gval & PERIOD_MASK) * CIR_SAMPLE_PERIOD;
+                ir_raw_event_store_with_filter(ir_chip->rcdev, &rawir);
+                ir_raw_event_handle(ir_chip->rcdev);
+        }
+
+        /* Set idle on END_OF_PACKET event */
+        if (intsta & IR_RXINTS_RXPE)
+                ir_raw_event_set_idle(ir_chip->rcdev, true);
+
+        /* FIFO Overflow hardware event */
+        if (intsta & IR_RXINTS_RXOF)
+                ir_raw_event_reset(ir_chip->rcdev);
+
+        spin_unlock_irqrestore(&ir_chip->irq_lock, flags);
+        return IRQ_HANDLED;
+}
+
+/* Initialization: Create rc device, request irq, setup ir  */
+static int __devinit sunxi_ir_probe(struct platform_device *pdev)
+{
+        struct sunxi_ir_chip *ir_chip;
+        int err = 0;
+
+        ir_chip = kzalloc(sizeof(struct sunxi_ir_chip), GFP_KERNEL);
+        if (!ir_chip) {
+                pr_err("%s kzalloc failed\n", __func__);
+                err = -ENOMEM;
+                goto exit;
+        }
+
+        ir_chip->rcdev = rc_allocate_device();
+        if (!ir_chip->rcdev) {
+                err = -ENOMEM;
+                goto err_allocate;
+        }
+
+        ir_chip->rcdev->driver_name = DRIVER_NAME;
+        ir_chip->rcdev->input_name = DRIVER_NAME;
+        ir_chip->rcdev->driver_type = RC_DRIVER_IR_RAW;
+        ir_chip->rcdev->input_id.bustype = BUS_HOST;
+        ir_chip->rcdev->map_name = RC_MAP_EMPTY;
+        ir_chip->rcdev->allowed_protos = RC_TYPE_ALL;
+        ir_chip->rcdev->rx_resolution = CIR_SAMPLE_PERIOD;
+        ir_chip->rcdev->timeout = MS_TO_NS(IR_DRIVER_TIMEOUT);
+        ir_chip->rcdev->change_protocol = change_protocol;
+
+        err = rc_register_device(ir_chip->rcdev);
+        if (err < 0) {
+                pr_err("Failed to register rc device!\n");
+                goto err_register;
+        }
+
+        err = request_irq(IR_IRQNO, sunxi_ir_irq, 0, DRIVER_NAME, ir_chip);
+        if (err < 0) {
+                pr_err("Can't request irq %d!\n", IR_IRQNO);
+                goto err_irq;
+        }
+
+        ir_chip->gaddr = ioremap(IR_BASE, IR_RANGE_SIZE);
+        if (!ir_chip->gaddr) {
+                pr_err("Can't request ir registers memory!\n");
+                err = -EIO;
+                goto err_map;
+        }
+
+        platform_set_drvdata(pdev, ir_chip);
+        ir_raw_event_reset(ir_chip->rcdev);
+        err = ir_setup(ir_chip);
+        if (err != 0)
+                goto err_setup;
+
+        return SUCCESS;
+
+err_setup:
+        ir_stop(ir_chip);
+        iounmap(ir_chip->gaddr);
+err_map:
+        free_irq(IR_IRQNO, ir_chip);
+err_irq:
+        rc_unregister_device(ir_chip->rcdev);
+err_register:
+        rc_free_device(ir_chip->rcdev);
+err_allocate:
+        kfree(ir_chip);
+exit:
+        return err;
+}
+
+/* Remove ir device & driver */
+static int __devexit sunxi_ir_remove(struct platform_device *pdev)
+{
+        struct sunxi_ir_chip *ir_chip = platform_get_drvdata(pdev);
+
+        ir_stop(ir_chip);
+        iounmap(ir_chip->gaddr);
+        free_irq(IR_IRQNO, ir_chip);
+        rc_unregister_device(ir_chip->rcdev);
+        rc_free_device(ir_chip->rcdev);
+        kfree(ir_chip);
+
+        return SUCCESS;
+}
+
+static void sunxi_ir_release(struct device *dev)
+{
+        /* Nothing */
+}
+
+struct platform_device sunxi_ir_device = {
+        .name                = DRIVER_NAME,
+        .id                = -1,
+        .dev =  {
+                .release = sunxi_ir_release,
+                },
+};
+
+static struct platform_driver sunxi_ir_driver = {
+        .driver.name        = DRIVER_NAME,
+        .driver.owner        = THIS_MODULE,
+        .probe                = sunxi_ir_probe,
+        .remove                = __devexit_p(sunxi_ir_remove),
+};
+
+static int __init sunxi_ir_init(void)
+{
+        int err = 0;
+
+        pr_info("Device driver %s version %s\n", DRIVER_NAME, DRIVER_VERS);
+        err = platform_device_register(&sunxi_ir_device);
+        if (err)
+                goto exit;
+
+        err = platform_driver_register(&sunxi_ir_driver);
+        if (err)
+                platform_device_unregister(&sunxi_ir_device);
+
+exit:
+        return err;
+}
+module_init(sunxi_ir_init);
+
+static void __exit sunxi_ir_exit(void)
+{
+        platform_driver_unregister(&sunxi_ir_driver);
+        platform_device_unregister(&sunxi_ir_device);
+}
+module_exit(sunxi_ir_exit);
+
+MODULE_AUTHOR("Alexandr Shutko <alex@shutko.ru>");
+MODULE_DESCRIPTION("CIR interface for Allwinner A1X SOCs");
+MODULE_LICENSE("GPL");
