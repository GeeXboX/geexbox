diff --git a/xbmc/windowing/egl/EGLNativeTypeA10.cpp b/xbmc/windowing/egl/EGLNativeTypeA10.cpp
new file mode 100644
index 0000000..0d7a686
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeA10.cpp
@@ -0,0 +1,159 @@
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "system.h"
+#include <EGL/egl.h>
+#include "EGLNativeTypeA10.h"
+#include "utils/log.h"
+#include "utils/StringUtils.h"
+#include "guilib/gui3d.h"
+
+#if defined(ALLWINNERA10) && !defined(TARGET_ANDROID)
+#include "cores/VideoRenderers/LinuxRendererA10.h"
+static struct mali_native_window g_fbwin;
+static double       g_refreshRate;
+#endif
+
+CEGLNativeTypeA10::CEGLNativeTypeA10()
+{
+#if defined(ALLWINNERA10) && !defined(TARGET_ANDROID)
+  int width, height;
+
+  A10VLInit(width, height, g_refreshRate);
+  g_fbwin.width  = width;
+  g_fbwin.height = height;
+#endif
+}
+
+CEGLNativeTypeA10::~CEGLNativeTypeA10()
+{
+#if defined(ALLWINNERA10) && !defined(TARGET_ANDROID)
+  A10VLExit();
+#endif
+} 
+
+bool CEGLNativeTypeA10::CheckCompatibility()
+{
+#if defined(ALLWINNERA10) && !defined(TARGET_ANDROID)
+  return true;
+#endif
+  return false;
+}
+
+void CEGLNativeTypeA10::Initialize()
+{
+  return;
+}
+void CEGLNativeTypeA10::Destroy()
+{
+  return;
+}
+
+bool CEGLNativeTypeA10::CreateNativeDisplay()
+{
+  m_nativeDisplay = EGL_DEFAULT_DISPLAY;
+  return true;
+}
+
+bool CEGLNativeTypeA10::CreateNativeWindow()
+{
+#if defined(ALLWINNERA10) && !defined(TARGET_ANDROID)
+  m_nativeWindow = &g_fbwin;
+  return true;
+#else
+  return false;
+#endif
+}  
+
+bool CEGLNativeTypeA10::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  if (!nativeDisplay)
+    return false;
+  *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeA10::GetNativeWindow(XBNativeWindowType **nativeWindow) const
+{
+  if (!nativeWindow)
+    return false;
+  *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+  return true;
+}
+
+bool CEGLNativeTypeA10::DestroyNativeDisplay()
+{
+  return true;
+}
+
+bool CEGLNativeTypeA10::DestroyNativeWindow()
+{
+  return true;
+}
+
+bool CEGLNativeTypeA10::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+#if defined(ALLWINNERA10) && !defined(TARGET_ANDROID)
+  res->iWidth = g_fbwin.width;
+  res->iHeight= g_fbwin.height;
+
+  res->fRefreshRate = g_refreshRate;
+  res->dwFlags= D3DPRESENTFLAG_PROGRESSIVE | D3DPRESENTFLAG_WIDESCREEN;
+  res->iScreen       = 0;
+  res->bFullScreen   = true;
+  res->iSubtitles    = (int)(0.965 * res->iHeight);
+  res->fPixelRatio   = 1.0f;
+  res->iScreenWidth  = res->iWidth;
+  res->iScreenHeight = res->iHeight;
+  res->strMode = StringUtils::Format("%dx%d @ %.2f%s - Full Screen", res->iScreenWidth, res->iScreenHeight, res->fRefreshRate,
+  res->dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
+  CLog::Log(LOGNOTICE,"Current resolution: %s\n",res->strMode.c_str());
+  return true;
+#else
+  return false;
+#endif
+}
+
+bool CEGLNativeTypeA10::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+  return false;
+}
+
+bool CEGLNativeTypeA10::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  RESOLUTION_INFO res;
+  bool ret = false;
+  ret = GetNativeResolution(&res);
+  if (ret && res.iWidth > 1 && res.iHeight > 1)
+  {
+    resolutions.push_back(res);
+    return true;
+  }
+  return false;
+}
+
+bool CEGLNativeTypeA10::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  return false;
+}
+
+bool CEGLNativeTypeA10::ShowWindow(bool show)
+{
+  return false;
+}
diff --git a/xbmc/windowing/egl/EGLNativeTypeA10.h b/xbmc/windowing/egl/EGLNativeTypeA10.h
new file mode 100644
index 0000000..d0f2777
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeA10.h
@@ -0,0 +1,49 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "EGLNativeType.h"
+class CEGLNativeTypeA10 : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeA10();
+  virtual ~CEGLNativeTypeA10();
+  virtual std::string GetNativeName() const { return "A10"; };
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NEED_WINDOW_FOR_RES; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+};
diff --git a/xbmc/windowing/egl/EGLNativeTypeAndroid.cpp b/xbmc/windowing/egl/EGLNativeTypeAndroid.cpp
index 0c0d355..12cf7bc 100644
--- a/xbmc/windowing/egl/EGLNativeTypeAndroid.cpp
+++ b/xbmc/windowing/egl/EGLNativeTypeAndroid.cpp
@@ -28,15 +28,26 @@
   #if defined(HAS_AMLPLAYER) || defined(HAS_LIBAMCODEC)
     #include "utils/AMLUtils.h"
   #endif
+  #ifdef ALLWINNERA10
+    #include "cores/VideoRenderers/LinuxRendererA10.h"
+  #endif
 #endif
 #include "utils/StringUtils.h"
 
 CEGLNativeTypeAndroid::CEGLNativeTypeAndroid()
 {
+#if defined(ALLWINNERA10) && defined(TARGET_ANDROID)
+  int width, height;
+
+  A10VLInit(width, height);
+#endif
 }
 
 CEGLNativeTypeAndroid::~CEGLNativeTypeAndroid()
 {
+#if defined(ALLWINNERA10) && defined(TARGET_ANDROID)
+  A10VLExit();
+#endif
 } 
 
 bool CEGLNativeTypeAndroid::CheckCompatibility()
diff --git a/xbmc/windowing/egl/EGLWrapper.cpp b/xbmc/windowing/egl/EGLWrapper.cpp
index a5442e1..217959d 100644
--- a/xbmc/windowing/egl/EGLWrapper.cpp
+++ b/xbmc/windowing/egl/EGLWrapper.cpp
@@ -22,7 +22,12 @@
 
 #ifdef HAS_EGL
 
+#if defined(ALLWINNERA10)
+  #include "system_gl.h"
+#endif
+
 #include "utils/log.h"
+#include "EGLNativeTypeA10.h"
 #include "EGLNativeTypeAndroid.h"
 #include "EGLNativeTypeAmlogic.h"
 #include "EGLNativeTypeRaspberryPI.h"
@@ -81,6 +86,7 @@
   // Try to create each backend in sequence and go with the first one
   // that we know will work
   if ((nativeGuess = CreateEGLNativeType<CEGLNativeTypeWayland>(implementation)) ||
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeA10>(implementation)) ||
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAndroid>(implementation)) ||
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAmlogic>(implementation)) ||
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeRaspberryPI>(implementation)))
@@ -302,6 +308,22 @@
   EGLBoolean status;
   status = eglMakeCurrent(display, surface, surface, context);
   CheckError();
+
+#if defined(ALLWINNERA10)
+  // For EGL backend, it needs to clear all the back buffers of the window
+  // surface before drawing anything, otherwise the image will be blinking
+  // heavily.  The default eglWindowSurface has 3 gdl surfaces as the back
+  // buffer, that's why glClear should be called 3 times.
+  eglSwapInterval(display, 0);
+  glClearColor (0.0f, 0.0f, 0.0f, 0.0f);
+  glClear (GL_COLOR_BUFFER_BIT);
+  eglSwapBuffers(display, surface);
+  glClear (GL_COLOR_BUFFER_BIT);
+  eglSwapBuffers(display, surface);
+  glClear (GL_COLOR_BUFFER_BIT);
+  eglSwapBuffers(display, surface);
+#endif
+
   return status;
 }
 
diff --git a/xbmc/windowing/egl/Makefile.in b/xbmc/windowing/egl/Makefile.in
index 241220a..8ad3b8f 100644
--- a/xbmc/windowing/egl/Makefile.in
+++ b/xbmc/windowing/egl/Makefile.in
@@ -1,6 +1,7 @@
 INCLUDES=-I.
 
 SRCS = WinSystemEGL.cpp
+SRCS+= EGLNativeTypeA10.cpp
 SRCS+= EGLNativeTypeAmlogic.cpp
 SRCS+= EGLNativeTypeAndroid.cpp
 SRCS+= EGLNativeTypeRaspberryPI.cpp

