From 28ff0ad3abf468a7927737a182599472f5a4e8d7 Mon Sep 17 00:00:00 2001
From: Rudi <r.ihle@s-t.de>
Date: Sat, 26 Dec 2015 19:09:59 +0100
Subject: [PATCH] video: mxc_edid/mxc_hdmi: Remove mxc_fb_mode_is_equal_res()

Checking for equal resolutions doesn't require a dedicated function.
Especially if this function doesn't quite do what the name suggests.

Signed-off-by: Rudi <r.ihle@s-t.de>
---
 drivers/video/mxc/mxc_edid.c | 13 -------------
 drivers/video/mxc/mxc_hdmi.c | 18 ++++++++++--------
 include/video/mxc_edid.h     |  1 -
 3 files changed, 10 insertions(+), 22 deletions(-)

diff --git a/drivers/video/mxc/mxc_edid.c b/drivers/video/mxc/mxc_edid.c
index 87bd119..aa6d24f 100644
--- a/drivers/video/mxc/mxc_edid.c
+++ b/drivers/video/mxc/mxc_edid.c
@@ -197,19 +197,6 @@ const struct fb_videomode mxc_cea_mode[64] = {
 	},
 };
 
-#define FB_VMODE_MASK_SIMPLE (FB_VMODE_NONINTERLACED | FB_VMODE_INTERLACED | \
-			      FB_VMODE_FRACTIONAL    | FB_VMODE_ASPECT_MASK)
-
-int mxc_fb_mode_is_equal_res(const struct fb_videomode *mode1,
-			     const struct fb_videomode *mode2)
-{
-	return (mode1->xres         == mode2->xres &&
-		mode1->yres         == mode2->yres &&
-		mode1->refresh      == mode2->refresh &&
-		(mode1->vmode & FB_VMODE_MASK_SIMPLE) ==
-		(mode2->vmode & FB_VMODE_MASK_SIMPLE));
-}
-EXPORT_SYMBOL(mxc_fb_mode_is_equal_res);
 
 /*
  * We have a special version of fb_mode_is_equal that ignores
diff --git a/drivers/video/mxc/mxc_hdmi.c b/drivers/video/mxc/mxc_hdmi.c
index 620168a..170704d 100644
--- a/drivers/video/mxc/mxc_hdmi.c
+++ b/drivers/video/mxc/mxc_hdmi.c
@@ -2074,23 +2074,24 @@ static void mxc_hdmi_set_mode(struct mxc_hdmi *hdmi, int edid_status)
 	dump_fb_videomode(&m);
 	mode = mxc_fb_find_nearest_mode(&m, &hdmi->fbi->modelist);
 
-	if (mode) {
-		hdmi->fbi->mode = (struct fb_videomode *)mode;
-		fb_videomode_to_var(&hdmi->fbi->var, mode);
-	} else {
+	if (!mode) {
 		pr_err("%s: could not find mode in modelist\n", __func__);
 		return;
 	}
 
+	hdmi->fbi->mode = (struct fb_videomode *)mode;
+	fb_videomode_to_var(&hdmi->fbi->var, mode);
+
 	/* restore xBuffer if dimension match */
-	if ((edid_status == HDMI_EDID_SAME && fb_mode_is_equal(&hdmi->previous_non_vga_mode, mode)) ||
-	    (edid_status != HDMI_EDID_SAME && mxc_fb_mode_is_equal_res(&hdmi->previous_non_vga_mode, mode))) {
+	if (hdmi->previous_non_vga_mode.xres == mode->xres &&
+	    hdmi->previous_non_vga_mode.yres == mode->yres) {
 		dev_dbg(&hdmi->pdev->dev,
-				"%s: Video mode %ssame as previous\n", __func__, edid_status == HDMI_EDID_SAME ? "+ EDID " : "");
+			"%s: Resolution %ssame as previous\n",
+			__func__, edid_status == HDMI_EDID_SAME ? "+ EDID " : "");
 		if (hdmi->prev_virtual.xres_virtual)
 			memcpy(&hdmi->fbi->var.xres_virtual, &hdmi->prev_virtual, sizeof(hdmi->prev_virtual));
 	} else {
-		dev_dbg(&hdmi->pdev->dev, "%s: New video mode\n", __func__);
+		dev_dbg(&hdmi->pdev->dev, "%s: Resolution changed\n", __func__);
 		new_screen = true;
 	}
 
@@ -2377,6 +2378,7 @@ static void mxc_hdmi_setup(struct mxc_hdmi *hdmi, unsigned long event)
 			memcpy(&hdmi->prev_virtual, &hdmi->fbi->var.xres_virtual, sizeof(hdmi->prev_virtual));
 		else
 			memset(&hdmi->prev_virtual, 0, sizeof(hdmi->prev_virtual));
+
 		if (!list_empty(&hdmi->fbi->modelist)) {
 			edid_mode = mxc_fb_find_nearest_mode(&m, &hdmi->fbi->modelist);
 			pr_debug("edid mode ");
diff --git a/include/video/mxc_edid.h b/include/video/mxc_edid.h
index 01a487e..f00d142 100644
--- a/include/video/mxc_edid.h
+++ b/include/video/mxc_edid.h
@@ -111,5 +111,4 @@ int mxc_edid_parse_ext_blk(unsigned char *edid, struct mxc_edid_cfg *cfg,
 	struct fb_monspecs *specs);
 const struct fb_videomode *mxc_fb_find_nearest_mode(const struct fb_videomode *mode,
 						struct list_head *head);
-int mxc_fb_mode_is_equal_res(const struct fb_videomode *mode1, const struct fb_videomode *mode2);
 #endif
-- 
1.9.1

