From a86bd823319cf21eec118f238e2d3e97ede3690f Mon Sep 17 00:00:00 2001
From: Rudi <r.ihle@s-t.de>
Date: Thu, 24 Dec 2015 08:13:24 +0100
Subject: [PATCH] video: mxc_hdmi: Use common function to insert video modes

To simplify further development we move the mode list entry
creation into a single function.

Signed-off-by: Rudi <r.ihle@s-t.de>
---
 drivers/video/mxc/mxc_hdmi.c | 145 ++++++++++++++++++-------------------------
 1 file changed, 60 insertions(+), 85 deletions(-)

diff --git a/drivers/video/mxc/mxc_hdmi.c b/drivers/video/mxc/mxc_hdmi.c
index 55c39e1..f71c1dd 100644
--- a/drivers/video/mxc/mxc_hdmi.c
+++ b/drivers/video/mxc/mxc_hdmi.c
@@ -1740,7 +1740,8 @@ static int mxc_edid_read_internal(struct mxc_hdmi *hdmi, unsigned char *edid,
 
 static int mxc_hdmi_read_edid(struct mxc_hdmi *hdmi)
 {
-	int ret;
+	int ret, n;
+	struct fb_videomode *mode;
 	u8 edid_old[HDMI_EDID_LEN];
 	u8 clkdis;
 
@@ -1774,19 +1775,36 @@ static int mxc_hdmi_read_edid(struct mxc_hdmi *hdmi)
 
 	}
 
-	if (ret < 0)
+	if (ret < 0) {
+		dev_err(&hdmi->pdev->dev, "Failed to read EDID\n");
 		return HDMI_EDID_FAIL;
+	}
 
 	if (memcmp(edid_old, hdmi->edid, HDMI_EDID_LEN) == 0) {
-		dev_info(&hdmi->pdev->dev, "same edid\n");
+		dev_info(&hdmi->pdev->dev, "Same EDID\n");
 		return HDMI_EDID_SAME;
 	}
 
 	if (hdmi->fbi->monspecs.modedb_len == 0) {
-		dev_info(&hdmi->pdev->dev, "No modes read from edid\n");
+		dev_warn(&hdmi->pdev->dev, "No modes read from EDID\n");
 		return HDMI_EDID_NO_MODES;
 	}
 
+	/* TODO: Is this really neccessary? */
+	mode = hdmi->fbi->monspecs.modedb;
+	n = hdmi->fbi->monspecs.modedb_len;
+	while (n--) {
+		if ((mode->flag & FB_MODE_IS_STANDARD) &&
+		    !(mode->vmode & FB_VMODE_ASPECT_MASK)) {
+			if (mode->yres == (mode->xres * 3)/4)
+				mode->vmode |= FB_VMODE_ASPECT_4_3;
+			else
+				mode->vmode |= FB_VMODE_ASPECT_16_9;
+		}
+
+		mode++;
+	}
+
 	return HDMI_EDID_SUCCESS;
 }
 
@@ -1928,51 +1946,53 @@ static void mxc_hdmi_notify_fb(struct mxc_hdmi *hdmi, bool force_all)
 	dev_dbg(&hdmi->pdev->dev, "%s exit\n", __func__);
 }
 
-static void mxc_hdmi_edid_rebuild_modelist(struct mxc_hdmi *hdmi)
+static void mxc_hdmi_create_modelist(struct mxc_hdmi *hdmi, int from_edid)
 {
-	int i, vic;
-	struct fb_videomode *mode;
+	struct fb_videomode mode;
+	int i, vic, mode_count = ARRAY_SIZE(mxc_cea_mode);
+	const struct fb_videomode *mode_data = mxc_cea_mode;
+
+	if (from_edid) {
+		mode_data = hdmi->fbi->monspecs.modedb;
+		mode_count = hdmi->fbi->monspecs.modedb_len;
+	}
 
 	dev_dbg(&hdmi->pdev->dev, "%s\n", __func__);
 
 	console_lock();
 
 	fb_destroy_modelist(&hdmi->fbi->modelist);
+
+	/* Always insert VGA mode */
 	fb_add_videomode(&vga_mode, &hdmi->fbi->modelist);
 
-	for (i = 0; i < hdmi->fbi->monspecs.modedb_len; i++) {
-		/*
-		 * We might check here if mode is supported by HDMI.
-		 * We do not currently support interlaced modes.
-		 * And add CEA modes in the modelist.
-		 */
-		mode = &hdmi->fbi->monspecs.modedb[i];
-
-		vic = mxc_edid_mode_to_vic(mode);
-		if (hdmi->edid_cfg.hdmi_cap &&
-		    (vic == 0))
+	for (i = 0; i < mode_count; i++) {
+		vic = from_edid ? mxc_edid_mode_to_vic(&mode_data[i]) : i;
+
+		if (mode_data[i].xres == 0 ||
+		    (hdmi->edid_cfg.hdmi_cap && vic == 0))
 			continue;
 
-		if (!(mode->vmode & FB_VMODE_ASPECT_MASK)) {
-			if (mode->yres == (mode->xres * 3)/4)
-				mode->vmode |= FB_VMODE_ASPECT_4_3;
-			else
-				mode->vmode |= FB_VMODE_ASPECT_16_9;
-		}
+		mode = mode_data[i];
+
+		/* TODO: Discuss if we should always set default modes as standard */
+		if (!from_edid /*&& ignore_edid*/)
+			mode.flag |= FB_MODE_IS_STANDARD;
 
-		if (fb_add_videomode(mode, &hdmi->fbi->modelist))
+		if (fb_add_videomode(&mode, &hdmi->fbi->modelist))
 			continue;
 
 		dev_dbg(&hdmi->pdev->dev, "Added mode: %d, vic: %d", i, vic);
 		dev_dbg(&hdmi->pdev->dev,
-			"xres = %d, yres = %d, ratio = %s, freq = %d, vmode = %d, flag = %d\n",
-			hdmi->fbi->monspecs.modedb[i].xres,
-			hdmi->fbi->monspecs.modedb[i].yres,
-			mode->vmode & FB_VMODE_ASPECT_4_3 ? "4/3" :
-			    mode->vmode & FB_VMODE_ASPECT_16_9 ? "16/9" : "n/a",
-			hdmi->fbi->monspecs.modedb[i].refresh,
-			hdmi->fbi->monspecs.modedb[i].vmode,
-			hdmi->fbi->monspecs.modedb[i].flag);
+			"xres = %d, yres = %d, scan = %c, ratio = %s, freq = %d, vmode = %d, flag = %d\n",
+			mode.xres,
+			mode.yres,
+			mode.vmode & FB_VMODE_INTERLACED ? 'i' : 'p',
+			mode.vmode & FB_VMODE_ASPECT_4_3 ? "4/3" :
+			    mode.vmode & FB_VMODE_ASPECT_16_9 ? "16/9" : "n/a",
+			mode.refresh,
+			mode.vmode,
+			mode.flag);
 	}
 
 	fb_new_modelist(hdmi->fbi);
@@ -1986,36 +2006,6 @@ static void  mxc_hdmi_default_edid_cfg(struct mxc_hdmi *hdmi)
 	hdmi->edid_cfg.hdmi_cap = true;
 }
 
-static void  mxc_hdmi_default_modelist(struct mxc_hdmi *hdmi)
-{
-	u32 i;
-	struct fb_videomode mode;
-
-	dev_dbg(&hdmi->pdev->dev, "%s\n", __func__);
-
-	/* If not EDID data read, set up default modelist  */
-	dev_info(&hdmi->pdev->dev, "No modes read from edid\n");
-	dev_info(&hdmi->pdev->dev, "create default modelist\n");
-
-	console_lock();
-
-	fb_destroy_modelist(&hdmi->fbi->modelist);
-
-	/*Add all no interlaced CEA mode to default modelist */
-	for (i = 0; i < ARRAY_SIZE(mxc_cea_mode); i++) {
-		mode = mxc_cea_mode[i];
-		if (!(mode.vmode & FB_VMODE_INTERLACED) && (mode.xres != 0)) {
-			if (ignore_edid)
-				mode.flag |= FB_MODE_IS_STANDARD;
-			fb_add_videomode(&mode, &hdmi->fbi->modelist);
-		}
-	}
-
-	fb_new_modelist(hdmi->fbi);
-
-	console_unlock();
-}
-
 static void mxc_hdmi_set_mode(struct mxc_hdmi *hdmi, int edid_status)
 {
 	const struct fb_videomode *mode;
@@ -2108,7 +2098,7 @@ static void mxc_hdmi_cable_connected(struct mxc_hdmi *hdmi)
 	/* HDMI Initialization Steps D, E, F */
 	switch (edid_status) {
 	case HDMI_EDID_SUCCESS:
-		mxc_hdmi_edid_rebuild_modelist(hdmi);
+		mxc_hdmi_create_modelist(hdmi, true);
 		break;
 
 	/* Nothing to do if EDID same */
@@ -2120,7 +2110,7 @@ static void mxc_hdmi_cable_connected(struct mxc_hdmi *hdmi)
 		/* No break here  */
 	case HDMI_EDID_NO_MODES:
 	default:
-		mxc_hdmi_default_modelist(hdmi);
+		mxc_hdmi_create_modelist(hdmi, false);
 		break;
 	}
 
@@ -2676,7 +2666,6 @@ static int mxc_hdmi_disp_init(struct mxc_dispdrv_handle *disp,
 			      struct mxc_dispdrv_setting *setting)
 {
 	int ret = 0;
-	u32 i;
 	const struct fb_videomode *mode;
 	struct fb_videomode m;
 	struct mxc_hdmi *hdmi = mxc_dispdrv_getdata(disp);
@@ -2787,31 +2776,17 @@ static int mxc_hdmi_disp_init(struct mxc_dispdrv_handle *disp,
 
 	spin_lock_init(&hdmi->irq_lock);
 
-	/* Set the default mode and modelist when disp init. */
+	/* Create default modelist */
+	mxc_hdmi_create_modelist(hdmi, false);
+
+	/* Set the default mode when disp init. */
 	fb_find_mode(&hdmi->fbi->var, hdmi->fbi,
 		     hdmi->dft_mode_str, NULL, 0, NULL,
 		     hdmi->default_bpp);
-
-	console_lock();
-
-	fb_destroy_modelist(&hdmi->fbi->modelist);
-
-	/*Add all no interlaced CEA mode to default modelist */
-	for (i = 0; i < ARRAY_SIZE(mxc_cea_mode); i++) {
-		mode = &mxc_cea_mode[i];
-		if (mode->xres != 0) {
-			struct fb_videomode m = *mode;
-			m.flag |= FB_MODE_IS_STANDARD;
-			fb_add_videomode(&m, &hdmi->fbi->modelist);
-		}
-	}
-
-	console_unlock();
-
-	/* Find a nearest mode in default modelist */
 	fb_var_to_videomode(&m, &hdmi->fbi->var);
 	hdmi->dft_mode_set = false;
 
+	/* Find a nearest mode in default modelist */
 	mode = fb_find_nearest_mode(&m, &hdmi->fbi->modelist);
 	if (!mode) {
 		pr_err("%s: could not find mode in modelist\n", __func__);
-- 
1.9.1

