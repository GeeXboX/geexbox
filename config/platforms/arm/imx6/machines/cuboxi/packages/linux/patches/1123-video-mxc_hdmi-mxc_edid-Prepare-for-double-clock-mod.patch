From 604a8ed3318f9ce0cd952c7c222dc11bd38f0829 Mon Sep 17 00:00:00 2001
From: Rudi <r.ihle@s-t.de>
Date: Tue, 29 Dec 2015 09:57:04 +0100
Subject: [PATCH] video: mxc_hdmi/mxc_edid: Prepare for double-clock modes

Certain low resolution modes require double clocking in order meet
the minimum speed requirements of the interface. This patch prepares
support for those, but keeps them disabled.

Signed-off-by: Rudi <r.ihle@s-t.de>
---
 drivers/video/mxc/mxc_edid.c | 93 +++++++++++++++++++++++++++++++-------------
 drivers/video/mxc/mxc_hdmi.c | 14 ++++---
 include/video/mxc_edid.h     |  2 +
 3 files changed, 76 insertions(+), 33 deletions(-)

diff --git a/drivers/video/mxc/mxc_edid.c b/drivers/video/mxc/mxc_edid.c
index aa6d24f..3baac3c 100644
--- a/drivers/video/mxc/mxc_edid.c
+++ b/drivers/video/mxc/mxc_edid.c
@@ -73,23 +73,23 @@ const struct fb_videomode mxc_cea_mode[64] = {
 	},
 	/* #6: 720(1440)x480iH@59.94/60Hz 4:3 */
 	[6] = {
-		NULL, 60, 1440, 480, 37000, 38, 114, 8, 31, 124, 6, 0,
-		FB_VMODE_INTERLACED | FB_VMODE_ASPECT_4_3, 0,
+		NULL, 60, 720, 480, 37000, 38, 114, 8, 31, 124, 6, 0,
+		FB_VMODE_INTERLACED | FB_VMODE_ASPECT_4_3 | FB_VMODE_DBLCLK, 0,
 	},
 	/* #7: 720(1440)x480iH@59.94/60Hz 16:9 */
 	[7] = {
-		NULL, 60, 1440, 480, 37000, 38, 114, 8, 31, 124, 6, 0,
-		FB_VMODE_INTERLACED | FB_VMODE_ASPECT_16_9, 0,
+		NULL, 60, 720, 480, 37000, 38, 114, 8, 31, 124, 6, 0,
+		FB_VMODE_INTERLACED | FB_VMODE_ASPECT_16_9 | FB_VMODE_DBLCLK, 0,
 	},
 	/* #8: 720(1440)x240pH@59.94/60Hz 4:3 */
 	[8] = {
-		NULL, 60, 1440, 240, 37000, 114, 38, 15, 4, 124, 3, 0,
-		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_4_3, 0,
+		NULL, 60, 720, 240, 37000, 114, 38, 15, 4, 124, 3, 0,
+		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_4_3 | FB_VMODE_DBLCLK, 0,
 	},
 	/* #9: 720(1440)x240pH@59.94/60Hz 16:9 */
 	[9] = {
-		NULL, 60, 1440, 240, 37000, 114, 38, 15, 4, 124, 3, 0,
-		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_16_9, 0,
+		NULL, 60, 720, 240, 37000, 114, 38, 15, 4, 124, 3, 0,
+		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_16_9 | FB_VMODE_DBLCLK, 0,
 	},
 	/* #14: 1440x480p@59.94/60Hz 4:3 */
 	[14] = {
@@ -131,30 +131,30 @@ const struct fb_videomode mxc_cea_mode[64] = {
 	},
 	/* #21: 720(1440)x576i@50Hz */
 	[21] = {
-		NULL, 50, 1440, 576, 37037, 24, 138, 4, 39, 126, 6, 0,
-		FB_VMODE_INTERLACED | FB_VMODE_ASPECT_4_3, 0,
+		NULL, 50, 720, 576, 37037, 24, 138, 4, 39, 126, 6, 0,
+		FB_VMODE_INTERLACED | FB_VMODE_ASPECT_4_3 | FB_VMODE_DBLCLK, 0,
 	},
 	/* #22: 720(1440)x576i@50Hz */
 	[22] = {
-		NULL, 50, 1440, 576, 37037, 24, 138, 4, 39, 126, 6, 0,
-		FB_VMODE_INTERLACED | FB_VMODE_ASPECT_16_9, 0,
+		NULL, 50, 720, 576, 37037, 24, 138, 4, 39, 126, 6, 0,
+		FB_VMODE_INTERLACED | FB_VMODE_ASPECT_16_9 | FB_VMODE_DBLCLK, 0,
 	},
 	/* #23: 720(1440)x288pH@50Hz 4:3 */
 	[23] = {
-		NULL, 50, 1440, 288, 37037, 138, 24, 19, 2, 126, 3, 0,
-		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_4_3, 0,
+		NULL, 50, 720, 288, 37037, 138, 24, 19, 2, 126, 3, 0,
+		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_4_3 | FB_VMODE_DBLCLK, 0,
 	},
 	/* #24: 720(1440)x288pH@50Hz 16:9 */
 	[24] = {
-		NULL, 50, 1440, 288, 37037, 138, 24, 19, 2, 126, 3, 0,
-		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_16_9, 0,
+		NULL, 50, 720, 288, 37037, 138, 24, 19, 2, 126, 3, 0,
+		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_16_9 | FB_VMODE_DBLCLK, 0,
 	},
-	/* #29: 720(1440)x576pH@50Hz 4:3 */
+	/* #29: 1440x576p@50Hz 4:3 */
 	[29] = {
 		NULL, 50, 1440, 576, 18518, 136, 24, 39, 5, 128, 5, 0,
 		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_4_3, 0,
 	},
-	/* #30: 720(1440)x576pH@50Hz 16:9 */
+	/* #30: 1440x576p@50Hz 16:9 */
 	[30] = {
 		NULL, 50, 1440, 576, 18518, 136, 24, 39, 5, 128, 5, 0,
 		FB_VMODE_NONINTERLACED | FB_VMODE_ASPECT_16_9, 0,
@@ -210,9 +210,9 @@ static int mxc_edid_fb_mode_is_equal(bool use_aspect,
 	u32 mask;
 
 	if (use_aspect)
-		mask = ~FB_VMODE_FRACTIONAL;
+		mask = ~(FB_VMODE_FRACTIONAL | FB_VMODE_DBLCLK);
 	else
-		mask = ~(FB_VMODE_FRACTIONAL | FB_VMODE_ASPECT_MASK);
+		mask = ~(FB_VMODE_FRACTIONAL | FB_VMODE_DBLCLK | FB_VMODE_ASPECT_MASK);
 
 	return (mode1->xres         == mode2->xres &&
 		mode1->yres         == mode2->yres &&
@@ -796,16 +796,12 @@ const struct fb_videomode *mxc_fb_find_nearest_mode(const struct fb_videomode *m
 	u32 d, diff = ~0, diff_refresh = ~0;
 	int i, refresh = mode->refresh;
 	static const u32 masks[] = {
-		~(FB_VMODE_FRACTIONAL),
-		~(FB_VMODE_FRACTIONAL | FB_VMODE_ASPECT_MASK),
-		~(FB_VMODE_FRACTIONAL | FB_VMODE_INTERLACED),
-		~(FB_VMODE_FRACTIONAL | FB_VMODE_INTERLACED | FB_VMODE_ASPECT_MASK)
+		~(FB_VMODE_FRACTIONAL | FB_VMODE_DBLCLK),
+		~(FB_VMODE_FRACTIONAL | FB_VMODE_DBLCLK | FB_VMODE_ASPECT_MASK),
+		~(FB_VMODE_FRACTIONAL | FB_VMODE_DBLCLK | FB_VMODE_INTERLACED),
+		~(FB_VMODE_FRACTIONAL | FB_VMODE_DBLCLK | FB_VMODE_INTERLACED | FB_VMODE_ASPECT_MASK)
 	};
 
-	if ((mode->flag & FB_MODE_IS_FROM_VAR) &&
-	    (mode->vmode & FB_VMODE_FRACTIONAL))
-		refresh--;
-
 	for (i = 0; i < ARRAY_SIZE(masks); i++) {
 		list_for_each(pos, head) {
 			modelist = list_entry(pos, struct fb_modelist, list);
@@ -837,3 +833,44 @@ const struct fb_videomode *mxc_fb_find_nearest_mode(const struct fb_videomode *m
 }
 EXPORT_SYMBOL(mxc_fb_find_nearest_mode);
 
+void mxc_fb_var_to_videomode(struct fb_videomode *mode, const struct fb_var_screeninfo *var)
+{
+	u32 pixclock, hfreq, htotal, vtotal;
+
+	mode->name = NULL;
+	mode->xres = var->xres;
+	mode->yres = var->yres;
+	mode->pixclock = var->pixclock;
+	mode->hsync_len = var->hsync_len;
+	mode->vsync_len = var->vsync_len;
+	mode->left_margin = var->left_margin;
+	mode->right_margin = var->right_margin;
+	mode->upper_margin = var->upper_margin;
+	mode->lower_margin = var->lower_margin;
+	mode->sync = var->sync;
+	mode->vmode = var->vmode & FB_VMODE_MASK;
+	mode->flag = FB_MODE_IS_FROM_VAR;
+	mode->refresh = 0;
+
+	if (!var->pixclock)
+		return;
+
+	/* Note: mxcPICOS2KHZ() is not used here by purpose */
+	pixclock = PICOS2KHZ(var->pixclock) * 1000;
+
+	htotal = var->xres + var->right_margin + var->hsync_len +
+		var->left_margin;
+	vtotal = var->yres + var->lower_margin + var->vsync_len +
+		var->upper_margin;
+
+	if (var->vmode & FB_VMODE_DBLCLK)
+		htotal += var->xres;
+	if (var->vmode & FB_VMODE_INTERLACED)
+		vtotal /= 2;
+	if (var->vmode & FB_VMODE_DOUBLE)
+		vtotal *= 2;
+
+	hfreq = pixclock/htotal;
+	mode->refresh = hfreq/vtotal - ((var->vmode & FB_VMODE_FRACTIONAL) ? 1 : 0);
+}
+EXPORT_SYMBOL(mxc_fb_var_to_videomode);
diff --git a/drivers/video/mxc/mxc_hdmi.c b/drivers/video/mxc/mxc_hdmi.c
index 42e7e06..0cd6474 100644
--- a/drivers/video/mxc/mxc_hdmi.c
+++ b/drivers/video/mxc/mxc_hdmi.c
@@ -1421,7 +1421,7 @@ static void hdmi_config_AVI(struct mxc_hdmi *hdmi)
 
 	dev_dbg(&hdmi->pdev->dev, "set up AVI frame\n");
 
-	fb_var_to_videomode(&mode, &hdmi->fbi->var);
+	mxc_fb_var_to_videomode(&mode, &hdmi->fbi->var);
 
 	if (!(mode.vmode & FB_VMODE_ASPECT_MASK)) {
 		if( mode.xres <= (mode.yres / 3) * 4)
@@ -1548,7 +1548,7 @@ static void hdmi_av_composer(struct mxc_hdmi *hdmi)
 
 	dev_dbg(&hdmi->pdev->dev, "%s\n", __func__);
 
-	fb_var_to_videomode(&fb_mode, &fbi->var);
+	mxc_fb_var_to_videomode(&fb_mode, &fbi->var);
 
 	vmode->mHSyncPolarity = ((fb_mode.sync & FB_SYNC_HOR_HIGH_ACT) != 0);
 	vmode->mVSyncPolarity = ((fb_mode.sync & FB_SYNC_VERT_HIGH_ACT) != 0);
@@ -1971,6 +1971,10 @@ static void mxc_hdmi_create_modelist(struct mxc_hdmi *hdmi, int from_edid)
 
 		mode = mode_data[i];
 
+		/* TODO: double clocking currently not implemented in IPU */
+		if (mode.vmode & FB_VMODE_DBLCLK)
+			continue;
+
 		/* for dual aspect ratio modes, insert the first one only */
 		if (mode.vmode & FB_VMODE_ASPECT_MASK) {
 			skip = 0;
@@ -2066,7 +2070,7 @@ static void mxc_hdmi_set_mode(struct mxc_hdmi *hdmi, int edid_status)
 			fb_videomode_to_var(&var, mode);
 	}
 
-	fb_var_to_videomode(&m, &var);
+	mxc_fb_var_to_videomode(&m, &var);
 	dump_fb_videomode(&m);
 	mode = mxc_fb_find_nearest_mode(&m, &hdmi->fbi->modelist);
 
@@ -2358,7 +2362,7 @@ static void mxc_hdmi_setup(struct mxc_hdmi *hdmi, unsigned long event)
 
 	dev_dbg(&hdmi->pdev->dev, "%s\n", __func__);
 
-	fb_var_to_videomode(&m, &hdmi->fbi->var);
+	mxc_fb_var_to_videomode(&m, &hdmi->fbi->var);
 	dump_fb_videomode(&m);
 
 	dev_dbg(&hdmi->pdev->dev, "%s - video mode changed\n", __func__);
@@ -2831,7 +2835,7 @@ static int mxc_hdmi_disp_init(struct mxc_dispdrv_handle *disp,
 	fb_find_mode(&hdmi->fbi->var, hdmi->fbi,
 		     hdmi->dft_mode_str, NULL, 0,
 		     &vga_mode, hdmi->default_bpp);
-	fb_var_to_videomode(&m, &hdmi->fbi->var);
+	mxc_fb_var_to_videomode(&m, &hdmi->fbi->var);
 	if (m.vmode & FB_VMODE_INTERLACED)
 		m.refresh = (m.refresh / 2) - 2;
 	hdmi->dft_mode_set = false;
diff --git a/include/video/mxc_edid.h b/include/video/mxc_edid.h
index f00d142..b1b4b8e 100644
--- a/include/video/mxc_edid.h
+++ b/include/video/mxc_edid.h
@@ -31,6 +31,7 @@
 #define FB_VMODE_ASPECT_4_3	0x10
 #define FB_VMODE_ASPECT_16_9	0x20
 #define FB_VMODE_ASPECT_MASK	(FB_VMODE_ASPECT_4_3 | FB_VMODE_ASPECT_16_9)
+#define FB_VMODE_DBLCLK	0x40
 
 enum cea_audio_coding_types {
 	AUDIO_CODING_TYPE_REF_STREAM_HEADER	=  0,
@@ -111,4 +112,5 @@ int mxc_edid_parse_ext_blk(unsigned char *edid, struct mxc_edid_cfg *cfg,
 	struct fb_monspecs *specs);
 const struct fb_videomode *mxc_fb_find_nearest_mode(const struct fb_videomode *mode,
 						struct list_head *head);
+void mxc_fb_var_to_videomode(struct fb_videomode *mode, const struct fb_var_screeninfo *var);
 #endif
-- 
1.9.1

