set -e

if [ -n "$DEBUG_PKGS" ]; then
  if [ "$DEBUG_PKGS" = "all" ]; then
    DEBUG="yes"
  else
    for pkg in $DEBUG_PKGS; do
      [ "$pkg" = "$1" ] && DEBUG="yes"
    done
  fi
else
  DEBUG="no"
fi

[ "$TARGET_LIBC" = eglibc ] && USE_EGLIBC=yes
[ "$WIFI" = no ] && NDISWRAPPER=no && WPA_SUPPLICANT=no
[ "$LIVE555" = yes ] && TARGET_LIBC=glibc && TOOLCHAIN_CXX=yes
[ "$DEBUG" = yes ] && GDB=yes && OPTIMIZATIONS=no
[ "$EMULATORS" = yes ] && TOOLCHAIN_CXX=yes
[ "$GAMES" = yes ] && TOOLCHAIN_CXX=yes
[ "$TARGET_ARCH" = powerpc ] && XORG=no
[ "$TARGET_ARCH" = powerpc64 ] && XORG=no && TARGET_LIBC=glibc
[ "$TARGET_ARCH" = x86_64 ] && CONSOLE=no && XORG=yes
[ "$TARGET_ARCH" != i386 ] && INSTALLATOR=no
[ "$VDPAU" = yes ] && XORG=yes && NVIDIA=yes && TOOLCHAIN_CXX=yes
[ "$NVIDIA" = yes -a "$TARGET_LIBC" = uclibc ] && TARGET_LIBC=glibc
[ "$VDR" = yes ] && TARGET_LIBC=glibc && TOOLCHAIN_CXX=yes
[ "$UNRAR" = yes ] && TOOLCHAIN_CXX=yes
[ "$WIIMOTE" = yes ] && BLUETOOTH=yes
[ "$DEVTOOLS" = yes ] && STATS=yes && STATS_ENABLED=yes
[ "$USE_EGLIBC" = yes ] && TARGET_LIBC=eglibc
[ "$TARGET_ARCH" = arm ] && XORG_DRIVERS="fbdev omapfb" && WIFI=no && INSTALLATOR=no && STATS=no && PULSEAUDIO=no

. config/toolchain

GEEXBOX_VERSION=`cat VERSION`
CONFIG=config
SCRIPTS=scripts
PACKAGES=packages
SOURCES=sources
BUILD_NOARCH=build.host
if [ -z "$BUILD" ]; then
  BUILD_BASE=build
  BUILD=$BUILD_BASE.$TARGET_ARCH.$TARGET_LIBC
  [ -n "$TARGET_PLATFORM" -a "$TARGET_PLATFORM" != generic ] && \
    BUILD=$BUILD_BASE.$TARGET_PLATFORM.$TARGET_LIBC
fi
STAMPS_NOARCH=.stamps
STAMPS=$BUILD/$STAMPS_NOARCH
DOCS=DOCS
ROOT=`pwd`
TOOLCHAIN=$BUILD/toolchain
SYSROOT_PREFIX=$ROOT/$TOOLCHAIN/$TARGET_NAME/sysroot
LIB_PREFIX=$SYSROOT_PREFIX/usr/local
TARGET_PREFIX=$ROOT/$TOOLCHAIN/bin/$TARGET_NAME-
ROOTFS=$ROOT/$BUILD/rootfs
PKGROOT=$ROOT/$BUILD/packages
DEVPKGROOT=$ROOT/$BUILD/devpackages
CONFIG_PLATFORM=$ROOT/$CONFIG/platforms/$TARGET_PLATFORM

XORG_PATH_ENCODINGS=/usr/share/fonts/X11/encodings
XORG_PATH_FONTS=/usr/share/X11/fonts
XORG_PATH_MAPS=$XORG_PATH_FONTS/util
XORG_PATH_DRI=/usr/lib/dri
XORG_PATH_EGL=/usr/lib/egl
XORG_PATH_VAAPI=/usr/lib/va
XORG_PATH_XKB=/usr/share/X11/xkb
XORG_PATH_XKB_OUTPUT=/var/lib/xkb
XORG_PATH_XKB_CACHE=/var/cache/xkb
XORG_PATH_RGB=/usr/lib/X11/rgb
XORG_PATH_MODULES=/usr/lib/xorg/modules
XORG_PATH_DRIVERS=/usr/lib/xorg/modules/drivers
XORG_PATH_ICONS=/usr/share/X11/icons
XORG_PATH_FDI=/usr/share/hal/fdi/policy
[ -z "$BOOT_DEFAULT" ] && BOOT_DEFAULT=hdtv

TOOLCHAIN_LANGUAGES=c
[ "$TOOLCHAIN_CXX" = yes ] && TOOLCHAIN_LANGUAGES=${TOOLCHAIN_LANGUAGES},c++

TARGET_CC=${TARGET_PREFIX}gcc
TARGET_CXX=${TARGET_PREFIX}g++
TARGET_LD=${TARGET_PREFIX}ld
TARGET_AS=${TARGET_PREFIX}as
TARGET_AR=${TARGET_PREFIX}ar
TARGET_NM=${TARGET_PREFIX}nm
TARGET_RANLIB=${TARGET_PREFIX}ranlib
TARGET_OBJCOPY=${TARGET_PREFIX}objcopy
TARGET_STRIP=${TARGET_PREFIX}strip
TARGET_CPPFLAGS=
TARGET_CFLAGS="$GCC_FLAGS"
TARGET_CXXFLAGS="$GCC_FLAGS"
TARGET_LDFLAGS=

TARGET_INCLUDES="-I${LIB_PREFIX}/include -I${SYSROOT_PREFIX}/usr/include"
TARGET_LIBS="-L${SYSROOT_PREFIX}/lib -L${SYSROOT_PREFIX}/usr/lib -L${LIB_PREFIX}/lib"

TARGET_CFLAGS="$TARGET_CFLAGS $TARGET_INCLUDES"
TARGET_CXXFLAGS="$TARGET_CXXFLAGS $TARGET_INCLUDES"
TARGET_LDFLAGS="$TARGET_LDFLAGS $TARGET_LIBS"

if [ "$DEBUG" = yes ]; then
  TARGET_STRIP=true
else
  TARGET_LDFLAGS="$TARGET_LDFLAGS -s"
fi

# Autodetect local compiler if not set
[ -z "$LOCAL_CC" ] && LOCAL_CC=`which gcc`
[ -z "$LOCAL_CXX" ] && LOCAL_CXX=`which g++`

HOST_AWK=gawk
HOST_CC=$ROOT/$TOOLCHAIN/bin/host-gcc
HOST_CXX=$ROOT/$TOOLCHAIN/bin/host-g++
HOST_LD=ld
HOST_AS=as
HOST_AR=ar
HOST_NM=nm
HOST_RANLIB=ranlib
HOST_OBJCOPY=objcopy
HOST_STRIP=strip
HOST_CPPFLAGS=""
HOST_CFLAGS="-O2 -Wall -pipe"
HOST_LDFLAGS=""

export CCACHE_DIR=$ROOT/$BUILD/.ccache
export MAKEFLAGS=-j$CONCURRENCY_MAKE_LEVEL

if [ -z "$PATH" -o "$PATH" = "${PATH#$ROOT/$TOOLCHAIN/bin:}" ]; then
  export PATH="$ROOT/$TOOLCHAIN/bin:$PATH"
fi

setup_toolchain() {
  if [ "$1" = target ]; then
    export CC=$TARGET_CC
    export CXX=$TARGET_CXX
    export LD=$TARGET_LD
    export AS=$TARGET_AS
    export AR=$TARGET_AR
    export NM=$TARGET_NM
    export RANLIB=$TARGET_RANLIB
    export OBJCOPY=$TARGET_OBJCOPY
    export STRIP=$TARGET_STRIP
    export CPPFLAGS="$TARGET_CPPFLAGS"
    export CFLAGS="$TARGET_CFLAGS"
    export CXXFLAGS="$TARGET_CXXFLAGS"
    export LDFLAGS="$TARGET_LDFLAGS"
    export SDL_CONFIG=$LIB_PREFIX/bin/sdl-config
    export DVDREAD_CONFIG=$LIB_PREFIX/bin/dvdread-config
    export DVDNAV_CONFIG=$LIB_PREFIX/bin/dvdnav-config
    export XSLT_CONFIG=$LIB_PREFIX/bin/xslt-config
    export FREETYPE_CONFIG=$ROOT/$TOOLCHAIN/bin/freetype-config
    export DIRECTFB_CONFIG=$ROOT/$TOOLCHAIN/bin/directfb-config
    export PKG_CONFIG=$ROOT/$TOOLCHAIN/bin/pkg-config
    export PKG_CONFIG_PATH=$LIB_PREFIX/lib/pkgconfig
  elif [ "$1" = host ]; then
    export AWK=$HOST_AWK
    export CC=$HOST_CC
    export CXX=$HOST_CXX
    export LD=$HOST_LD
    export AS=$HOST_AS
    export AR=$HOST_AR
    export NM=$HOST_NM
    export RANLIB=$HOST_RANLIB
    export OBJCOPY=$HOST_OBJCOPY
    export STRIP=$HOST_STRIP
    export CPPFLAGS="$HOST_CPPFLAGS"
    export CFLAGS="$HOST_CFLAGS"
    export CXXFLAGS="$HOST_CXXFLAGS"
    export LDFLAGS="$HOST_LDFLAGS"
    export PKG_CONFIG=/usr/bin/pkg-config
    export PKG_CONFIG_PATH=""
  fi
}
setup_toolchain target

SILENT_OUT=3
VERBOSE_OUT=4
if [ "$VERBOSE" = yes ]; then
  exec 3>&1
  exec 4>&2
else
  exec 3>&2
  exec 4>/dev/null
fi
INDENT_SIZE=4

GEEXBOX_SRCS=http://www.geexbox.org/src/$GEEXBOX_VERSION
[ "$GEEXBOX_VERSION" = devel ] && GEEXBOX_VERSION=$GEEXBOX_VERSION-`date +%Y%m%d`-r`hg tip --template={rev}`
[ -n "$GEEXBOX_VERSION_EXTRA" ] && GEEXBOX_VERSION=$GEEXBOX_VERSION-$GEEXBOX_VERSION_EXTRA

VERSION_SUFFIX=$TARGET_ARCH.$TARGET_LIBC
[ -n "$TARGET_PLATFORM" ] && VERSION_SUFFIX=$TARGET_PLATFORM.$TARGET_LIBC

ISO=geexbox-$GEEXBOX_VERSION-$VERSION_SUFFIX.iso
GENERATOR_NAME=geexbox-generator-$GEEXBOX_VERSION.$VERSION_SUFFIX
FLAT_NAME=geexbox-flat-$GEEXBOX_VERSION.$VERSION_SUFFIX
PXE_NAME=geexbox-pxe/GEEXBOX.$VERSION_SUFFIX
VMX_NAME=geexbox-vmx

HOST_NAME_CACHE=$TOOLCHAIN/share/configtools/host_name
if [ -f $HOST_NAME_CACHE ]; then
  HOST_NAME=`cat $HOST_NAME_CACHE`
elif [ -x $TOOLCHAIN/share/configtools/config.guess ]; then
  HOST_NAME=`$TOOLCHAIN/share/configtools/config.guess`
fi

GST_VERSION=0.10

PACKAGE_URL="$PACKAGES/$1/url"
[ -r "$PACKAGE_URL.$TARGET_ARCH" ] && PACKAGE_URL="$PACKAGE_URL.$TARGET_ARCH"
[ -n "$TARGET_PLATFORM" -a -r "$PACKAGE_URL.$TARGET_PLATFORM" ] && \
PACKAGE_URL="$PACKAGE_URL.$TARGET_PLATFORM"

. config/functions
