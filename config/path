set -e

test -f config/target-$TARGET_PLATFORM && . config/target-$TARGET_PLATFORM

if [ -n "$DEBUG_PKGS" ]; then
  if [ "$DEBUG_PKGS" = "all" ]; then
    DEBUG="yes"
  else
    for pkg in $DEBUG_PKGS; do
      [ "$pkg" = "$1" ] && DEBUG="yes"
    done
  fi
else
  DEBUG="no"
fi

[ "$TARGET_LIBC" = eglibc ] && USE_EGLIBC=yes
[ "$WIFI" = no ] && NDISWRAPPER=no && WPA_SUPPLICANT=no
[ "$LIVE555" = yes ] && TARGET_LIBC=glibc && TOOLCHAIN_CXX=yes
[ "$DEBUG" = yes ] && GDB=yes && OPTIMIZATIONS=no
[ "$EMULATORS" = yes ] && TOOLCHAIN_CXX=yes
[ "$GAMES" = yes ] && TOOLCHAIN_CXX=yes
[ "$TARGET_ARCH" = powerpc ] && XORG=no
[ "$TARGET_ARCH" = powerpc64 ] && XORG=no && TARGET_LIBC=glibc
[ "$TARGET_ARCH" = x86_64 ] && CONSOLE=no && XORG=yes && LIBSTRIP=no
[ "$VDPAU" = yes ] && NVIDIA=yes && TOOLCHAIN_CXX=yes
[ "$NVIDIA" = yes ] && TARGET_LIBC=glibc
[ "$XORG" = yes ] && TOOLCHAIN_CXX=yes
[ "$VDR" = yes ] && TARGET_LIBC=glibc && TOOLCHAIN_CXX=yes
[ "$UNRAR" = yes ] && TOOLCHAIN_CXX=yes
[ "$WIIMOTE" = yes ] && BLUETOOTH=yes
[ "$DEVTOOLS" = yes ] && STATS=yes && STATS_ENABLED=yes
[ "$USE_EGLIBC" = yes ] && TARGET_LIBC=eglibc
[ "$TARGET_ARCH" = arm ] && XORG_DRIVERS="fbdev omapfb" && WIFI=no && INSTALLATOR=no && STATS=no

# determine architecture's family
case $TARGET_ARCH in
  i386)
    TARGET_FAMILY=i586
    ;;

  x86_64)
    TARGET_FAMILY=x86_64
    ;;

  powerpc)
    TARGET_FAMILY=powerpc
    ;;

  powerpc64)
    TARGET_FAMILY=powerpc64
    ;;

  arm)
    TARGET_FAMILY=armv7
    TARGET_ABI=eabi
    ;;
esac

case $TARGET_LIBC in
  uClibc)
    TARGET_NAME=$TARGET_FAMILY-geexbox-linux-uclibc
    ;;

  glibc|eglibc)
    TARGET_NAME=$TARGET_FAMILY-geexbox-linux-gnu$TARGET_ABI
    ;;
esac

# determines TARGET_CPU, if not forced by user
if [ -z "$TARGET_CPU" ]; then
  case $TARGET_ARCH in
    i386)
      TARGET_CPU=generic
      ;;

    x86_64)
      TARGET_CPU=generic
      ;;

    powerpc)
      TARGET_CPU=powerpc
      ;;

    powerpc64)
      TARGET_CPU=powerpc64
      ;;

    arm)
      TARGET_CPU=cortex-a8
      ;;
  esac
fi

GEEXBOX_VERSION=`cat VERSION`
CONFIG=config
SCRIPTS=scripts
PACKAGES=packages
SOURCES=sources
BUILD_BASE=build
BUILD=$BUILD_BASE.$TARGET_ARCH.$TARGET_LIBC
[ -n "$TARGET_PLATFORM" ] && BUILD=$BUILD_BASE.$TARGET_PLATFORM.$TARGET_LIBC
STAMPS_NOARCH=.stamps
STAMPS=$BUILD/$STAMPS_NOARCH
DOCS=DOCS
ROOT=`pwd`
TOOLCHAIN=$BUILD/toolchain
SYSROOT_PREFIX=$ROOT/$TOOLCHAIN/$TARGET_NAME/sysroot
LIB_PREFIX=$SYSROOT_PREFIX/usr/local
TARGET_PREFIX=$ROOT/$TOOLCHAIN/bin/$TARGET_NAME-
ROOTFS=$BUILD/rootfs
PKGROOT=$ROOT/$BUILD/packages

if [ "$XORG" = yes ]; then
  XORG_PATH_ENCODINGS=/usr/share/fonts/X11/encodings
  XORG_PATH_FONTS=/usr/share/X11/fonts
  XORG_PATH_MAPS=$XORG_PATH_FONTS/util
  XORG_PATH_DRI=/usr/lib/dri
  XORG_PATH_XKB=/usr/share/X11/xkb
  XORG_PATH_XKB_OUTPUT=/var/lib/xkb
  XORG_PATH_XKB_CACHE=/var/cache/xkb
  XORG_PATH_RGB=/usr/lib/X11/rgb
  XORG_PATH_MODULES=/usr/lib/xorg/modules
  XORG_PATH_DRIVERS=/usr/lib/xorg/modules/drivers
  XORG_PATH_ICONS=/usr/share/X11/icons
  XORG_PATH_FDI=/usr/share/hal/fdi/policy
  [ -z "$BOOT_DEFAULT" ] && BOOT_DEFAULT=hdtv
fi

TOOLCHAIN_LANGUAGES=c
[ "$TOOLCHAIN_CXX" = yes ] && TOOLCHAIN_LANGUAGES=${TOOLCHAIN_LANGUAGES},c++

if [ "$OPTIMIZATIONS" = speed ]; then
  GCC_OPTIM="-O2"
elif [ "$OPTIMIZATIONS" = size ]; then
  GCC_OPTIM="-Os"
else
  GCC_OPTIM="-O0"
fi

[ "$TARGET_ARCH" = powerpc64 ] && GCC_OPTIM="$GCC_OPTIM -mcpu=$TARGET_CPU -m64"
[ "$TARGET_ARCH" = arm ] && GCC_OPTIM="$GCC_OPTIM -mcpu=$TARGET_CPU -mfpu=neon -mfloat-abi=softfp"

if [ "$TARGET_CPU" = atom ]; then
  GCC_OPTIM="$GCC_OPTIM -march=core2 -mfpmath=sse -msse3"
  TARGET_CPU=core2
else
  GCC_OPTIM="$GCC_OPTIM -mtune=$TARGET_CPU"
fi

TARGET_CC=${TARGET_PREFIX}gcc
TARGET_CXX=${TARGET_PREFIX}g++
TARGET_LD=${TARGET_PREFIX}ld
TARGET_AS=${TARGET_PREFIX}as
TARGET_AR=${TARGET_PREFIX}ar
TARGET_NM=${TARGET_PREFIX}nm
TARGET_RANLIB=${TARGET_PREFIX}ranlib
TARGET_OBJCOPY=${TARGET_PREFIX}objcopy
TARGET_STRIP=${TARGET_PREFIX}strip
TARGET_CPPFLAGS=
TARGET_CFLAGS="$GCC_OPTIM -Wall -pipe -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE"
TARGET_CXXFLAGS="$TARGET_CFLAGS"
TARGET_LDFLAGS=

TARGET_INCLUDES="-I${LIB_PREFIX}/include -I${SYSROOT_PREFIX}/usr/include"
TARGET_LIBS="-L${SYSROOT_PREFIX}/lib -L${SYSROOT_PREFIX}/usr/lib -L${LIB_PREFIX}/lib"

TARGET_CFLAGS="$TARGET_CFLAGS $TARGET_INCLUDES"
TARGET_CXXFLAGS="$TARGET_CXXFLAGS $TARGET_INCLUDES"
TARGET_LDFLAGS="$TARGET_LDFLAGS $TARGET_LIBS"

case $TARGET_ARCH in
    i386)
     TARGET_CFLAGS="$TARGET_CFLAGS -march=$TARGET_FAMILY"
     TARGET_CXXFLAGS="$TARGET_CXXFLAGS -march=$TARGET_FAMILY"
     ;;
    arm|powerpc|powerpc64|x86_64)
     TARGET_CFLAGS="$TARGET_CFLAGS -fPIC"
     TARGET_CXXFLAGS="$TARGET_CXXFLAGS -fPIC"
     ;;
esac

if [ "$DEBUG" = yes ]; then
  TARGET_CFLAGS="$TARGET_CFLAGS -g3"
  TARGET_CXXFLAGS="$TARGET_CXXFLAGS -g3"
  TARGET_STRIP=true
else
  TARGET_CFLAGS="$TARGET_CFLAGS -s -fomit-frame-pointer"
  TARGET_CXXFLAGS="$TARGET_CXXFLAGS -s -fomit-frame-pointer"
  TARGET_LDFLAGS="$TARGET_LDFLAGS -s"
fi

HOST_AWK=gawk
HOST_CC=$ROOT/$TOOLCHAIN/bin/host-gcc
HOST_CXX=$ROOT/$TOOLCHAIN/bin/host-g++
HOST_LD=ld
HOST_AS=as
HOST_AR=ar
HOST_NM=nm
HOST_RANLIB=ranlib
HOST_OBJCOPY=objcopy
HOST_STRIP=strip
HOST_CPPFLAGS=""
HOST_CFLAGS="-O2 -Wall -pipe"
HOST_LDFLAGS=""

export CCACHE_DIR=$ROOT/$BUILD/.ccache
export MAKEFLAGS=-j$CONCURRENCY_MAKE_LEVEL

if [ -z "$PATH" -o "$PATH" = "${PATH#$ROOT/$TOOLCHAIN/bin:}" ]; then
  export PATH="$ROOT/$TOOLCHAIN/bin:$PATH"
fi

setup_toolchain() {
  if [ "$1" = "--optimize" ]; then
    OPTIMIZE=yes
    shift
  fi

  if [ "$1" = target ]; then
    export CC=$TARGET_CC
    export CXX=$TARGET_CXX
    export LD=$TARGET_LD
    export AS=$TARGET_AS
    export AR=$TARGET_AR
    export NM=$TARGET_NM
    export RANLIB=$TARGET_RANLIB
    export OBJCOPY=$TARGET_OBJCOPY
    export STRIP=$TARGET_STRIP
    export CPPFLAGS="$TARGET_CPPFLAGS"
    export CFLAGS="$TARGET_CFLAGS"
    export CXXFLAGS="$TARGET_CXXFLAGS"
    export LDFLAGS="$TARGET_LDFLAGS"
    export PKG_CONFIG=$ROOT/$TOOLCHAIN/bin/pkg-config
    export PKG_CONFIG_PATH=$LIB_PREFIX/lib/pkgconfig
    if [ "$OPTIMIZE" = yes ]; then
      if [ "$TARGET_ARCH" = powerpc -o "$TARGET_ARCH" = powerpc64 ]; then
        CFLAGS="$CFLAGS -maltivec"
        CXXFLAGS="$CXXFLAGS -maltivec"
      fi
    fi
  elif [ "$1" = host ]; then
    export AWK=$HOST_AWK
    export CC=$HOST_CC
    export CXX=$HOST_CXX
    export LD=$HOST_LD
    export AS=$HOST_AS
    export AR=$HOST_AR
    export NM=$HOST_NM
    export RANLIB=$HOST_RANLIB
    export OBJCOPY=$HOST_OBJCOPY
    export STRIP=$HOST_STRIP
    export CPPFLAGS="$HOST_CPPFLAGS"
    export CFLAGS="$HOST_CFLAGS"
    export CXXFLAGS="$HOST_CXXFLAGS"
    export LDFLAGS="$HOST_LDFLAGS"
    export PKG_CONFIG=/usr/bin/pkg-config
    export PKG_CONFIG_PATH=""
  fi
}
setup_toolchain target

SILENT_OUT=3
VERBOSE_OUT=4
if [ "$VERBOSE" = yes ]; then
  exec 3>&1
  exec 4>&2
else
  exec 3>&2
  exec 4>/dev/null
fi
INDENT_SIZE=4

GEEXBOX_SRCS=http://www.geexbox.org/src/$GEEXBOX_VERSION
[ "$GEEXBOX_VERSION" = devel ] && GEEXBOX_VERSION=$GEEXBOX_VERSION-`date +%Y%m%d`-r`hg tip --template={rev}`
[ -n "$GEEXBOX_VERSION_EXTRA" ] && GEEXBOX_VERSION=$GEEXBOX_VERSION-$GEEXBOX_VERSION_EXTRA

VERSION_SUFFIX=$TARGET_ARCH.$TARGET_LIBC
[ -n "$TARGET_PLATFORM" ] && VERSION_SUFFIX=$TARGET_PLATFORM.$TARGET_LIBC

ISO=geexbox-$GEEXBOX_VERSION-$MENU_LANG.$VERSION_SUFFIX.iso
GENERATOR_NAME=geexbox-generator-$GEEXBOX_VERSION.$VERSION_SUFFIX
FLAT_NAME=geexbox-flat-$GEEXBOX_VERSION.$VERSION_SUFFIX
PXE_NAME=geexbox-pxe/GEEXBOX.$VERSION_SUFFIX
VMX_NAME=geexbox-vmx

HOST_NAME_CACHE=$BUILD/configtools/host_name
if [ -f $HOST_NAME_CACHE ]; then
  HOST_NAME=`cat $HOST_NAME_CACHE`
elif [ -x $BUILD/configtools/config.guess ]; then
  HOST_NAME=`$BUILD/configtools/config.guess`
fi

# expand VDR plugins list
if [ "$VDR_PLUGINS" = all ]; then
  VDR_PLUGINS="`ls -d $PACKAGES/vdr-* | sed s/.*vdr-// | grep -v plugins`"
fi
VDR_PLUGINS="$VDR_PLUGINS $VDR_OUTPUT"

PACKAGE_URL="$PACKAGES/$1/url"
[ -r "$PACKAGE_URL.$TARGET_ARCH" ] && PACKAGE_URL="$PACKAGE_URL.$TARGET_ARCH"
[ -n "$TARGET_PLATFORM" -a -r "$PACKAGE_URL.$TARGET_PLATFORM" ] && \
PACKAGE_URL="$PACKAGE_URL.$TARGET_PLATFORM"

apply_patch() {
  echo "## Applying patch: $2"
  cat $2 | patch -d `echo $BUILD/$1* | cut -f1 -d\ ` -p1 >&$VERBOSE_OUT
}

kernel_path() {
  ls -d $ROOT/$BUILD/linux*
}

require_glibc() {
  if [ "$TARGET_LIBC" != glibc -a "$TARGET_LIBC" != eglibc ]; then
    echo "$1 requires glibc or eglibc, aborting."
    exit 1
  fi
}

require_cxx() {
  if [ "$TOOLCHAIN_CXX" != yes ]; then
    echo "$1 requires C++ toolchain support, aborting."
    exit 1
  fi
}

strip_libs() {
  if [ "$DEBUG" = no ]; then
    $STRIP `find $1 -name "*.so*"`
  fi
}

xorg_drv_configure_prepend() {
  incdir=${LIB_PREFIX}/include/xorg
  for f in dri.h sarea.h dristruct.h exa.h damage.h xf86Module.h; do
    incfile="$incdir/$f"
    if [ -f "$incfile" ]; then
      p=`echo "$incfile" | sed 'y%*+%pp%;s%[^_[:alnum:]]%_%g'`
      eval "export ac_cv_file_$p=yes"
    fi
  done
}

INCLUDED_LANGS="en $MENU_LANG $INCLUDED_LANGS"
