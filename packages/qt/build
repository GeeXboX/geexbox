#!/bin/sh

. config/options

get_meta $1

require_cxx $1

die () {
  echo "Unable to build QT: enable either Embedded or X11 flavor and try again"
  exit 1
}

select_qt_embedded () {
  CFG_EMBEDDED="$CFG_EMBEDDED -embedded $CROSS_ARCH"
  CFG_EMBEDDED="$CFG_EMBEDDED -depths all"

  CFG_EMBEDDED="$CFG_EMBEDDED -qt-gfx-linuxfb"

  pkg_uses $1 directfb && \
    CFG_EMBEDDED="$CFG_EMBEDDED -qt-gfx-directfb"

  CFG_EMBEDDED="$CFG_EMBEDDED -qt-kbd-tty"
  CFG_EMBEDDED="$CFG_EMBEDDED -qt-kbd-linuxinput"

  CFG_EMBEDDED="$CFG_EMBEDDED -qt-mouse-pc"
  CFG_EMBEDDED="$CFG_EMBEDDED -qt-mouse-linuxinput"

  pkg_uses $1 touchscreen && \
    CFG_EMBEDDED="$CFG_EMBEDDED -qt-mouse-tslib"

  return 0
}

select_qt_x11 () {
  CFG_X="$CFG_X -xcursor"
  CFG_X="$CFG_X -xrandr"
  CFG_X="$CFG_X -xrender"
  CFG_X="$CFG_X -xinput"
  CFG_X="$CFG_X -xkb"
}

# Ensure one of the qualifying flags has been set to build QT.
if ! pkg_uses $1 embedded && ! pkg_uses $1 xorg; then
  die
fi

pkg_uses $1 opengl && \
  CROSS_GL="-opengl" || CROSS_GL="-no-opengl"

pkg_uses $1 opengles && \
  CROSS_GL="-opengl es2"

pkg_uses $1 openvg && \
  CROSS_VG="-openvg" || CROSS_VG="-no-openvg"

pkg_uses $1 openssl && \
  CROSS_SSL="-openssl" || CROSS_SSL="-no-openssl"

pkg_uses $1 gstreamer && \
  CROSS_GST="-phonon" || CROSS_GST="-no-phonon"

pkg_uses $1 mysql && \
  CROSS_MYSQL="-qt-sql-mysql -plugin-sql-mysql" || CROSS_MYSQL="-no-sql-mysql"

pkg_uses $1 qt3 && \
  CROSS_QT_LEGACY="-qt3support" || CROSS_QT_LEGACY="-no-qt3support"

# architecture specific options
case "$TARGET_ARCH" in
  i386)
    CROSS_ARCH=i386
    CROSS_ENDIAN="-little-endian"
    ;;

  x86_64)
    CROSS_ARCH=x86_64
    CROSS_ENDIAN="-little-endian"
    ;;

  powerpc|powerpc64)
    CROSS_ARCH=powerpc
    CROSS_ENDIAN="-big-endian"
    ;;

  arm)
    CROSS_ARCH=arm
    CROSS_ENDIAN="-little-endian"
    ;;

  mips)
    CROSS_ARCH=mips
    CROSS_ENDIAN="-big-endian"
    ;;
esac

if [ "$FPU_OPTIMIZATIONS" = neon ]; then
  CFG_NEON=""
else
  CFG_NEON="-no-neon"
fi

if pkg_uses $1 webkit; then
    CFG_WEBKIT="-webkit"
    CFG_JS="-javascript-jit"
else
    CFG_WEBKIT="-no-webkit"
    CFG_JS="-no-javascript-jit"
fi

if pkg_uses $1 declarative; then
    CFG_DECLARATIVE="-declarative"
else
    CFG_DECLARATIVE="-no-declarative"
fi

if pkg_uses $1 xorg; then
  select_qt_x11 $1
  CFG_QT="$CFG_X"
else
  select_qt_embedded $1
  CFG_QT="$CFG_EMBEDDED"
fi

cd $PKG_BUILD_DIR

setup_toolchain host

MKSPECS_DIR="$ROOT/$PKG_BUILD_DIR/mkspecs/linux-g++-openbricks"
mkdir -p $MKSPECS_DIR

QMAKE_CONF=$MKSPECS_DIR/qmake.conf
pkg_uses $1 mysql && MYSQL_INCDIR="$LIB_PREFIX/include/mysql"

strip_thumb="`echo $TARGET_CFLAGS | sed 's/-mthumb//'`"
export TARGET_CFLAGS="$strip_thumb"

if [ "$TARGET_ARCH" = i386 ]; then
    ARCHFLAGS="-m32"
elif [ "$TARGET_ARCH" = x86_64 ]; then
    ARCHFLAGS="-m64"
fi

cat > $MKSPECS_DIR/qplatformdefs.h <<EOF
#include "../linux-g++/qplatformdefs.h"
EOF

cat > $QMAKE_CONF <<EOF

MAKEFILE_GENERATOR      = UNIX
TARGET_PLATFORM         = unix
TEMPLATE                = app
CONFIG                  += qt warn_on release incremental link_prl
QT                      += core gui network
QMAKE_INCREMENTAL_STYLE = sublib

CFG_ARCH		= $CROSS_ARCH
QMAKE_CFLAGS		= $TARGET_CFLAGS
QMAKE_LFLAGS		= $TARGET_CFLAGS
QMAKE_CXXFLAGS		= $TARGET_CFLAGS

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/g++-unix.conf)
load(qt_config)

QMAKE_CC                = $TARGET_CC
QMAKE_CXX               = $TARGET_CXX
QMAKE_LINK              = $TARGET_CXX
QMAKE_LINK_SHLIB        = $TARGET_CXX
QMAKE_AR                = $TARGET_AR cqs
QMAKE_OBJCOPY           = $TARGET_OBJCOPY
QMAKE_RANLIB            = $TARGET_RANLIB
QMAKE_STRIP             = $TARGET_STRIP

# Headers Search Path
QMAKE_INCDIR            = $LIB_PREFIX/include
QMAKE_INCDIR           += $LIB_PREFIX/include/freetype2 $MYSQL_INCDIR
QMAKE_INCDIR_X11        = $LIB_PREFIX/include/X11
QMAKE_INCDIR_OPENGL     = $LIB_PREFIX/include
QMAKE_INCDIR_QT         = $LIB_PREFIX/include/qt4

# Libraries Search Path
QMAKE_LIBDIR            = $LIB_PREFIX/lib
QMAKE_LIBDIR_X11        = $LIB_PREFIX/lib
QMAKE_LIBDIR_OPENGL     = $LIB_PREFIX/lib
QMAKE_LIBDIR_QT         = $LIB_PREFIX/lib

EOF

if [ "$FPU_OPTIMIZATIONS" = neon ]; then
  if [ "$TARGET_ABI" = eabihf ] ; then
    ABI=hard
  else
    ABI=softfp
  fi
  cat >> $QMAKE_CONF <<EOF
# Work round ARM NEON compilation flags
QMAKE_CXXFLAGS_RELEASE += -mfpu=neon -mfloat-abi=$ABI

EOF
fi

cat >> $QMAKE_CONF <<EOF
load(qt_config)
EOF

# unset flags, QT does it by itself
unset CC CXX AR OBJCOPY STRIP CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD

# force our pkg-config usage
export QT_FORCE_PKGCONFIG=yes
export PKG_CONFIG_PATH=$LIB_PREFIX/lib/pkgconfig

# qmakespec is yet to be built, unset it
unset QMAKESPEC

yes | ./configure \
            -opensource \
            -release \
            -prefix         "/usr" \
            -bindir         "/usr/bin" \
            -libdir         "/usr/lib" \
            -docdir         "/usr/share/qt4/doc" \
            -headerdir      "/usr/include/qt4" \
            -datadir        "/usr/share/qt4" \
            -plugindir      "/usr/lib/qt4/plugins" \
            -importdir      "/usr/lib/qt4/imports" \
            -translationdir "/usr/share/qt4/translations" \
            -sysconfdir     "/etc" \
            -demosdir       "/usr/lib/qt4/demos" \
            -examplesdir    "/usr/lib/qt4/examples" \
            -crossarch $CROSS_ARCH \
            -fast \
            -no-rpath \
            -optimized-qmake \
            $CROSS_ENDIAN \
            $CFG_NEON \
            -platform linux-g++ \
            -xplatform linux-g++-openbricks \
            -shared \
            -stl \
            -no-separate-debug-info \
            $CFG_QT_LEGACY \
            -qt-sql-sqlite \
            -system-sqlite \
            $CROSS_MYSQL \
            $CROSS_GL \
            $CROSS_VG \
            $CROSS_SSL \
            $CROSS_GST \
            $CFG_WEBKIT \
            $CFG_JS \
            $CFG_DECLARATIVE \
            $CFG_QT \
            -exceptions \
            -xmlpatterns \
            -multimedia \
            -audio-backend \
            -dbus \
            -script \
            -scripttools \
            -no-nis \
            -no-cups \
            -make libs \
            -make tools \
            -make examples \
            -make demos \
            -nomake docs \
            -make translations \
            -no-pch \
            -v

./bin/qmake
make

setup_toolchain target # restore target flags for install
make_install

# discard native system includes
sed -i "s%-I/usr/include%%g" .install/usr/lib/*.la
sed -i "s%-L/usr/lib%%g"     .install/usr/lib/*.la
sed -i "s%-I/usr/include%%g" .install/usr/lib/*.prl
sed -i "s%-L/usr/lib%%g"     .install/usr/lib/*.prl
sed -i "s%-I/usr/include%%g" .install/usr/lib/pkgconfig/*.pc
sed -i "s%-L/usr/lib%%g"     .install/usr/lib/pkgconfig/*.pc
