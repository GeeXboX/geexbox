diff -Naur MPlayer-export-2009-06-13.orig/cfg-mplayer.h MPlayer-export-2009-06-13/cfg-mplayer.h
--- MPlayer-export-2009-06-13.orig/cfg-mplayer.h	2009-06-14 15:23:59.000000000 +0200
+++ MPlayer-export-2009-06-13/cfg-mplayer.h	2009-06-14 19:43:05.000000000 +0200
@@ -193,6 +193,8 @@
 	{"novsync", &vo_vsync, CONF_TYPE_FLAG, 0, 1, 0, NULL},
 	{"panscan", &vo_panscan, CONF_TYPE_FLOAT, CONF_RANGE, -1.0, 1.0, NULL},
 	{"panscanrange", &vo_panscanrange, CONF_TYPE_FLOAT, CONF_RANGE, -19.0, 99.0, NULL},
+	{"info-fifo", &info_fifo, CONF_TYPE_STRING, 0, 0, 0, NULL},
+	{"bg-lcdbanner", &bg_lcdbanner, CONF_TYPE_STRING, 0, 0, 0, NULL},
 
 	{"grabpointer", &vo_grabpointer, CONF_TYPE_FLAG, 0, 0, 1, NULL},
 	{"nograbpointer", &vo_grabpointer, CONF_TYPE_FLAG, 0, 1, 0, NULL},
diff -Naur MPlayer-export-2009-06-13.orig/mplayer.c MPlayer-export-2009-06-13/mplayer.c
--- MPlayer-export-2009-06-13.orig/mplayer.c	2009-06-14 15:23:59.000000000 +0200
+++ MPlayer-export-2009-06-13/mplayer.c	2009-06-14 19:46:38.000000000 +0200
@@ -276,6 +276,9 @@
 #ifdef CONFIG_STREAM_CACHE
 extern int cache_fill_status;
 
+char* info_fifo=NULL;
+char* bg_lcdbanner=NULL;
+
 float stream_cache_min_percent=20.0;
 float stream_cache_seek_min_percent=50.0;
 #else
@@ -365,6 +368,128 @@
 
 #define mp_basename2(s) (strrchr(s,'/')==NULL?(char*)s:(strrchr(s,'/')+1))
 
+#define mp_basename(s) (strrchr(s,'\\')==NULL?(mp_basename2(s)):(strrchr(s,'\\')+1))
+
+static void dump_stream_info(void)
+{
+  FILE *f;
+  int fd;
+
+  if (!info_fifo)
+    return;
+
+  mkfifo (info_fifo, 0644);
+
+  fd = open(info_fifo, O_RDWR | O_NONBLOCK);
+  if (fd < 0)
+    return;
+
+  f = fdopen (fd, "w");
+  if (!f)
+    return;
+
+  fprintf (f, "ID_FILENAME=%s\n",
+           (bg_video && strcmp (filename, bg_video)) ?
+           mp_basename (filename) : (bg_lcdbanner ? bg_lcdbanner : ""));
+
+  if (!mpctx)
+  {
+    fflush (f);
+    fclose (f);
+    return;
+  }
+
+  if (mpctx->demuxer)
+  {
+    int len, pts;
+
+    if (mpctx->demuxer->desc && mpctx->demuxer->desc->name)
+      fprintf (f, "ID_DEMUXER=%s\n", mpctx->demuxer->desc->name);
+
+    len = (int) demuxer_get_time_length (mpctx->demuxer);
+    fprintf (f, "ID_LENGTH=%02d:%02d:%02d\n",
+             (len / 3600), (len / 60) % 60, len % 60);
+    fprintf (f, "ID_VIDEO_PERCENT=%d\n",
+             demuxer_get_percent_pos (mpctx->demuxer));
+    pts = demuxer_get_current_time (mpctx->demuxer);
+
+    if (mpctx->bg_demuxer)
+      pts = playing_audio_pts (mpctx->sh_audio,
+                               mpctx->d_audio, mpctx->audio_out);
+    fprintf (f, "ID_TIME_ELAPSED=%02d:%02d:%02d\n",
+             (pts / 3600), (pts / 60 ) % 60, pts % 60);
+  }
+
+  if (mpctx->sh_video)
+  {
+    /* Assume FOURCC if all bytes >= 0x20 (' ') */
+    if (mpctx->sh_video->format >= 0x20202020)
+      fprintf (f, "ID_VIDEO_FORMAT=%.4s\n",
+               (char *) &mpctx->sh_video->format);
+    else
+      fprintf (f, "ID_VIDEO_FORMAT=0x%08X\n", mpctx->sh_video->format);
+
+    fprintf (f, "ID_VIDEO_BITRATE=%d\n",   mpctx->sh_video->i_bps*8);
+    fprintf (f, "ID_VIDEO_WIDTH=%d\n",     mpctx->sh_video->disp_w);
+    fprintf (f, "ID_VIDEO_HEIGHT=%d\n",    mpctx->sh_video->disp_h);
+    fprintf (f, "ID_VIDEO_FPS=%5.3f\n",    mpctx->sh_video->fps);
+    fprintf (f, "ID_VIDEO_ASPECT=%1.4f\n", mpctx->sh_video->aspect);
+  }
+
+  if (mpctx->demuxer)
+  {
+    char *info;
+
+    info = demux_info_get (mpctx->demuxer, "Title");
+    if (info)
+      fprintf (f, "ID_AUDIO_TITLE=%s\n", info);
+
+    info = demux_info_get (mpctx->demuxer, "Artist");
+    if (info)
+      fprintf (f, "ID_AUDIO_ARTIST=%s\n", info);
+
+    info = demux_info_get (mpctx->demuxer, "Album");
+    if (info)
+      fprintf (f, "ID_AUDIO_ALBUM=%s\n", info);
+
+    info = demux_info_get (mpctx->demuxer, "Year");
+    if (info)
+      fprintf (f, "ID_AUDIO_YEAR=%s\n", info);
+
+    info = demux_info_get (mpctx->demuxer, "Comment");
+    if (info)
+      fprintf (f, "ID_AUDIO_COMMENT=%s\n", info);
+
+    info = demux_info_get (mpctx->demuxer, "Track");
+    if (info)
+      fprintf (f, "ID_AUDIO_TRACK=%s\n", info);
+
+    info = demux_info_get (mpctx->demuxer, "Genre");
+    if (info)
+      fprintf (f, "ID_AUDIO_GENRE=%s\n", info);
+  }
+
+  if (mpctx->sh_audio)
+  {
+    if (mpctx->sh_audio->codec && mpctx->sh_audio->codec->name)
+      fprintf (f, "ID_AUDIO_CODEC=%s\n", mpctx->sh_audio->codec->name);
+
+    /* Assume FOURCC if all bytes >= 0x20 (' ') */
+    if (mpctx->sh_audio->format >= 0x20202020)
+      fprintf (f, "ID_AUDIO_FORMAT=%.4s\n",
+               (char *) &mpctx->sh_audio->format);
+    else
+      fprintf (f, "ID_AUDIO_FORMAT=%d\n", mpctx->sh_audio->format);
+
+    fprintf (f, "ID_AUDIO_BITRATE=%d\n", mpctx->sh_audio->i_bps * 8);
+    fprintf (f, "ID_AUDIO_RATE=%d\n",    mpctx->sh_audio->samplerate);
+    fprintf (f, "ID_AUDIO_NCH=%d\n",     mpctx->sh_audio->channels);
+  }
+
+  fflush (f);
+  fclose (f);
+}
+
 const void *mpctx_get_video_out(MPContext *mpctx)
 {
     return mpctx->video_out;
@@ -3843,6 +3968,8 @@
     loop_seek = 1;
   }
 
+  dump_stream_info();
+
 if(rel_seek_secs || abs_seek_pos){
   if (seek(mpctx, rel_seek_secs, abs_seek_pos) >= 0) {
         // Set OSD:
