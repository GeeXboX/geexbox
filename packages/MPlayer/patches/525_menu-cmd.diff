diff -r e16f2b2827b8 input/input.c
--- a/input/input.c	Sun Apr 30 17:23:49 2006 +0200
+++ b/input/input.c	Sun Apr 30 17:24:01 2006 +0200
@@ -1002,7 +1002,7 @@
   return bind_section;
 }
 
-static mp_cmd_t*
+mp_cmd_t*
 mp_input_get_cmd_from_keys(int n,int* keys, int paused) {
   char* cmd = NULL;
   mp_cmd_t* ret;
diff -r e16f2b2827b8 input/input.h
--- a/input/input.h	Sun Apr 30 17:23:49 2006 +0200
+++ b/input/input.h	Sun Apr 30 17:24:01 2006 +0200
@@ -235,6 +235,10 @@ void
 void
 mp_input_rm_key_fd(int fd);
 
+// Convert a key list into a cmd
+mp_cmd_t*
+mp_input_get_cmd_from_keys(int n,int* keys, int paused);
+
 int mp_input_add_event_fd(int fd, void (*read_func)(void));
 
 void mp_input_rm_event_fd(int fd);
diff -r e16f2b2827b8 libmenu/menu.c
--- a/libmenu/menu.c	Sun Apr 30 17:23:49 2006 +0200
+++ b/libmenu/menu.c	Sun Apr 30 17:24:01 2006 +0200
@@ -212,6 +212,8 @@ void menu_dflt_read_key(menu_t* menu,int
   case JOY_BTN0:
     menu->read_cmd(menu,MENU_CMD_OK);
     break;
+  default:
+    mp_input_queue_cmd(mp_input_get_cmd_from_keys (1, &cmd, 0));
   }
 }
 
diff -r e16f2b2827b8 libmenu/menu_filesel.c
--- a/libmenu/menu_filesel.c	Sun Apr 30 17:23:49 2006 +0200
+++ b/libmenu/menu_filesel.c	Sun Apr 30 17:24:01 2006 +0200
@@ -349,9 +349,9 @@ static void read_cmd(menu_t* menu,int cm
 	free(str);
     }	  
     if(c) {
+      if(mpriv->auto_close)
+        mp_input_queue_cmd(mp_input_parse_cmd("menu hide"));
       mp_input_queue_cmd(c);
-      if(mpriv->auto_close)
-	menu->cl = 1;
     }
   } break;
   case MENU_CMD_ACTION: {
diff -r e16f2b2827b8 libmpcodes/mp_image.c
--- a/libmpcodecs/mp_image.c	Sun Apr 30 17:23:49 2006 +0200
+++ b/libmpcodecs/mp_image.c	Sun Apr 30 17:24:01 2006 +0200
@@ -51,12 +51,12 @@ static void key_cb(int code) {
 
 void copy_mpi(mp_image_t *dmpi, mp_image_t *mpi) {
   if(mpi->flags&MP_IMGFLAG_PLANAR){
+    memcpy_pic(dmpi->planes[2], mpi->planes[2], mpi->chroma_width, mpi->chroma_height,
+	       dmpi->stride[2],mpi->stride[2]);
+    memcpy_pic(dmpi->planes[1],mpi->planes[1], mpi->chroma_width, mpi->chroma_height,
+	       dmpi->stride[1],mpi->stride[1]);
     memcpy_pic(dmpi->planes[0],mpi->planes[0], mpi->w, mpi->h,
 	       dmpi->stride[0],mpi->stride[0]);
-    memcpy_pic(dmpi->planes[1],mpi->planes[1], mpi->chroma_width, mpi->chroma_height,
-	       dmpi->stride[1],mpi->stride[1]);
-    memcpy_pic(dmpi->planes[2], mpi->planes[2], mpi->chroma_width, mpi->chroma_height,
-	       dmpi->stride[2],mpi->stride[2]);
   } else {
     memcpy_pic(dmpi->planes[0],mpi->planes[0], 
 	       mpi->w*(dmpi->bpp/8), mpi->h,
