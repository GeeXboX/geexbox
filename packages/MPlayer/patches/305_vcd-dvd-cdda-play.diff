diff -r eea2414bb57d input/input.c
--- a/input/input.c	Sun Apr 30 16:54:34 2006 +0200
+++ b/input/input.c	Sun Apr 30 16:54:34 2006 +0200
@@ -123,6 +123,15 @@ static mp_cmd_t mp_cmds[] = {
   { MP_CMD_SUB_FORCED_ONLY, "forced_subs_only",  0, { {MP_CMD_ARG_INT,{-1}}, {-1,{0}} } },
 #ifdef HAS_DVBIN_SUPPORT
   { MP_CMD_DVB_SET_CHANNEL, "dvb_set_channel", 2, { {MP_CMD_ARG_INT,{0}}, {MP_CMD_ARG_INT,{0}}, {-1,{0}}}},
+#endif
+#ifdef HAVE_VCD
+  { MP_CMD_VCD_PLAY, "play_vcd", 0, { {MP_CMD_ARG_STRING, {0}}, {-1,{0}} } },
+#endif
+#ifdef USE_DVDREAD
+  { MP_CMD_DVD_PLAY, "play_dvd", 0, { {MP_CMD_ARG_STRING, {0}}, {-1,{0}} } },
+#endif
+#ifdef HAVE_CDDA
+  { MP_CMD_CDDA_PLAY, "play_cdda", 0, { {MP_CMD_ARG_STRING, {0}}, {-1,{0}} } },
 #endif
   { MP_CMD_SWITCH_RATIO, "switch_ratio", 0, { {MP_CMD_ARG_FLOAT,{0}}, {-1,{0}} } },
   { MP_CMD_VO_FULLSCREEN, "vo_fullscreen", 0, { {MP_CMD_ARG_INT,{-1}}, {-1,{0}} } },
diff -r eea2414bb57d input/input.h
--- a/input/input.h	Sun Apr 30 16:54:34 2006 +0200
+++ b/input/input.h	Sun Apr 30 16:54:34 2006 +0200
@@ -96,6 +96,10 @@
 
 #define MP_CMD_SET_OPTION 94
 
+#define MP_CMD_VCD_PLAY 95
+#define MP_CMD_DVD_PLAY 96
+#define MP_CMD_CDDA_PLAY 97
+
 #define MP_CMD_GUI_EVENTS       5000
 #define MP_CMD_GUI_LOADFILE     5001
 #define MP_CMD_GUI_LOADSUBTITLE 5002
diff -r eea2414bb57d libmpdemux/cdda.c
--- a/stream/stream_cdda.c	Sun Apr 30 16:54:34 2006 +0200
+++ b/stream/stream_cdda.c	Sun Apr 30 16:54:34 2006 +0200
@@ -283,6 +283,34 @@ static void cdparanoia_callback(long int
 #endif
 }
 
+int get_cdda_tracks_num(char* dev) {
+  cdrom_drive* cdd = NULL;
+  int nb_tracks;
+
+#if defined(__NetBSD__)
+  cdd = cdda_identify_scsi(dev,dev,0,NULL);
+#else
+  cdd = cdda_identify(dev,0,NULL);
+#endif
+
+  if(!cdd) {
+    mp_msg(MSGT_OPEN,MSGL_ERR,"Can't open cdda device\n");
+    return -1;
+  }
+
+  if(cdda_open(cdd)) {
+    mp_msg(MSGT_OPEN,MSGL_ERR,"Can't open disc\n");
+    cdda_close(cdd);
+    return -1;
+  }
+
+  cdda_verbose_set(cdd, CDDA_MESSAGE_FORGETIT, CDDA_MESSAGE_FORGETIT);
+
+  nb_tracks = cdda_tracks(cdd);
+  cdda_close(cdd);
+  return nb_tracks;
+}
+
 static int fill_buffer(stream_t* s, char* buffer, int max_len) {
   cdda_priv* p = (cdda_priv*)s->priv;
   cd_track_t *cd_track;
diff -Naur MPlayer-r23418.orig/command.c MPlayer-r23418/command.c
--- MPlayer-r23418.orig/command.c	2007-05-30 19:10:09.000000000 +0200
+++ MPlayer-r23418/command.c	2007-05-30 19:22:38.000000000 +0200
@@ -2,6 +2,7 @@
 #include <inttypes.h>
 #include <unistd.h>
 #include <string.h>
+#include <sys/stat.h>
 
 #include "config.h"
 #include "input/input.h"
@@ -1809,6 +1810,117 @@
 	    exit_player_with_rc(MSGTR_Exit_quit,
 				(cmd->nargs > 0) ? cmd->args[0].v.i : 0);
 
+#ifdef HAVE_VCD
+        case MP_CMD_VCD_PLAY : {
+          char buf[10];
+          play_tree_t *vcd, *tracks;
+          stream_t *s;
+          int i, m;
+          
+          if ((s = open_stream ("vcd://", NULL, &i)) == NULL)
+            break;
+          for (m=2; m<100; m++)
+            if (vcd_seek_to_track (s->priv, m) < 0)
+              break;
+          free_stream (s);
+          
+          tracks = play_tree_new();
+          sprintf(buf, "vcd://%d", i = m > 2 ? 2 : 1);
+          play_tree_add_file(tracks, buf);
+          for (i++; i<m; i++)
+          {
+            sprintf(buf, "vcd://%d", i);
+            vcd = play_tree_new();
+            play_tree_add_file(vcd, buf);
+            play_tree_append_entry(tracks, vcd);
+          }
+
+          while(play_tree_iter_up_step(mpctx->playtree_iter, 0, 1) != PLAY_TREE_ITER_END);
+          play_tree_free_list(mpctx->playtree->child, 1);
+          play_tree_set_child(mpctx->playtree, tracks);
+          play_tree_iter_step(mpctx->playtree_iter, 0, 0);
+          mpctx->eof = PT_NEXT_SRC;
+        } break;
+#endif
+#ifdef USE_DVDREAD
+        case MP_CMD_DVD_PLAY : {
+          struct stat st;
+          
+          if (stat ("/var/dvdnav", &st) == 0)
+          {
+            mp_cmd_t* c = mp_input_parse_cmd ("loadfile dvdnav://");
+            if (c) {
+#ifdef HAVE_MENU
+              mp_input_queue_cmd (mp_input_parse_cmd ("menu hide"));
+#endif
+              mp_input_queue_cmd (c);
+            }
+            break;
+          }
+          else
+          {
+            char buf[10];
+            play_tree_t *dvd, *tracks;
+            stream_t *s;
+            int nb_tracks, i; 
+            
+            if ((s = open_stream("dvd://", NULL, &i)) == NULL)
+              break;
+            
+            tracks = play_tree_new();
+            play_tree_add_file(tracks, "dvd://1");
+            
+            nb_tracks = ((dvd_priv_t *) s->priv)->vmg_file->tt_srpt->nr_of_srpts;
+            for (i=2; i<=nb_tracks; i++)
+            {
+              dvd = play_tree_new();
+              sprintf(buf, "dvd://%d", i);
+              play_tree_add_file(dvd, buf);
+              play_tree_append_entry(tracks, dvd);
+            }
+            i = dvd_title_info(((dvd_priv_t *) s->priv)->dvd,
+                               ((dvd_priv_t *) s->priv)->vmg_file, 0x0001);
+            free_stream (s);
+            
+            while(play_tree_iter_up_step(mpctx->playtree_iter, 0, 1) != PLAY_TREE_ITER_END);
+            play_tree_free_list(mpctx->playtree->child, 1);
+            play_tree_set_child(mpctx->playtree, tracks);
+            play_tree_iter_down_step(mpctx->playtree_iter, 0, 0);
+            play_tree_iter_step(mpctx->playtree_iter, i-1, 0);
+            mpctx->eof = PT_NEXT_SRC;
+          }
+        } break;
+#endif
+#ifdef HAVE_CDDA
+        case MP_CMD_CDDA_PLAY : {
+          int get_cdda_tracks_num(char* dev);
+          char buf[11];
+          play_tree_t *cdda, *tracks;
+          int nb_tracks, i; 
+          
+          nb_tracks = get_cdda_tracks_num (cdrom_device ? cdrom_device : DEFAULT_CDROM_DEVICE);
+          if (nb_tracks <= 0)
+            break;
+          
+          tracks = play_tree_new();
+          play_tree_add_file(tracks, "cdda://1");
+          
+          for (i=2; i<=nb_tracks; i++)
+          {
+            cdda = play_tree_new();
+            sprintf(buf, "cdda://%d", i);
+            play_tree_add_file(cdda, buf);
+            play_tree_append_entry(tracks, cdda);
+          }
+          
+          while(play_tree_iter_up_step(mpctx->playtree_iter, 0, 1) != PLAY_TREE_ITER_END);
+          play_tree_free_list(mpctx->playtree->child, 1);
+          play_tree_set_child(mpctx->playtree, tracks);
+          play_tree_iter_step(mpctx->playtree_iter, 0, 0);
+          mpctx->eof = PT_NEXT_SRC;
+        } break;
+#endif
+            
 	case MP_CMD_PLAY_TREE_STEP:{
 		int n = cmd->args[0].v.i;
 		int force = cmd->args[1].v.i;
