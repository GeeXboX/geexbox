diff -Naur MPlayer-r23418.orig/libmenu/menu_param.c MPlayer-r23418/libmenu/menu_param.c
--- MPlayer-r23418.orig/libmenu/menu_param.c	2007-05-30 19:58:19.000000000 +0200
+++ MPlayer-r23418/libmenu/menu_param.c	2007-05-30 19:58:57.000000000 +0200
@@ -9,6 +9,15 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <ctype.h>
+#include <sys/socket.h>
+#include <sys/ioctl.h>
+#include <net/if.h>
+#include <net/if_arp.h>
+#include <netinet/in.h>
+#include <mntent.h>
+#include <sys/vfs.h>
+#include <fcntl.h>
+#include <version.h>
 
 #include "mp_msg.h"
 #include "help_mp.h"
@@ -63,6 +72,11 @@
 
 #define mpriv (menu->priv)
 
+#define OPT_VERSION "Version"
+#define OPT_MPREV "MPlayerRev"
+#define OPT_IP "IP"
+#define OPT_MAC "MAC"
+
 static void entry_set_text(menu_t* menu, list_entry_t* e) {
   char* val = e->txt ? property_expand_string(menu->ctx, e->txt) :
     mp_property_print(e->prop, menu->ctx);
@@ -89,12 +103,68 @@
     if(e->txt || e->prop) entry_set_text(menu,e);
 }
 
+static int is_part(char *name) {
+  if(strncmp(name, "disk", 4))
+    return 0;
+  name += 4;
+  if(*name < '0' || *name > '9')
+    return 0;
+  name++;
+  if(*name == '\0')
+    return 1;
+  if(strncmp(name, "part", 4))
+    return 0;
+  name += 4;
+  if(*name < '0' || *name > '9')
+    return 0;
+  return 1;
+}
+
+static int is_cdrom(char *name) {
+  if(strncmp(name, "cdrom", 5))
+    return 0;
+  name += 5;
+  if(*name < '0' || *name > '9')
+    return 0;
+  return 1;
+}
+
+static char *part_size(char *part) {
+  static char size[32];
+  char name[] = "/dev/diskNpartN";
+  struct mntent *mpoint;
+  struct statfs buf;
+  FILE *mtab;
+
+  strcpy(name+5, part);
+  mtab = setmntent("/proc/mounts", "r");
+  while((mpoint = getmntent(mtab)) != NULL)
+    if(!strcmp(mpoint->mnt_fsname, name))
+      {
+        endmntent(mtab);
+        if(!statfs(mpoint->mnt_dir, &buf))
+          if(buf.f_bfree > 0)
+            sprintf(size, "%lld M / %lld M", 
+                    (buf.f_bsize * (long long)buf.f_bfree) >> 20,
+                    (buf.f_bsize * (long long)buf.f_blocks) >> 20);
+          else
+            sprintf(size, "%lld M", (buf.f_bsize * (long long)buf.f_blocks) >> 20);
+        else
+          sprintf(size, "unknown");
+        return size;
+      }
+  endmntent(mtab);
+  sprintf(size, "unknown");
+  return size;
+}
+
 static int parse_args(menu_t* menu,char* args) {
   char *element,*body, **attribs, *name, *txt;
   list_entry_t* m = NULL;
   int r;
   m_option_t* opt;
   ASX_Parser_t* parser = asx_parser_new();
+  char *val;
   
 
   while(1) {
@@ -128,6 +198,71 @@
     }
 
     name = asx_get_attrib("property",attribs);
+
+    val = NULL;
+    if(name) {
+      if (!strcmp (name, OPT_VERSION)) {
+        struct stat st;
+
+        if (stat ("/etc/version", &st) == 0)
+        {
+          int fd;
+          fd = open ("/etc/version", O_RDONLY);
+          val = malloc (st.st_size + 1);
+          memset (val, '\0', st.st_size + 1);
+          read (fd, val, st.st_size + 1);
+          close (fd);
+        }
+        else
+          val = strdup ("#undef");
+      }
+      else if(!strcmp(name, OPT_IP) || !strcmp(name, OPT_MAC)) {
+        struct if_nameindex *ifs, *ifp;
+        struct ifreq ifr;
+        int fd, ip;
+        unsigned char *hwaddr;
+
+        fd = socket(AF_INET, SOCK_DGRAM, 0);
+        if (fd >= 0) {
+          for (ifp = ifs = if_nameindex (); ifp->if_index != 0; ifp++) {
+            if (strcmp (ifp->if_name, "lo") && strcmp (ifp->if_name, "sit0")) {
+              strcpy(ifr.ifr_name, ifp->if_name);
+              ifr.ifr_addr.sa_family = AF_INET;
+              val = malloc (20);
+              if (!strcmp(name, OPT_IP) && ioctl(fd, SIOCGIFADDR, &ifr) == 0) {
+                ip = ((struct sockaddr_in *) &ifr.ifr_addr)->sin_addr.s_addr;
+                ip = ntohl (ip);
+                sprintf (val, "%d.%d.%d.%d",
+                         (ip>>24)&0xFF, (ip>>16)&0xFF, (ip>>8)&0xFF, ip&0xFF);
+              } else if (!strcmp(name, OPT_MAC) && ioctl(fd, SIOCGIFHWADDR, &ifr) == 0) {
+                hwaddr = (unsigned char *)ifr.ifr_hwaddr.sa_data;
+                sprintf (val, "%02X:%02X:%02X:%02X:%02X:%02X",
+                         hwaddr[0],hwaddr[1],hwaddr[2],hwaddr[3],hwaddr[4],hwaddr[5]);
+              } else {
+                val = strdup("NULL");
+              }
+              break;
+            }
+          }
+          if_freenameindex (ifs);
+          close (fd);
+        }
+      }
+      else if (!strcmp (name, OPT_MPREV))
+        val = strdup(VERSION);
+      else if (is_part(name) || is_cdrom(name))
+        val = strdup(part_size(name));
+    }
+    if (val) {
+      int l = strlen(name) + 2 + strlen(val) + 1;
+      m = calloc(1,sizeof(struct list_entry_s));
+      m->p.txt = malloc(l);
+      sprintf(m->p.txt,"%s: %s",name,val);
+      free(val);
+      menu_list_add_entry(menu,m);
+      goto next_element;
+    }
+    
     opt = NULL;
     if(name && mp_property_do(name,M_PROPERTY_GET_TYPE,&opt,menu->ctx) <= 0) {
       mp_msg(MSGT_OSD_MENU,MSGL_WARN,MSGTR_LIBMENU_InvalidProperty,
diff -Naur MPlayer-r23418.orig/mplayer.c MPlayer-r23418/mplayer.c
--- MPlayer-r23418.orig/mplayer.c	2007-05-30 19:58:19.000000000 +0200
+++ MPlayer-r23418/mplayer.c	2007-05-30 19:58:33.000000000 +0200
@@ -517,7 +517,7 @@
     if (!strcmp (info[2*n], tag))
       break;
 
-  return info[2*n+1] ? strdup (info[2*n+1]) : NULL;
+  return (info[2*n+1] && strcmp(info[2*n+1], "")) ? strdup (info[2*n+1]) : NULL;
 }
 
 char *get_metadata (metadata_t type) {
