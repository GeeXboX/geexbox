--- a/xbmc/guilib/JpegIO.cpp	2014-04-06 02:57:45.000000000 +0200
+++ b/xbmc/guilib/JpegIO.cpp	2014-04-19 08:42:55.415382061 +0200
@@ -369,6 +369,14 @@
     }
     else if (format == XB_FMT_A8R8G8B8)
     {
+#ifdef JCS_ALPHA_EXTENSIONS
+      m_cinfo.out_color_space = JCS_EXT_BGRA;
+      while (m_cinfo.output_scanline < m_height)
+      {
+        jpeg_read_scanlines(&m_cinfo, &dst, 1);
+        dst += pitch;
+      }
+#else
       unsigned char* row = new unsigned char[m_width * 3];
       while (m_cinfo.output_scanline < m_height)
       {
@@ -385,6 +393,7 @@
         dst += pitch;
       }
       delete[] row;
+#endif
     }
     else
     {
@@ -440,8 +449,13 @@
   JSAMPROW row_pointer[1];
   long unsigned int outBufSize = width * height;
   unsigned char* result;
+#ifdef JCS_ALPHA_EXTENSIONS
+  J_COLOR_SPACE color_space = JCS_RGB;
+  int components = 3;
+#else
   unsigned char* src = buffer;
   unsigned char* rgbbuf;
+#endif
 
   if(buffer == NULL)
   {
@@ -456,6 +470,19 @@
     return false;
   }
 
+#ifdef JCS_ALPHA_EXTENSIONS
+  if (format == XB_FMT_A8R8G8B8)
+  {
+    color_space = JCS_EXT_BGRA;
+    components = 4;
+  }
+  else if (format != XB_FMT_RGB8)
+  {
+    CLog::Log(LOGWARNING, "JpegIO::CreateThumbnailFromSurface Unsupported format");
+    free(result);
+    return false;
+  }
+#else
   if(format == XB_FMT_RGB8)
   {
     rgbbuf = buffer;
@@ -485,6 +512,7 @@
     free(result);
     return false;
   }
+#endif    
 
   cinfo.err = jpeg_std_error(&jerr.pub);
   jerr.pub.error_exit = jpeg_error_exit;
@@ -494,8 +522,10 @@
   {
     jpeg_destroy_compress(&cinfo);
     free(result);
+#ifndef JCS_ALPHA_EXTENSIONS
     if(format != XB_FMT_RGB8)
       delete [] rgbbuf;
+#endif    
     return false;
   }
   else
@@ -507,23 +537,34 @@
 #endif
     cinfo.image_width = width;
     cinfo.image_height = height;
+#ifdef JCS_ALPHA_EXTENSIONS
+    cinfo.input_components = components;
+    cinfo.in_color_space = color_space;
+#else
     cinfo.input_components = 3;
     cinfo.in_color_space = JCS_RGB;
+#endif    
     jpeg_set_defaults(&cinfo);
     jpeg_set_quality(&cinfo, 90, TRUE);
     jpeg_start_compress(&cinfo, TRUE);
 
     while (cinfo.next_scanline < cinfo.image_height)
     {
+#ifdef JCS_ALPHA_EXTENSIONS
+      row_pointer[0] = &buffer[cinfo.next_scanline * pitch];
+#else      
       row_pointer[0] = &rgbbuf[cinfo.next_scanline * width * 3];
+#endif      
       jpeg_write_scanlines(&cinfo, row_pointer, 1);
     }
 
     jpeg_finish_compress(&cinfo);
     jpeg_destroy_compress(&cinfo);
   }
+#ifndef JCS_ALPHA_EXTENSIONS
   if(format != XB_FMT_RGB8)
     delete [] rgbbuf;
+#endif
 
   XFILE::CFile file;
   const bool ret = file.OpenForWrite(destFile, true) && file.Write(result, outBufSize) == outBufSize;
@@ -683,8 +724,13 @@
   struct my_error_mgr jerr;
   JSAMPROW row_pointer[1];
   long unsigned int outBufSize = width * height;
+#ifdef JCS_ALPHA_EXTENSIONS
+  J_COLOR_SPACE color_space = JCS_RGB;
+  int components = 3;
+#else
   unsigned char* src = bufferin;
   unsigned char* rgbbuf;
+#endif
 
   if(bufferin == NULL)
   {
@@ -699,6 +745,20 @@
     return false;
   }
 
+#ifdef JCS_ALPHA_EXTENSIONS
+  if (format == XB_FMT_A8R8G8B8)
+  {
+    color_space = JCS_EXT_BGRA;
+    components = 4;
+  }
+  else if (format != XB_FMT_RGB8)
+  {
+    CLog::Log(LOGWARNING, "JpegIO::CreateThumbnailFromSurface Unsupported format");
+    free(m_thumbnailbuffer);
+    m_thumbnailbuffer = NULL;
+    return false;
+  }
+#else
   if(format == XB_FMT_RGB8)
   {
     rgbbuf = bufferin;
@@ -727,8 +787,10 @@
   {
     CLog::Log(LOGWARNING, "JpegIO::CreateThumbnailFromSurface Unsupported format");
     free(m_thumbnailbuffer);
+    m_thumbnailbuffer = NULL;
     return false;
   }
+#endif
 
   cinfo.err = jpeg_std_error(&jerr.pub);
   jerr.pub.error_exit = jpeg_error_exit;
@@ -738,8 +800,11 @@
   {
     jpeg_destroy_compress(&cinfo);
     free(m_thumbnailbuffer);
+    m_thumbnailbuffer = NULL;
+#ifndef JCS_ALPHA_EXTENSIONS
     if(format != XB_FMT_RGB8)
       delete [] rgbbuf;
+#endif
     return false;
   }
   else
@@ -751,23 +816,34 @@
 #endif
     cinfo.image_width = width;
     cinfo.image_height = height;
+#ifdef JCS_ALPHA_EXTENSIONS
+    cinfo.input_components = components;
+    cinfo.in_color_space = color_space;
+#else
     cinfo.input_components = 3;
     cinfo.in_color_space = JCS_RGB;
+#endif    
     jpeg_set_defaults(&cinfo);
     jpeg_set_quality(&cinfo, 90, TRUE);
     jpeg_start_compress(&cinfo, TRUE);
 
     while (cinfo.next_scanline < cinfo.image_height)
     {
+#ifdef JCS_ALPHA_EXTENSIONS
+      row_pointer[0] = &bufferin[cinfo.next_scanline * pitch];
+#else      
       row_pointer[0] = &rgbbuf[cinfo.next_scanline * width * 3];
+#endif      
       jpeg_write_scanlines(&cinfo, row_pointer, 1);
     }
 
     jpeg_finish_compress(&cinfo);
     jpeg_destroy_compress(&cinfo);
   }
+#ifndef JCS_ALPHA_EXTENSIONS
   if(format != XB_FMT_RGB8)
     delete [] rgbbuf;
+#endif
 
   bufferout = m_thumbnailbuffer;
   bufferoutSize = outBufSize;
