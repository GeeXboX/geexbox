--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp	2014-09-01 10:21:25.000000000 +0200
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp	2016-02-13 10:43:58.303768379 +0100
@@ -1152,14 +1152,18 @@
       if (!m_vizBuffers)
       {
         AEAudioFormat vizFormat = m_internalFormat;
-        vizFormat.m_channelLayout = AE_CH_LAYOUT_2_0;
-        vizFormat.m_dataFormat = AE_FMT_FLOAT;
+
+        // accumulate samples for the visualization addon
+        if (vizFormat.m_frames < 1536)
+          vizFormat.m_frames = 1536;
 
         // input buffers
-        m_vizBuffersInput = new CActiveAEBufferPool(m_internalFormat);
+        m_vizBuffersInput = new CActiveAEBufferPool(vizFormat);
         m_vizBuffersInput->Create(2000);
 
         // resample buffers
+        vizFormat.m_channelLayout = AE_CH_LAYOUT_2_0;
+        vizFormat.m_dataFormat = AE_FMT_FLOAT;
         m_vizBuffers = new CActiveAEBufferPoolResample(m_internalFormat, vizFormat, m_settings.resampleQuality);
         // TODO use cache of sync + water level
         m_vizBuffers->Create(2000, false, false);
@@ -1920,18 +1924,33 @@
               m_vizInitialized = true;
             }
 
+            const int vizNumSamples = 512;
             if (!m_vizBuffersInput->m_freeSamples.empty())
             {
-              // copy the samples into the viz input buffer
-              CSampleBuffer *viz = m_vizBuffersInput->GetFreeBuffer();
-              int samples = std::min(512, out->pkt->nb_samples);
-              int bytes = samples * out->pkt->config.channels / out->pkt->planes * out->pkt->bytes_per_sample;
-              for(int i= 0; i < out->pkt->planes; i++)
+              // copy the samples into the viz input buffer	      
+              CSampleBuffer *viz = m_vizBuffersInput->m_freeSamples.front();
+              int samples = std::min(vizNumSamples - viz->pkt->nb_samples, out->pkt->nb_samples);
+
+              // don't copy more than vizNumSamples
+              if (samples > 0)
               {
-                memcpy(viz->pkt->data[i], out->pkt->data[i], bytes);
+                int bytes = samples * out->pkt->config.channels / out->pkt->planes * out->pkt->bytes_per_sample;
+                int offset = viz->pkt->nb_samples * out->pkt->config.channels / out->pkt->planes * out->pkt->bytes_per_sample;
+                for(int i = 0; i < out->pkt->planes; i++)
+                  memcpy(viz->pkt->data[i] + offset, out->pkt->data[i], bytes);
+              }
+
+              // consume complete source packet
+              viz->pkt->nb_samples += out->pkt->nb_samples;
+              if (viz->pkt->nb_samples >= viz->pkt->max_nb_samples)
+              {
+                // set valid sample count
+                viz->pkt->nb_samples = vizNumSamples;
+
+                m_vizBuffersInput->m_freeSamples.pop_front();
+                viz->refCount = 1;
+                m_vizBuffers->m_inputSamples.push_back(viz);
               }
-              viz->pkt->nb_samples = samples;
-              m_vizBuffers->m_inputSamples.push_back(viz);
             }
             else
               CLog::Log(LOGWARNING,"ActiveAE::%s - viz ran out of free buffers", __FUNCTION__);
@@ -1945,8 +1964,7 @@
                 break;
               else
               {
-                int samples;
-                samples = std::min(512, buf->pkt->nb_samples);
+                int samples = std::min(vizNumSamples, buf->pkt->nb_samples);
                 m_audioCallback->OnAudioData((float*)(buf->pkt->data[0]), samples);
                 buf->Return();
                 m_vizBuffers->m_outputSamples.pop_front();
@@ -1954,7 +1972,12 @@
             }
           }
           else if (m_vizBuffers)
+          {
+            if (!m_vizBuffersInput->m_freeSamples.empty())
+              m_vizBuffersInput->m_freeSamples.front()->pkt->nb_samples = 0;
+
             m_vizBuffers->Flush();
+          }
         }
 
         // mix gui sounds
