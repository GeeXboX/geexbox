#!/bin/sh
busybox mount -t proc none /proc
busybox mount -t sysfs none /sys
busybox mknod /dev/null c 1 3
busybox --install -s
[ -x /sbin/bootchartd ] && /sbin/bootchartd

echo geexbox > /proc/sys/kernel/hostname

export PATH=/bin:/sbin:/usr/bin:/usr/sbin

progress() {
  echo "### $2 ###"
}

boot_from_network () {
  mkdir -p $GEEXBOX
  udhcpc -q -H geexbox -n && mount "$1" $GEEXBOX -t "$2" -o "$3"
}

boot_from_nfs () {
  progress 11000 "Getting NFS tree"
  GEEXBOX=/nfs
  boot_from_network "$NFS" nfs "ro,udp,rsize=32768,hard,noatime,nolock"
}

boot_from_smb () {
  progress 11000 "Getting SMB tree"
  GEEXBOX=/smb
  boot_from_network "$SMB" cifs "ro,iocharset=utf8,user=$SMBUSER,pass=$SMBPASS"
}

boot_from_cdrom () {
  progress 11000 "Searching for CD-ROM drives"
  CDROM=/cd
  mkdir -p $CDROM
  for i in 1 2 3 4 5; do
    if [ -d /dev/cdroms ]; then
      for dev in `ls /dev/cdroms/*`; do
        [ -e $dev ] && mount -o ro $dev $CDROM || continue
        if [ -d "$CDROM$ROOT_LOCATION" ]; then
          GEEXBOX="$CDROM$ROOT_LOCATION"
          progress 11001 "Booting from: $GEEXBOX"
          break
        fi
        umount $CDROM
      done
    fi
    [ -n "$GEEXBOX" ] && break
    sleep 2
  done
}

boot_from_hdd () {
  progress 11000 "HDD Boot Device Detection"
  HDD=/hdd
  mkdir -p $HDD
  for i in 1 2 3 4; do
    [ -b "$BOOT_DEV" ] && mount -o ro $BOOT_DEV $HDD
    if [ -d "$HDD$ROOT_LOCATION" ]; then
      GEEXBOX="$HDD$ROOT_LOCATION"
      progress 11001 "Booting from: $GEEXBOX"
      break
    fi
    [ -n "$GEEXBOX" ] && break
    sleep 2
  done
}

get_devices_from_uuids () {
  # cannot be sure whether its written upper or lower case
  [ -n "$DATA_UUID" ] && DATA_DEV="" && DATA_DEV_NAME=""
  [ -n "$BOOT_UUID" ] && BOOT_DEV="" && BOOT_DEV_NAME=""

  for i in 1 2 3 4; do

    if [ -n "$DATA_UUID" -a -z "$DATA_DEV_NAME" ]; then
      DEV_PATH=$(find /dev/disk/by-uuid/ -iname ${DATA_UUID})
      if [ -n "$DEV_PATH" ]; then
        DATA_DEV_NAME=$(ls -l ${DEV_PATH} | sed 's#.*\.\.\/##')
        DATA_DEV=/dev/$DATA_DEV_NAME
      fi
    fi

    if [ -n "$BOOT_UUID" -a -z "$BOOT_DEV_NAME" ]; then
      DEV_PATH=$(find /dev/disk/by-uuid/ -iname ${BOOT_UUID})
      if [ -n "$DEV_PATH" ]; then
        BOOT_DEV_NAME=$(ls -l ${DEV_PATH} | sed 's#.*\.\.\/##')
        BOOT_DEV=/dev/$BOOT_DEV_NAME
      fi
    fi

    [ -z "$BOOT_UUID" -o -n "$BOOT_DEV" ] && [ -z "$DATA_UUID" -o -n "$DATA_DEV" ] && break

    echo "either boot or data device unavailable, retrying..."
    sleep 2
  done 
}

mount_data_partition() {
  if [ "$DATA_DEV" ]; then
    progress 47000 "mounting r/w data partition"
    mkdir -p /mnt/data
    mount -o rw $DATA_DEV /mnt/data
    mkdir -p /mnt/data/$DATA_LOCATION
    ln -s /mnt/data/$DATA_LOCATION /var/data
  else
    mkdir /var/data
  fi
}


# parse command line arguments
for arg in $(cat /proc/cmdline); do
  case $arg in
    boot=*)
      BOOT="${arg#boot=}"
      case $BOOT in
        UUID=*)
          # Grab real device name from UUID symlink
          BOOT_UUID="${BOOT#UUID=}"
          BOOT=hdd
          ;;
        *)
          if [ "$BOOT" != cdrom -a "$BOOT" != nfs -a "$BOOT" != smb ]; then
            BOOT_DEV=$BOOT
            BOOT=hdd
          fi
          ;;
      esac
      ;;
    bootdir=*)
      ROOT_LOCATION="${arg#bootdir=}"
      ;;
    data=*)
      DATA="${arg#data=}"
      case $DATA in
        UUID=*)
          # Grab real device name from UUID symlink
          DATA_UUID="${DATA#UUID=}"
          DATA=hdd
          ;;
        *)
          if [ "$DATA" != cdrom -a "$DATA" != nfs -a "$DATA" != smb ]; then
            DATA_DEV=$DATA
            DATA=hdd
          fi
          ;;
      esac
      ;;
    datadir=*)
      DATA_LOCATION="${arg#datadir=}"
      ;;
    nfsroot=*)
      NFS="${arg#nfsroot=}"
      ;;
    smbroot=*)
      SMB="${arg#smbroot=}"
      ;;
    smbuser=*)
      SMBUSER="${arg#smbuser=}"
      ;;
    smbpass=*)
      SMBPASS="${arg#smbpass=}"
      ;;
    hdtv)
      XORG=yes
      ;;
    installator)
      INSTALLATOR=yes
      XORG=yes
      ;;
    configure)
      CONFIGURATOR=yes
      ;;
    debugging)
      DEBUG=yes
      ;;
  esac
done

echo > /proc/sys/kernel/hotplug
mkdir -p /dev/.udev /var/log
udevd --daemon
udevadm trigger
udevadm settle --timeout=180
udevadm monitor 2>&1 >/var/log/udev &

[ -f /proc/sys/dev/cdrom/autoclose ] && echo 0 > /proc/sys/dev/cdrom/autoclose
[ -f /proc/sys/dev/cdrom/lock ] && echo 0 > /proc/sys/dev/cdrom/lock

# determine if a bootdir was specified or force the default one
[ -z "$ROOT_LOCATION" ] && ROOT_LOCATION="/GEEXBOX"

# determine if a data dir was specified or force the default one
[ -z "$DATA_LOCATION" ] && DATA_LOCATION="/geexbox-data"

# determine if we use X.Org or not
[ "$XORG" = yes ] && echo "" > /var/use_xorg

#initialize LVM
if [ -x /sbin/lvm ]; then
  modprobe dm_mod
  devmap=$(cat /proc/misc | grep "device-mapper")
  if [ -n "$devmap" ]; then
    lvm vgscan --ignorelockingfailure
    lvm vgchange -a y --ignorelockingfailure
  fi
fi

get_devices_from_uuids

# select boot device for 2nd stage
case "$BOOT" in
  nfs)
    boot_from_nfs
    ;;
  smb)
    boot_from_smb
    ;;
  cdrom)
    boot_from_cdrom
    ;;
  hdd)
    boot_from_hdd
    ;;
esac

if test -n "$GEEXBOX" -a -r "$GEEXBOX"/bin.tar* ; then
  progress 25000 "copying system into ram"
  cp -a "$GEEXBOX/etc" /
  progress 27000 "copying system into ram"
  cp -a "$GEEXBOX/var" /
  progress 29000 "copying system into ram"
  cp -a "$GEEXBOX/sbin" /
  progress 30500 "copying system into ram"
  cp -a "$GEEXBOX/usr/share" /usr
  progress 31000 "copying system into ram"

  [ -f "$GEEXBOX/bin.tar.lzma" ] && tar xaf "$GEEXBOX/bin.tar.lzma" -C /
  [ -f "$GEEXBOX/bin.tar.gz" ] && tar xzf "$GEEXBOX/bin.tar.gz" -C /
  [ -f "$GEEXBOX/bin.tar" ] && tar xf "$GEEXBOX/bin.tar" -C /

  progress 42000 "copying system into ram"
  cp -a "$GEEXBOX/codecs" /
  progress 45000 "copying system into ram"
  cp -a "$GEEXBOX/firmware" /
  progress 46000 "copying system into ram"
  mount_data_partition
  INIT=/sbin/init
else
  INIT=/sbin/nosystem
  progress 65535 "cleaning ram disk"
fi

# Rebuild module dependancies (initramfs + bin archive)
depmod -a
udevadm trigger
udevadm settle --timeout=180

if test "$BOOT" = nfs -o "$BOOT" = smb; then
  if test "$INSTALLATOR" = yes; then
    export NET="$GEEXBOX"
  elif test -n "$GEEXBOX"; then
    umount "$GEEXBOX"
  fi
fi

[ "$BOOT" = cdrom ] && export CDROM="${GEEXBOX%/GEEXBOX}"
[ "$BOOT" = hdd ] && export HDD="${GEEXBOX%/GEEXBOX}"

if test "$INSTALLATOR" != yes; then
  [ "$BOOT" = cdrom ] && umount $CDROM
  [ "$BOOT" = hdd ] && umount $HDD
fi

RUNLEVEL="geexbox"
if test "$INSTALLATOR" = yes; then
  RUNLEVEL="install"
elif test "$DEBUG" = yes; then
  RUNLEVEL="debug"
elif test "$CONFIGURATOR" = yes; then
  RUNLEVEL="configure"
fi

export DEBUG
export HOME=/root
[ "$DEBUG" = yes ] && /sbin/console </dev/tty2 >/dev/tty2 2>&1 &

/bin/sh $INIT $RUNLEVEL </dev/tty1 >/dev/tty1 2>&1

if test "$INSTALLATOR" = yes; then
  [ -e /dev/cdrom ] && eject -s /dev/cdrom
  reboot
elif test "$CONFIGURATOR" = yes; then
  reboot
else
  poweroff
fi
