From 0615ee8cd73068332879695cbdf662cf5b9b597c Mon Sep 17 00:00:00 2001
From: Rob Clark <rob@ti.com>
Date: Sat, 16 Jun 2012 09:55:20 -0500
Subject: [PATCH 2/8] omap: port to compat server API.

This ports to the new server API.

Signed-off-by: Rob Clark <rob@ti.com>
---
 src/compat-api.h      |   96 +++++++++++++++++++++++++++++++++++++++++++++++++
 src/drmmode_display.c |    2 +-
 src/omap_driver.c     |   64 ++++++++++++++++-----------------
 src/omap_driver.h     |    3 +-
 src/omap_exa.h        |    6 ++--
 5 files changed, 134 insertions(+), 37 deletions(-)
 create mode 100644 src/compat-api.h

diff --git a/src/compat-api.h b/src/compat-api.h
new file mode 100644
index 0000000..b1591b1
--- /dev/null
+++ b/src/compat-api.h
@@ -0,0 +1,96 @@
+/*
+ * Copyright 2012 Red Hat, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ *
+ * Author: Dave Airlie <airlied@redhat.com>
+ */
+
+/* this file provides API compat between server post 1.13 and pre it,
+   it should be reused inside as many drivers as possible */
+#ifndef COMPAT_API_H
+#define COMPAT_API_H
+
+#ifndef GLYPH_HAS_GLYPH_PICTURE_ACCESSOR
+#define GetGlyphPicture(g, s) GlyphPicture((g))[(s)->myNum]
+#define SetGlyphPicture(g, s, p) GlyphPicture((g))[(s)->myNum] = p
+#endif
+
+#ifndef XF86_HAS_SCRN_CONV
+#define xf86ScreenToScrn(s) xf86Screens[(s)->myNum]
+#define xf86ScrnToScreen(s) screenInfo.screens[(s)->scrnIndex]
+#endif
+
+#ifndef XF86_SCRN_INTERFACE
+
+#define SCRN_ARG_TYPE int
+#define SCRN_INFO_PTR(arg1) ScrnInfoPtr pScrn = xf86Screens[(arg1)]
+
+#define SCREEN_ARG_TYPE int
+#define SCREEN_PTR(arg1) ScreenPtr pScreen = screenInfo.screens[(arg1)]
+
+#define SCREEN_INIT_ARGS_DECL int index, ScreenPtr pScreen, int argc, char **argv
+
+#define BLOCKHANDLER_ARGS_DECL int arg, pointer blockData, pointer pTimeout, pointer pReadmask
+#define BLOCKHANDLER_ARGS arg, blockData, pTimeout, pReadmask
+
+#define CLOSE_SCREEN_ARGS_DECL int scrnIndex, ScreenPtr pScreen
+#define CLOSE_SCREEN_ARGS scrnIndex, pScreen
+
+#define ADJUST_FRAME_ARGS_DECL int arg, int x, int y, int flags
+
+#define SWITCH_MODE_ARGS_DECL int arg, DisplayModePtr mode, int flags
+
+#define FREE_SCREEN_ARGS_DECL int arg, int flags
+#define FREE_SCREEN_ARGS(x) (x)->scrnIndex, 0
+
+#define VT_FUNC_ARGS_DECL int arg, int flags
+#define VT_FUNC_ARGS(flags) pScrn->scrnIndex, (flags)
+
+#define XF86_ENABLEDISABLEFB_ARG(x) ((x)->scrnIndex)
+#else
+#define SCRN_ARG_TYPE ScrnInfoPtr
+#define SCRN_INFO_PTR(arg1) ScrnInfoPtr pScrn = (arg1)
+
+#define SCREEN_ARG_TYPE ScreenPtr
+#define SCREEN_PTR(arg1) ScreenPtr pScreen = (arg1)
+
+#define SCREEN_INIT_ARGS_DECL ScreenPtr pScreen, int argc, char **argv
+
+#define BLOCKHANDLER_ARGS_DECL ScreenPtr arg, pointer pTimeout, pointer pReadmask
+#define BLOCKHANDLER_ARGS arg, pTimeout, pReadmask
+
+#define CLOSE_SCREEN_ARGS_DECL ScreenPtr pScreen
+#define CLOSE_SCREEN_ARGS pScreen
+
+#define ADJUST_FRAME_ARGS_DECL ScrnInfoPtr arg, int x, int y
+#define SWITCH_MODE_ARGS_DECL ScrnInfoPtr arg, DisplayModePtr mode
+
+#define FREE_SCREEN_ARGS_DECL ScrnInfoPtr arg
+#define FREE_SCREEN_ARGS(x) (x)
+
+#define VT_FUNC_ARGS_DECL ScrnInfoPtr arg
+#define VT_FUNC_ARGS(flags) pScrn
+
+#define XF86_ENABLEDISABLEFB_ARG(x) (x)
+
+#endif
+
+#endif
diff --git a/src/drmmode_display.c b/src/drmmode_display.c
index 0dbc01d..cebd200 100644
--- a/src/drmmode_display.c
+++ b/src/drmmode_display.c
@@ -1119,7 +1119,7 @@ Bool drmmode_pre_init(ScrnInfoPtr pScrn, int fd, int cpp)
 }
 
 void
-drmmode_adjust_frame(ScrnInfoPtr pScrn, int x, int y, int flags)
+drmmode_adjust_frame(ScrnInfoPtr pScrn, int x, int y)
 {
 	xf86CrtcConfigPtr config = XF86_CRTC_CONFIG_PTR(pScrn);
 	xf86OutputPtr output = config->output[config->compat_output];
diff --git a/src/omap_driver.c b/src/omap_driver.c
index 3d32b7e..178a4cd 100644
--- a/src/omap_driver.c
+++ b/src/omap_driver.c
@@ -43,19 +43,17 @@ static const OptionInfoRec *OMAPAvailableOptions(int chipid, int busid);
 static void OMAPIdentify(int flags);
 static Bool OMAPProbe(DriverPtr drv, int flags);
 static Bool OMAPPreInit(ScrnInfoPtr pScrn, int flags);
-static Bool OMAPScreenInit(int scrnIndex, ScreenPtr pScreen, int argc,
-		char **argv);
+static Bool OMAPScreenInit(SCREEN_INIT_ARGS_DECL);
 static void OMAPLoadPalette(ScrnInfoPtr pScrn, int numColors, int *indices,
 		LOCO * colors, VisualPtr pVisual);
-static Bool OMAPCloseScreen(int scrnIndex, ScreenPtr pScreen);
+static Bool OMAPCloseScreen(CLOSE_SCREEN_ARGS_DECL);
 static Bool OMAPCreateScreenResources(ScreenPtr pScreen);
-static void OMAPBlockHandler(int i, pointer blockData, pointer pTimeout,
-		pointer pReadmask);
-static Bool OMAPSwitchMode(int scrnIndex, DisplayModePtr mode, int flags);
-static void OMAPAdjustFrame(int scrnIndex, int x, int y, int flags);
-static Bool OMAPEnterVT(int scrnIndex, int flags);
-static void OMAPLeaveVT(int scrnIndex, int flags);
-static void OMAPFreeScreen(int scrnIndex, int flags);
+static void OMAPBlockHandler(BLOCKHANDLER_ARGS_DECL);
+static Bool OMAPSwitchMode(SWITCH_MODE_ARGS_DECL);
+static void OMAPAdjustFrame(ADJUST_FRAME_ARGS_DECL);
+static Bool OMAPEnterVT(VT_FUNC_ARGS_DECL);
+static void OMAPLeaveVT(VT_FUNC_ARGS_DECL);
+static void OMAPFreeScreen(FREE_SCREEN_ARGS_DECL);
 
 
 
@@ -689,7 +687,7 @@ OMAPAccelInit(ScreenPtr pScreen)
  * save state, initialize the mode, etc.
  */
 static Bool
-OMAPScreenInit(int scrnIndex, ScreenPtr pScreen, int argc, char **argv)
+OMAPScreenInit(SCREEN_INIT_ARGS_DECL)
 {
 	ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
 	OMAPPtr pOMAP = OMAPPTR(pScrn);
@@ -804,7 +802,7 @@ OMAPScreenInit(int scrnIndex, ScreenPtr pScreen, int argc, char **argv)
 	/* Take over the virtual terminal from the console, set the desired mode,
 	 * etc.:
 	 */
-	OMAPEnterVT(scrnIndex, 0);
+	OMAPEnterVT(VT_FUNC_ARGS(0));
 
 	/* Set the desired mode(s): */
 	if (!xf86SetDesiredModes(pScrn)) {
@@ -866,9 +864,9 @@ OMAPLoadPalette(ScrnInfoPtr pScrn, int numColors, int *indices,
  * held by pScrn).
  */
 static Bool
-OMAPCloseScreen(int scrnIndex, ScreenPtr pScreen)
+OMAPCloseScreen(CLOSE_SCREEN_ARGS_DECL)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+	ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
 	OMAPPtr pOMAP = OMAPPTR(pScrn);
 
 	TRACE_ENTER();
@@ -876,12 +874,12 @@ OMAPCloseScreen(int scrnIndex, ScreenPtr pScreen)
 	drmmode_screen_fini(pScrn);
 
 	if (pScrn->vtSema == TRUE) {
-		OMAPLeaveVT(scrnIndex, 0);
+		OMAPLeaveVT(VT_FUNC_ARGS(0));
 	}
 
 	if (pOMAP->pOMAPEXA) {
 		if (pOMAP->pOMAPEXA->CloseScreen) {
-			pOMAP->pOMAPEXA->CloseScreen(scrnIndex, pScreen);
+			pOMAP->pOMAPEXA->CloseScreen(CLOSE_SCREEN_ARGS);
 		}
 	}
 
@@ -901,7 +899,7 @@ OMAPCloseScreen(int scrnIndex, ScreenPtr pScreen)
 
 	TRACE_EXIT();
 
-	return (*pScreen->CloseScreen)(scrnIndex, pScreen);
+	return (*pScreen->CloseScreen)(CLOSE_SCREEN_ARGS);
 }
 
 
@@ -928,14 +926,14 @@ OMAPCreateScreenResources(ScreenPtr pScreen)
 
 
 static void
-OMAPBlockHandler(int i, pointer blockData, pointer pTimeout, pointer pReadmask)
+OMAPBlockHandler(BLOCKHANDLER_ARGS_DECL)
 {
-	ScreenPtr pScreen = screenInfo.screens[i];
-	ScrnInfoPtr pScrn = xf86Screens[i];
+	SCREEN_PTR(arg);
+	ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
 	OMAPPtr pOMAP = OMAPPTR(pScrn);
 
 	swap(pOMAP, pScreen, BlockHandler);
-	(*pScreen->BlockHandler) (i, blockData, pTimeout, pReadmask);
+	(*pScreen->BlockHandler) (BLOCKHANDLER_ARGS);
 	swap(pOMAP, pScreen, BlockHandler);
 
 	/* TODO OMAPVideoBlockHandler(), etc.. */
@@ -948,9 +946,9 @@ OMAPBlockHandler(int i, pointer blockData, pointer pTimeout, pointer pReadmask)
  * Screen.
  */
 static Bool
-OMAPSwitchMode(int scrnIndex, DisplayModePtr mode, int flags)
+OMAPSwitchMode(SWITCH_MODE_ARGS_DECL)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+	SCRN_INFO_PTR(arg);
 	return xf86SetSingleMode(pScrn, mode, RR_Rotate_0);
 }
 
@@ -962,10 +960,10 @@ OMAPSwitchMode(int scrnIndex, DisplayModePtr mode, int flags)
  * buffer within the "viewport" of the monitor.
  */
 static void
-OMAPAdjustFrame(int scrnIndex, int x, int y, int flags)
+OMAPAdjustFrame(ADJUST_FRAME_ARGS_DECL)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
-	drmmode_adjust_frame(pScrn, x, y, flags);
+	SCRN_INFO_PTR(arg);
+	drmmode_adjust_frame(pScrn, x, y);
 }
 
 
@@ -977,9 +975,9 @@ OMAPAdjustFrame(int scrnIndex, int x, int y, int flags)
  * HW state as needed by the X server.
  */
 static Bool
-OMAPEnterVT(int scrnIndex, int flags)
+OMAPEnterVT(VT_FUNC_ARGS_DECL)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+	SCRN_INFO_PTR(arg);
 	OMAPPtr pOMAP = OMAPPTR(pScrn);
 	int ret;
 
@@ -1007,9 +1005,9 @@ OMAPEnterVT(int scrnIndex, int flags)
  * need to restore the console's HW state.
  */
 static void
-OMAPLeaveVT(int scrnIndex, int flags)
+OMAPLeaveVT(VT_FUNC_ARGS_DECL)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+	SCRN_INFO_PTR(arg);
 	OMAPPtr pOMAP = OMAPPTR(pScrn);
 	int ret;
 
@@ -1031,9 +1029,9 @@ OMAPLeaveVT(int scrnIndex, int flags)
  * up-to-and-including an unsuccessful ScreenInit() call.
  */
 static void
-OMAPFreeScreen(int scrnIndex, int flags)
+OMAPFreeScreen(FREE_SCREEN_ARGS_DECL)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+	SCRN_INFO_PTR(arg);
 	OMAPPtr pOMAP = OMAPPTR(pScrn);
 
 	TRACE_ENTER();
@@ -1045,7 +1043,7 @@ OMAPFreeScreen(int scrnIndex, int flags)
 
 	if (pOMAP->pOMAPEXA) {
 		if (pOMAP->pOMAPEXA->FreeScreen) {
-			pOMAP->pOMAPEXA->FreeScreen(scrnIndex, flags);
+			pOMAP->pOMAPEXA->FreeScreen(FREE_SCREEN_ARGS(pScrn));
 		}
 		free(pOMAP->pOMAPEXA);
 	}
diff --git a/src/omap_driver.h b/src/omap_driver.h
index ede45e4..d715f89 100644
--- a/src/omap_driver.h
+++ b/src/omap_driver.h
@@ -62,6 +62,7 @@
 
 #include <errno.h>
 
+#include "compat-api.h"
 #include "omap_exa.h"
 
 
@@ -219,7 +220,7 @@ static inline Bool has_dmm(OMAPPtr pOMAP)
 Bool drmmode_pre_init(ScrnInfoPtr pScrn, int fd, int cpp);
 void drmmode_screen_init(ScrnInfoPtr pScrn);
 void drmmode_screen_fini(ScrnInfoPtr pScrn);
-void drmmode_adjust_frame(ScrnInfoPtr pScrn, int x, int y, int flags);
+void drmmode_adjust_frame(ScrnInfoPtr pScrn, int x, int y);
 void drmmode_remove_fb(ScrnInfoPtr pScrn);
 Bool drmmode_page_flip(DrawablePtr draw, uint32_t fb_id, void *priv);
 void drmmode_wait_for_event(ScrnInfoPtr pScrn);
diff --git a/src/omap_exa.h b/src/omap_exa.h
index 4dc818d..acc86b8 100644
--- a/src/omap_exa.h
+++ b/src/omap_exa.h
@@ -37,6 +37,8 @@
 #include "omap_util.h"
 #include "exa.h"
 
+#include "compat-api.h"
+
 /**
  * A per-Screen structure used to communicate and coordinate between the OMAP X
  * driver and an external EXA sub-module (if loaded).
@@ -50,14 +52,14 @@ typedef struct _OMAPEXARec
 	 * generation to free per-Screen data structures (except those held by
 	 * pScrn).
 	 */
-	Bool (*CloseScreen)(int scrnIndex, ScreenPtr pScreen);
+	Bool (*CloseScreen)(CLOSE_SCREEN_ARGS_DECL);
 
 	/**
 	 * Called by X driver's FreeScreen() function at the end of each server
 	 * lifetime to free per-ScrnInfoRec data structures, to close any external
 	 * connections (e.g. with PVR2D, DRM), etc.
 	 */
-	void (*FreeScreen)(int scrnIndex, int flags);
+	void (*FreeScreen)(FREE_SCREEN_ARGS_DECL);
 
 	/** get formats supported by PutTextureImage() (for dri2 video..) */
 #define MAX_FORMATS 16
-- 
1.7.9.5

