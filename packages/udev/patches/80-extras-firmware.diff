diff -ruNp udev-117~/extras/firmware_helper/Makefile udev-117/extras/firmware_helper/Makefile
--- udev-117~/extras/firmware_helper/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ udev-117/extras/firmware_helper/Makefile	2007-12-14 14:21:31.000000000 +0000
@@ -0,0 +1,68 @@
+# Copyright Â© 2005 Canonical Ltd.
+# Author: Scott James Remnant <scott@ubuntu.com>
+#
+# Released under the GNU General Public License, version 2.
+
+PROG = firmware_helper
+OBJ =
+HEADERS =
+GEN_HEADERS =
+MAN_PAGES =
+
+prefix =
+etcdir =	${prefix}/etc
+sbindir =	${prefix}/sbin
+usrbindir =	${prefix}/usr/bin
+usrsbindir =	${prefix}/usr/sbin
+libudevdir =	${prefix}/lib/udev
+mandir =	${prefix}/usr/share/man
+configdir =	${etcdir}/udev/
+
+INSTALL = install -c
+INSTALL_PROGRAM = ${INSTALL}
+INSTALL_DATA  = ${INSTALL} -m 644
+INSTALL_SCRIPT = ${INSTALL}
+
+all: $(PROG) $(MAN_PAGES)
+.PHONY: all
+.DEFAULT: all
+
+%.o: %.c $(GEN_HEADERS)
+	$(E) "  CC      " $@
+	$(Q) $(CC) -c $(CFLAGS) $< -o $@
+
+$(PROG): %: $(HEADERS) %.o $(OBJS)
+	$(E) "  LD      " $@
+	$(Q) $(LD) $(LDFLAGS) $@.o $(OBJS) -o $@ $(LIBUDEV) $(LIB_OBJS)
+
+# man pages
+%.8: %.xml
+	$(E) "  XMLTO   " $@
+	$(Q) xmlto man $?
+.PRECIOUS: %.8
+
+clean:
+	$(E) "  CLEAN   "
+	$(Q) rm -f $(PROG) $(OBJS) $(GEN_HEADERS)
+.PHONY: clean
+
+install-bin: all
+	$(INSTALL_SCRIPT) -D $(PROG) $(DESTDIR)$(libudevdir)/$(PROG)
+.PHONY: install-bin
+
+uninstall-bin:
+	- rm $(DESTDIR)$(libudevdir)/$(PROG)
+.PHONY: uninstall-bin
+
+install-man:
+	@echo "Please create a man page for this tool."
+.PHONY: install-man
+
+uninstall-man:
+	@echo "Please create a man page for this tool."
+.PHONY: uninstall-man
+
+install-config:
+	@echo "no config file to install"
+.PHONY: install-config
+
diff -ruNp udev-117~/extras/firmware_helper/firmware_helper.c udev-117/extras/firmware_helper/firmware_helper.c
--- udev-117~/extras/firmware_helper/firmware_helper.c	1970-01-01 01:00:00.000000000 +0100
+++ udev-117/extras/firmware_helper/firmware_helper.c	2007-12-14 14:21:31.000000000 +0000
@@ -0,0 +1,169 @@
+/*
+ * A simple firmware helper program.
+ * 
+ * Copyright 2005 Red Hat, Inc.
+ *
+ *	This program is free software; you can redistribute it and/or modify it
+ *	under the terms of the GNU General Public License as published by the
+ *	Free Software Foundation version 2 of the License.
+ */
+
+#include <errno.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <syslog.h>
+#include <unistd.h>
+#include <sys/stat.h>
+#include <sys/utsname.h>
+
+#include "../../udev.h"
+
+#define PATH_SIZE			256
+
+#ifdef USE_LOG
+void log_message(int priority, const char *format, ...)
+{
+	va_list args;
+	static int udev_log = -1;
+
+	if (udev_log == -1) {
+		const char *value;
+
+		value = getenv("UDEV_LOG");
+		if (value)
+			udev_log = log_priority(value);
+		else
+			udev_log = LOG_ERR;
+	}
+
+	if (priority > udev_log)
+		return;
+
+	va_start(args, format);
+	vsyslog(priority, format, args);
+	va_end(args);
+}
+#endif
+
+/* Set the 'loading' attribute for a firmware device.
+ * 1 == currently loading
+ * 0 == done loading
+ * -1 == error
+ */
+static int set_loading(const char *device, int value) {
+	char loading_path[PATH_SIZE];
+	int rc;
+	FILE *f;
+
+	snprintf(loading_path, sizeof(loading_path), "/sys/%s/loading", device);
+	loading_path[sizeof(loading_path)-1] = '\0';
+	f = fopen(loading_path, "w");
+	if (!f)
+		return -1;
+	rc = fprintf(f, "%d", value);
+	fclose(f);
+	if (rc < 0)
+		return rc;
+	return 0;
+}
+
+int main(int argc, char **argv) {
+	char *devpath, *firmware, *action, *driver;
+	char fw_path[PATH_SIZE];
+	char data_path[PATH_SIZE];
+	struct utsname utsbuf;
+	int fw_fd;
+	char *fw_buffer;
+	size_t fw_buffer_size;
+	size_t count;
+	int i, loaded = 0;
+	int rc = 0;
+
+	logging_init("firmware_helper");
+
+	driver = getenv("PHYSDEVDRIVER");
+	if (!driver)
+		driver = "(unknown)";
+	devpath = getenv("DEVPATH");
+	firmware = getenv("FIRMWARE");
+	action = getenv("ACTION");
+	if (!devpath || !firmware || !action || strcmp(action,"add") != 0) {
+		err("missing devpath, action or firmware");
+		exit(1);
+	}
+
+	if (uname(&utsbuf)) {
+		err("unable to get kernel version");
+		exit(1);
+	}
+
+	dbg("try to load firmware '%s' for '%s'", firmware, devpath);
+	set_loading(devpath, 1);
+
+	for (i = 0; i < 2; i++) {
+		switch (i) {
+		case 0: /* /lib/firmware/$VERSION/$FIRMWARE */
+			snprintf(fw_path, sizeof(fw_path),
+				 "/lib/firmware/%s/%s", utsbuf.release,
+				 firmware);
+			break;
+		case 1: /* /lib/firmware/$FIRMWARE */
+			snprintf(fw_path, sizeof(fw_path),
+				 "/lib/firmware/%s", firmware);
+			break;
+		}
+		fw_path[sizeof(fw_path)-1] = '\0';
+
+		dbg("looking for firmware at '%s'", fw_path);
+		if (file_map(fw_path, &fw_buffer, &fw_buffer_size) != 0 || fw_buffer_size == 0) {
+			fw_buffer = NULL;
+			continue;
+		}
+
+		dbg("firmware found");
+		snprintf(data_path, sizeof(data_path), "/sys/%s/data", devpath);
+		data_path[sizeof(data_path)-1] = '\0';
+		fw_fd = open(data_path, O_RDWR);
+		if (fw_fd < 0) {
+			rc = errno;
+			goto out_err;
+		}
+
+		count = 0;
+		while (count < fw_buffer_size) {
+			ssize_t c;
+
+			c = write(fw_fd, fw_buffer+count, fw_buffer_size-count);
+			if (c <= 0) {
+				rc = errno;
+				close(fw_fd);
+				goto out_err;
+			}
+			count += c;
+		}
+
+		close(fw_fd);
+		file_unmap(fw_buffer, fw_buffer_size);
+		loaded = 1;
+	}
+
+	if (!loaded)
+		goto out_err;
+
+	set_loading(devpath, 0);
+	info("loaded '%s' for device '%s'", fw_path, devpath);
+
+	logging_close();
+	return 0;
+
+out_err:
+	if (fw_buffer)
+		file_unmap(fw_buffer, fw_buffer_size);
+	set_loading(devpath, -1);
+
+	err("error loading '%s' for device '%s' with driver '%s'", fw_path, devpath, driver);
+	logging_close();
+	return rc;
+}
