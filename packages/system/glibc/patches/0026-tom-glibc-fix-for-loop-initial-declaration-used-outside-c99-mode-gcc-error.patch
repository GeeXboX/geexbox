--- glibc/locale/programs/ld-ctype.c	2016-03-01 20:05:03.175690623 +0100
+++ glibc/locale/programs/ld-ctype.c-new	2016-03-01 20:18:19.335664464 +0100
@@ -2935,12 +2935,12 @@
 	 class `lower' *must* be in class `alpha'.  */
       unsigned long int mask = BIT (tok_upper) | BIT (tok_lower);
       unsigned long int maskw = BITw (tok_upper) | BITw (tok_lower);
-
-      for (size_t cnt = 0; cnt < 256; ++cnt)
+      size_t cnt ;
+      for (cnt = 0; cnt < 256; ++cnt)
 	if ((ctype->class256_collection[cnt] & mask) != 0)
 	  ctype->class256_collection[cnt] |= BIT (tok_alpha);
 
-      for (size_t cnt = 0; cnt < ctype->class_collection_act; ++cnt)
+      for (cnt = 0; cnt < ctype->class_collection_act; ++cnt)
 	if ((ctype->class_collection[cnt] & maskw) != 0)
 	  ctype->class_collection[cnt] |= BITw (tok_alpha);
     }
@@ -2957,12 +2957,12 @@
   {
     unsigned long int mask = BIT (tok_alpha) | BIT (tok_digit);
     unsigned long int maskw = BITw (tok_alpha) | BITw (tok_digit);
-
-    for (size_t cnt = 0; cnt < 256; ++cnt)
+    size_t cnt ;
+    for (cnt = 0; cnt < 256; ++cnt)
       if ((ctype->class256_collection[cnt] & mask) != 0)
 	ctype->class256_collection[cnt] |= BIT (tok_alnum);
 
-    for (size_t cnt = 0; cnt < ctype->class_collection_act; ++cnt)
+    for (cnt = 0; cnt < ctype->class_collection_act; ++cnt)
       if ((ctype->class_collection[cnt] & maskw) != 0)
 	ctype->class_collection[cnt] |= BITw (tok_alnum);
   }
@@ -3173,12 +3173,12 @@
       unsigned long int maskw = BITw (tok_upper) | BITw (tok_lower) |
 	BITw (tok_alpha) | BITw (tok_digit) | BITw (tok_xdigit) |
 	BITw (tok_punct);
-
-      for (size_t cnt = 0; cnt < ctype->class_collection_act; ++cnt)
+      size_t cnt ;
+      for (cnt = 0; cnt < ctype->class_collection_act; ++cnt)
 	if ((ctype->class_collection[cnt] & maskw) != 0)
 	  ctype->class_collection[cnt] |= BITw (tok_graph);
 
-      for (size_t cnt = 0; cnt < 256; ++cnt)
+      for (cnt = 0; cnt < 256; ++cnt)
 	if ((ctype->class256_collection[cnt] & mask) != 0)
 	  ctype->class256_collection[cnt] |= BIT (tok_graph);
     }
@@ -3195,12 +3195,12 @@
 	BITw (tok_alpha) | BITw (tok_digit) | BITw (tok_xdigit) |
 	BITw (tok_punct);
       struct charseq *seq;
-
-      for (size_t cnt = 0; cnt < ctype->class_collection_act; ++cnt)
+      size_t cnt ;
+      for (cnt = 0; cnt < ctype->class_collection_act; ++cnt)
 	if ((ctype->class_collection[cnt] & maskw) != 0)
 	  ctype->class_collection[cnt] |= BITw (tok_print);
 
-      for (size_t cnt = 0; cnt < 256; ++cnt)
+      for (cnt = 0; cnt < 256; ++cnt)
 	if ((ctype->class256_collection[cnt] & mask) != 0)
 	  ctype->class256_collection[cnt] |= BIT (tok_print);
 
@@ -3307,13 +3307,14 @@
     /* "If this keyword [tolower] is not specified, the mapping shall be
        the reverse mapping of the one specified to `toupper'."  [P1003.2]  */
     {
-      for (size_t cnt = 0; cnt < ctype->map_collection_act[0]; ++cnt)
+      size_t cnt ;
+      for (cnt = 0; cnt < ctype->map_collection_act[0]; ++cnt)
 	if (ctype->map_collection[0][cnt] != 0)
 	  ELEM (ctype, map_collection, [1],
 		ctype->map_collection[0][cnt])
 	    = ctype->charnames[cnt];
 
-      for (size_t cnt = 0; cnt < 256; ++cnt)
+      for (cnt = 0; cnt < 256; ++cnt)
 	if (ctype->map256_collection[0][cnt] != 0)
 	  ctype->map256_collection[1][ctype->map256_collection[0][cnt]] = cnt;
     }
@@ -3324,8 +3325,8 @@
 	WITH_CUR_LOCALE (error (0, 0, _("\
 %s: field `%s' does not contain exactly ten entries"),
 				"LC_CTYPE", "outdigit"));
-
-      for (size_t cnt = ctype->outdigits_act; cnt < 10; ++cnt)
+      size_t cnt ;
+      for (cnt = ctype->outdigits_act; cnt < 10; ++cnt)
 	{
 	  ctype->mboutdigits[cnt] = charmap_find_symbol (charmap,
 							 (char *) digits + cnt,
@@ -3810,8 +3811,9 @@
       }
 
     /* Now add the explicitly specified widths.  */
+    size_t cnt ;
     if (charmap->width_rules != NULL)
-      for (size_t cnt = 0; cnt < charmap->nwidth_rules; ++cnt)
+      for (cnt = 0; cnt < charmap->nwidth_rules; ++cnt)
         {
           unsigned char bytes[charmap->mb_cur_max];
           int nbytes = charmap->width_rules[cnt].from->nbytes;
@@ -3963,7 +3965,8 @@
 	 - to-string array.
       */
       from_len = to_len = 0;
-      for (size_t cnt = 0; cnt < number; ++cnt)
+      size_t cnt ;
+      for (cnt = 0; cnt < number; ++cnt)
 	{
 	  struct translit_to_t *srunp;
 	  from_len += wcslen_uint32 (sorted[cnt]->from) + 1;
@@ -3986,7 +3989,7 @@
 
       from_len = 0;
       to_len = 0;
-      for (size_t cnt = 0; cnt < number; ++cnt)
+      for (cnt = 0; cnt < number; ++cnt)
 	{
 	  size_t len;
 	  struct translit_to_t *srunp;
