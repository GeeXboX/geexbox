From 179cec1d2f919d8d8096d6030b0ad9b6285dfd4d Mon Sep 17 00:00:00 2001
From: Bryce Harrington <bryce@bryceharrington.org>
Date: Mon, 23 Mar 2009 14:25:18 -0700
Subject: [PATCH] Check null pointers to not crash on keyrepeat with Xinerama LP: (#324465)

With -nvidia, when using Xinerama, holding down a key in a text field
on a non-primary screen can cause an X crash.  This is caused because
the MIPOINTER(pDev) can return a NULL pointer for a non-null pDev in
some cases, and the mipointer.c code lacks checks for this condition.

MIPOINTER() is a macro #defined locally to mipointer.c, which calls into
dixLookupPrivate(), a routine which returns NULL in at least some
circumstances - such as if the memory could not be xcalloc'd for
whatever reason.  Hopefully upstream can provide a better fix for this,
but for now it seems reasonable to check the return values of this macro
for NULL before usage, as a minimum.

diff -Naur xorg-server-1.6.99.902.orig/mi/mipointer.c xorg-server-1.6.99.902/mi/mipointer.c
--- xorg-server-1.6.99.902.orig/mi/mipointer.c	2009-09-26 14:12:02.000000000 +0200
+++ xorg-server-1.6.99.902/mi/mipointer.c	2009-09-26 19:02:00.000000000 +0200
@@ -139,6 +139,10 @@
         if (DevHasCursor(pDev))
         {
             pPointer = MIPOINTER(pDev);
+            if (pPointer == NULL) {
+                ErrorF("miPointerCloseScreen: Invalid input device pointer\n");
+                return FALSE;
+            }
 
             if (pScreen == pPointer->pScreen)
                 pPointer->pScreen = 0;
@@ -191,6 +195,10 @@
             return FALSE;
 
     pPointer = MIPOINTER(pDev);
+    if (pPointer == NULL) {
+        ErrorF("miPointerDisplayCursor: Invalid input device pointer\n");
+        return FALSE;
+    }
 
     pPointer->pCursor = pCursor;
     pPointer->pScreen = pScreen;
@@ -204,6 +212,10 @@
     miPointerPtr pPointer;
 
     pPointer = MIPOINTER(pDev);
+    if (pPointer == NULL) {
+        ErrorF("miPointerConstrainCursor: Invalid input device pointer\n");
+        return FALSE;
+    }
 
     pPointer->limits = *pBox;
     pPointer->confined = PointerConfinedToScreen(pDev);
@@ -305,6 +317,10 @@
 
     SetupScreen (pScreen);
     pPointer = MIPOINTER(pDev);
+    if (pPointer == NULL) {
+        ErrorF("miPointerWarpCursor: Invalid input device pointer\n");
+        return;
+    }
 
     if (pPointer->pScreen != pScreen)
     {
@@ -436,13 +452,17 @@
 	ScreenPtr pScreen;
         miPointerPtr pPointer;
 
-        pPointer = MIPOINTER(pDev);
-
 	pScreen = screenInfo.screens[screen_no];
 	pScreenPriv = GetScreenPrivate (pScreen);
 	(*pScreenPriv->screenFuncs->NewEventScreen) (pDev, pScreen, FALSE);
 	NewCurrentScreen (pDev, pScreen, x, y);
 
+        pPointer = MIPOINTER(pDev);
+        if (pPointer == NULL) {
+            ErrorF("miPointerSetScreen: Invalid input device pointer\n");
+            return;
+        }
+
         pPointer->limits.x2 = pScreen->width;
         pPointer->limits.y2 = pScreen->height;
 }
@@ -469,6 +489,10 @@
     SetupScreen(pScreen);
 
     pPointer = MIPOINTER(pDev);
+    if (pPointer == NULL) {
+        ErrorF("miPointerMoved: Invalid input device pointer\n");
+        return;
+    }
 
     /* Hack: We mustn't call into ->MoveCursor for anything but the
      * VCP, as this may cause a non-HW rendered cursor to be rendered during
@@ -498,6 +522,11 @@
     miPointerPtr        pPointer; 
 
     pPointer = MIPOINTER(pDev);
+    if (pPointer == NULL) {
+        ErrorF("miPointerSetPosition: Invalid input device pointer\n");
+        return;
+    }
+
     pScreen = pPointer->pScreen;
     if (!pScreen)
 	return;	    /* called before ready */
