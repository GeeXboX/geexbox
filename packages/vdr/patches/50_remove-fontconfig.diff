diff -Naur vdr-1.6.0/font.c vdr-1.6.0-nofc/font.c
--- vdr-1.6.0/font.c	2008-03-01 11:19:41.000000000 +0100
+++ vdr-1.6.0-nofc/font.c	2008-05-12 07:56:16.000000000 +0200
@@ -9,16 +9,15 @@
 
 #include "font.h"
 #include <ctype.h>
-#include <fontconfig/fontconfig.h>
 #include <ft2build.h>
 #include FT_FREETYPE_H
 #include "config.h"
 #include "osd.h"
 #include "tools.h"
 
-const char *DefaultFontOsd = "Sans Serif:Bold";
-const char *DefaultFontSml = "Sans Serif";
-const char *DefaultFontFix = "Courier:Bold";
+const char *DefaultFontOsd = "FreeSans.ttf";
+const char *DefaultFontSml = "FreeSans.ttf";
+const char *DefaultFontFix = "FreeSans.ttf";
 
 // --- cFreetypeFont ---------------------------------------------------------
 
@@ -310,29 +309,13 @@
      }
 }
 
-// --- cDummyFont ------------------------------------------------------------
-
-// A dummy font, in case there are no fonts installed:
-
-class cDummyFont : public cFont {
-public:
-  virtual int Width(uint c) const { return 10; }
-  virtual int Width(const char *s) const { return 50; }
-  virtual int Height(void) const { return 20; }
-  virtual void DrawText(cBitmap *Bitmap, int x, int y, const char *s, tColor ColorFg, tColor ColorBg, int Width) const {}
-  };
-
 // --- cFont -----------------------------------------------------------------
 
 cFont *cFont::fonts[eDvbFontSize] = { NULL };
 
 void cFont::SetFont(eDvbFont Font, const char *Name, int CharHeight)
 {
-  cFont *f = CreateFont(Name, CharHeight);
-  if (!f || !f->Height())
-     f = new cDummyFont;
-  delete fonts[Font];
-  fonts[Font] = f;
+  fonts[Font] = new cFreetypeFont(*Name == '/' ? Name : *AddDirectory(FONTDIR, Name), CharHeight);
 }
 
 const cFont *cFont::GetFont(eDvbFont Font)
@@ -343,99 +326,14 @@
      Font = fontSml;
   if (!fonts[Font]) {
      switch (Font) {
-       case fontOsd: SetFont(Font, Setup.FontOsd, Setup.FontOsdSize); break;
-       case fontSml: SetFont(Font, Setup.FontSml, Setup.FontSmlSize); break;
-       case fontFix: SetFont(Font, Setup.FontFix, Setup.FontFixSize); break;
+       case fontOsd: SetFont(Font, AddDirectory(FONTDIR, Setup.FontOsd), Setup.FontOsdSize); break;
+       case fontSml: SetFont(Font, AddDirectory(FONTDIR, Setup.FontSml), Setup.FontSmlSize); break;
+       case fontFix: SetFont(Font, AddDirectory(FONTDIR, Setup.FontFix), Setup.FontFixSize); break;
        }
      }
   return fonts[Font];
 }
 
-cFont *cFont::CreateFont(const char *Name, int CharHeight, int CharWidth)
-{
-  cString fn = GetFontFileName(Name);
-  if (*fn)
-     return new cFreetypeFont(fn, CharHeight, CharWidth);
-  return NULL;
-}
-
-bool cFont::GetAvailableFontNames(cStringList *FontNames, bool Monospaced)
-{
-  if (!FontNames->Size()) {
-     FcInit();
-     FcObjectSet *os = FcObjectSetBuild(FC_FAMILY, FC_STYLE, NULL);
-     FcPattern *pat = FcPatternCreate();
-     FcPatternAddBool(pat, FC_SCALABLE, FcTrue);
-     if (Monospaced)
-        FcPatternAddInteger(pat, FC_SPACING, FC_MONO);
-     FcFontSet* fontset = FcFontList(NULL, pat, os);
-     for (int i = 0; i < fontset->nfont; i++) {
-         char *s = (char *)FcNameUnparse(fontset->fonts[i]);
-         if (s) {
-            // Strip i18n stuff:
-            char *c = strchr(s, ':');
-            if (c) {
-               char *p = strchr(c + 1, ',');
-               if (p)
-                  *p = 0;
-               }
-            char *p = strchr(s, ',');
-            if (p) {
-               if (c)
-                  memmove(p, c, strlen(c) + 1);
-               else
-                  *p = 0;
-               }
-            // Make it user presentable:
-            s = strreplace(s, "\\", ""); // '-' is escaped
-            s = strreplace(s, "style=", "");
-            FontNames->Append(s); // takes ownership of s
-            }
-         }
-     FcFontSetDestroy(fontset);
-     FcPatternDestroy(pat);
-     FcObjectSetDestroy(os);
-     FcFini();
-     FontNames->Sort();
-     }
-  return FontNames->Size() > 0;
-}
-
-cString cFont::GetFontFileName(const char *FontName)
-{
-  cString FontFileName;
-  if (FontName) {
-     char *fn = strdup(FontName);
-     fn = strreplace(fn, ":", ":style=");
-     fn = strreplace(fn, "-", "\\-");
-     FcInit();
-     FcPattern *pat = FcNameParse((FcChar8 *)fn);
-     FcPatternAddBool(pat, FC_SCALABLE, FcTrue);
-     FcConfigSubstitute(NULL, pat, FcMatchPattern);
-     FcDefaultSubstitute(pat);
-     FcFontSet *fontset = FcFontSort(NULL, pat, FcFalse, NULL, NULL);
-     if (fontset) {
-        for (int i = 0; i < fontset->nfont; i++) {
-            FcBool scalable;
-            FcPatternGetBool(fontset->fonts[i], FC_SCALABLE, 0, &scalable);
-            if (scalable) {
-               FcChar8 *s = NULL;
-               FcPatternGetString(fontset->fonts[i], FC_FILE, 0, &s);
-               FontFileName = (char *)s;
-               break;
-               }
-            }
-        FcFontSetDestroy(fontset);
-        }
-     else
-        esyslog("ERROR: no usable font found for '%s'", FontName);
-     FcPatternDestroy(pat);
-     free(fn);
-     FcFini();
-     }
-  return FontFileName;
-}
-
 // --- cTextWrapper ----------------------------------------------------------
 
 cTextWrapper::cTextWrapper(void)
diff -Naur vdr-1.6.0/font.h vdr-1.6.0-nofc/font.h
--- vdr-1.6.0/font.h	2007-06-23 12:09:14.000000000 +0200
+++ vdr-1.6.0-nofc/font.h	2008-05-12 08:03:31.000000000 +0200
@@ -16,6 +16,7 @@
 
 #define MAXFONTNAME 64
 #define MAXFONTSIZE 64
+#define FONTDIR     "/usr/share/fonts"
 
 enum eDvbFont {
   fontOsd,
@@ -49,7 +50,7 @@
           ///< Draws the given text into the Bitmap at position (x, y) with the given colors.
           ///< The text will not exceed the given Width (if > 0), and will end with a complete character.
   static void SetFont(eDvbFont Font, const char *Name, int CharHeight);
-          ///< Sets the given Font to use the font data according to Name (see CreateFont())
+          ///< Sets the given Font to use the font data according to Name
           ///< and make its characters CharHeight pixels high.
   static const cFont *GetFont(eDvbFont Font);
           ///< Gets the given Font, which was previously set by a call to SetFont().
@@ -57,23 +58,6 @@
           ///< The caller must not use the returned font outside the scope in which
           ///< it was retrieved by the call to GetFont(), because a call to SetFont()
           ///< may delete an existing font.
-  static cFont *CreateFont(const char *Name, int CharHeight, int CharWidth = 0);
-          ///< Creates a new font object with the given Name and makes its characters
-          ///< CharHeight pixels high. If CharWidth is given, it overwrites the font's
-          ///< default width. Name is of the form "Family:Style", for instance
-          ///< "Verdana:Bold Italic" or "Times New Roman". See GetAvailableFontNames()
-          ///< for how to get a list of all available font names.
-          ///< If the requested font can't be created, NULL is returned.
-          ///< The caller must delete the font when it is no longer needed.
-  static bool GetAvailableFontNames(cStringList *FontNames, bool Monospaced = false);
-          ///< Queries the font configuration for a list of available font names,
-          ///< which is returned in FontNames. If Monospaced is true, only
-          ///< monospaced fonts will be returned. The resulting font names are
-          ///< in a format that can be used with GetFontFileName() to get the name
-          ///< of the actual font file.
-          ///< Returns true if any font names were found.
-  static cString GetFontFileName(const char *FontName);
-          ///< Retruns the actual font file name for the given FontName.
   };
 
 class cTextWrapper {
diff -Naur vdr-1.6.0/Makefile vdr-1.6.0-nofc/Makefile
--- vdr-1.6.0/Makefile	2008-02-29 22:43:03.000000000 +0100
+++ vdr-1.6.0-nofc/Makefile	2008-05-12 07:50:11.000000000 +0200
@@ -20,7 +20,7 @@
 MANDIR   = $(PREFIX)/share/man
 BINDIR   = $(PREFIX)/bin
 LOCDIR   = ./locale
-LIBS     = -ljpeg -lpthread -ldl -lrt -lfreetype -lfontconfig
+LIBS     = -ljpeg -lpthread -ldl -lrt -lfreetype
 INCLUDES = -I/usr/include/freetype2
 
 PLUGINDIR= ./PLUGINS
diff -Naur vdr-1.6.0/menu.c vdr-1.6.0-nofc/menu.c
--- vdr-1.6.0/menu.c	2008-03-16 12:15:28.000000000 +0100
+++ vdr-1.6.0-nofc/menu.c	2008-05-12 08:10:59.000000000 +0200
@@ -2207,7 +2207,7 @@
   cThemes themes;
   int originalThemeIndex;
   int themeIndex;
-  cStringList fontOsdNames, fontSmlNames, fontFixNames;
+  cFileNameList fontNames;
   int fontOsdIndex, fontSmlIndex, fontFixIndex;
   virtual void Set(void);
 public:
@@ -2224,15 +2224,12 @@
   skinDescriptions = new const char*[numSkins];
   themes.Load(Skins.Current()->Name());
   themeIndex = originalThemeIndex = Skins.Current()->Theme() ? themes.GetThemeIndex(Skins.Current()->Theme()->Description()) : 0;
-  cFont::GetAvailableFontNames(&fontOsdNames);
-  cFont::GetAvailableFontNames(&fontSmlNames);
-  cFont::GetAvailableFontNames(&fontFixNames, true);
-  fontOsdNames.Insert(strdup(DefaultFontOsd));
-  fontSmlNames.Insert(strdup(DefaultFontSml));
-  fontFixNames.Insert(strdup(DefaultFontFix));
-  fontOsdIndex = max(0, fontOsdNames.Find(Setup.FontOsd));
-  fontSmlIndex = max(0, fontSmlNames.Find(Setup.FontSml));
-  fontFixIndex = max(0, fontFixNames.Find(Setup.FontFix));
+  fontNames.Load(FONTDIR);
+  if (fontNames.Size()) {
+     fontOsdIndex = max(0, fontNames.Find(Setup.FontOsd));
+     fontSmlIndex = max(0, fontNames.Find(Setup.FontSml));
+     fontFixIndex = max(0, fontNames.Find(Setup.FontFix));
+    }
   Set();
 }
 
@@ -2262,9 +2259,9 @@
   Add(new cMenuEditIntItem( tr("Setup.OSD$Message time (s)"),       &data.OSDMessageTime, 1, 60));
   Add(new cMenuEditStraItem(tr("Setup.OSD$Use small font"),         &data.UseSmallFont, 3, useSmallFontTexts));
   Add(new cMenuEditBoolItem(tr("Setup.OSD$Anti-alias"),             &data.AntiAlias));
-  Add(new cMenuEditStraItem(tr("Setup.OSD$Default font"),           &fontOsdIndex, fontOsdNames.Size(), &fontOsdNames[0]));
-  Add(new cMenuEditStraItem(tr("Setup.OSD$Small font"),             &fontSmlIndex, fontSmlNames.Size(), &fontSmlNames[0]));
-  Add(new cMenuEditStraItem(tr("Setup.OSD$Fixed font"),             &fontFixIndex, fontFixNames.Size(), &fontFixNames[0]));
+  Add(new cMenuEditStraItem(tr("Setup.OSD$Default font"),           &fontOsdIndex, fontNames.Size(), &fontNames[0]));
+  Add(new cMenuEditStraItem(tr("Setup.OSD$Small font"),             &fontSmlIndex, fontNames.Size(), &fontNames[0]));
+  Add(new cMenuEditStraItem(tr("Setup.OSD$Fixed font"),             &fontFixIndex, fontNames.Size(), &fontNames[0]));
   Add(new cMenuEditIntItem( tr("Setup.OSD$Default font size (pixel)"), &data.FontOsdSize, 10, MAXFONTSIZE));
   Add(new cMenuEditIntItem( tr("Setup.OSD$Small font size (pixel)"),&data.FontSmlSize, 10, MAXFONTSIZE));
   Add(new cMenuEditIntItem( tr("Setup.OSD$Fixed font size (pixel)"),&data.FontFixSize, 10, MAXFONTSIZE));
@@ -2305,9 +2302,11 @@
         }
      if (data.UseSmallFont != Setup.UseSmallFont || data.AntiAlias != Setup.AntiAlias)
         ModifiedApperance = true;
-     Utf8Strn0Cpy(data.FontOsd, fontOsdNames[fontOsdIndex], sizeof(data.FontOsd));
-     Utf8Strn0Cpy(data.FontSml, fontSmlNames[fontSmlIndex], sizeof(data.FontSml));
-     Utf8Strn0Cpy(data.FontFix, fontFixNames[fontFixIndex], sizeof(data.FontFix));
+     if(fontNames.Size()) {
+     Utf8Strn0Cpy(data.FontOsd, fontNames[fontOsdIndex], sizeof(data.FontOsd));
+     Utf8Strn0Cpy(data.FontSml, fontNames[fontSmlIndex], sizeof(data.FontSml));
+     Utf8Strn0Cpy(data.FontFix, fontNames[fontFixIndex], sizeof(data.FontFix));
+     }
      if (strcmp(data.FontOsd, Setup.FontOsd) || data.FontOsdSize != Setup.FontOsdSize) {
         cFont::SetFont(fontOsd, data.FontOsd, data.FontOsdSize);
         ModifiedApperance = true;
diff -Naur vdr-1.6.0/vdr.c vdr-1.6.0-nofc/vdr.c
--- vdr-1.6.0/vdr.c	2008-03-14 14:22:39.000000000 +0100
+++ vdr-1.6.0-nofc/vdr.c	2008-05-12 08:01:37.000000000 +0200
@@ -575,12 +575,6 @@
         ))
      EXIT(2);
 
-  if (!*cFont::GetFontFileName(Setup.FontOsd)) {
-     const char *msg = "no fonts available - OSD will not show any text!";
-     fprintf(stderr, "vdr: %s\n", msg);
-     esyslog("ERROR: %s", msg);
-     }
-
   // Recordings:
 
   Recordings.Update();
