Index: drivers/kcompat.h
===================================================================
RCS file: /cvsroot/lirc/lirc/drivers/kcompat.h,v
retrieving revision 5.36
diff -u -r5.36 kcompat.h
--- a/drivers/kcompat.h	14 May 2008 16:37:49 -0000	5.36
+++ b/drivers/kcompat.h	27 Sep 2008 03:12:40 -0000
@@ -36,7 +36,7 @@
 	class_simple_destroy(cls);
 }
 
-#define lirc_device_create(cs, parent, dev, fmt, args...) \
+#define lirc_device_create(cs, parent, dev, drvdata, fmt, args...) \
 	class_simple_device_add(cs, dev, parent, fmt, ## args)
 
 static inline void lirc_device_destroy(lirc_class_t *cls, dev_t devt)
@@ -48,20 +48,29 @@
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 15)
 
-#define lirc_device_create(cs, parent, dev, fmt, args...) \
+#define lirc_device_create(cs, parent, dev, drvdata, fmt, args...) \
 	class_device_create(cs, dev, parent, fmt, ## args)
 
 #else /* >= 2.6.15 */
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)
 
-#define lirc_device_create(cs, parent, dev, fmt, args...) \
+#define lirc_device_create(cs, parent, dev, drvdata, fmt, args...) \
 	class_device_create(cs, NULL, dev, parent, fmt, ## args)
 
 #else /* >= 2.6.26 */
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 27)
+
+#define lirc_device_create(cs, parent, dev, drvdata, fmt, args...) \
+	class_device_create(cs, parent, dev, fmt, ## args)
+
+#else /* >= 2.6.27 */
+
 #define lirc_device_create device_create
 
+#endif /* >= 2.6.27 */
+
 #endif /* >= 2.6.26 */
 
 #define LIRC_DEVFS_PREFIX
Index: drivers/lirc_dev/lirc_dev.c
===================================================================
RCS file: /cvsroot/lirc/lirc/drivers/lirc_dev/lirc_dev.c,v
retrieving revision 1.60
diff -u -r1.60 lirc_dev.c
--- a/drivers/lirc_dev/lirc_dev.c	6 Sep 2008 07:30:16 -0000	1.60
+++ b/drivers/lirc_dev/lirc_dev.c	27 Sep 2008 03:12:41 -0000
@@ -397,7 +397,7 @@
 			DEV_LIRC "/%u", ir->p.minor);
 #endif
 	(void) lirc_device_create(lirc_class, ir->p.dev,
-				  MKDEV(IRCTL_DEV_MAJOR, ir->p.minor),
+				  MKDEV(IRCTL_DEV_MAJOR, ir->p.minor), NULL,
 				  "lirc%u", ir->p.minor);
 
 	if (p->sample_rate || p->get_queue) {
