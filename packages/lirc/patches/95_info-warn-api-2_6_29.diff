diff -Naur lirc-0.8.4a.orig/drivers/lirc_cmdir/commandir.c lirc-0.8.4a/drivers/lirc_cmdir/commandir.c
--- lirc-0.8.4a.orig/drivers/lirc_cmdir/commandir.c	2009-02-01 00:38:35.000000000 +0100
+++ lirc-0.8.4a/drivers/lirc_cmdir/commandir.c	2009-02-01 00:39:42.000000000 +0100
@@ -271,7 +271,7 @@
 		return -1;
 	}
 
-	info(DRIVER_DESC " " DRIVER_VERSION);
+	printk(DRIVER_DESC " " DRIVER_VERSION);
 
 	return 0;
 #else
@@ -362,7 +362,7 @@
 			break;
 	}
 	if (minor >= MAX_DEVICES) {
-		info("Too many devices plugged in, cannot handle this device.");
+		printk("Too many devices plugged in, cannot handle this device.");
 		goto exit;
 	}
 
@@ -435,7 +435,7 @@
 				     &cmdir_fops, NULL);
 
 	/* let the user know what node this device is now attached to */
-	info("CommandIR USB device now attached to commandir%d", dev->minor);
+	printk("CommandIR USB device now attached to commandir%d", dev->minor);
 
 	/* should reset just the one that was plugged in */
 	reset_cmdir(minor);
@@ -530,7 +530,7 @@
 		minor = minor-USB_CMDIR_MINOR_BASE;
 
 	/* let the user know what node this device is now attached to */
-	info("CommandIR USB device now attached to commandir%d", minor);
+	printk("CommandIR USB device now attached to commandir%d", minor);
 
 	reset_cmdir(minor);
 
@@ -597,7 +597,7 @@
 		up(&dev->sem);
 	}
 
-	info("CommandIR #%d now disconnected", minor);
+	printk("CommandIR #%d now disconnected", minor);
 	up(&minor_table_mutex);
 
 	/* check if default RX device still exists */
@@ -608,7 +608,7 @@
 			if (cmdir_check(rx_device) == 0) break;
 		}
 		if (minor > 0)
-			info("Active Receiver is on CommandIR #%d", rx_device);
+			printk("Active Receiver is on CommandIR #%d", rx_device);
 	}
 
 }
@@ -640,7 +640,7 @@
 	if (minor >= USB_CMDIR_MINOR_BASE)
 		minor = minor-USB_CMDIR_MINOR_BASE;
 
-	info("CommandIR #%d now disconnected", minor);
+	printk("CommandIR #%d now disconnected", minor);
 
 	/* check if default RX device still exists */
 	if (minor == rx_device) {
@@ -651,7 +651,7 @@
 				break;
 		}
 		if (minor > 0)
-			info("Active Receiver is on CommandIR #%d", rx_device);
+			printk("Active Receiver is on CommandIR #%d", rx_device);
 	}
 }
 #endif
@@ -755,7 +755,7 @@
 		multiplier = multiplier*0x10;
 	transmitters |= multiplier * 0x0F;
 	next_transmitters = transmitters;
-	info("commandir%d reset", device_num);
+	printk("commandir%d reset", device_num);
 	return;
 }
 
@@ -831,7 +831,7 @@
 static void print_cmdir(int device_num)
 {
 	update_cmdir_string(device_num);
-	info("%s", cmdir_var);
+	printk("%s", cmdir_var);
 	return;
 }
 
@@ -1027,7 +1027,7 @@
 					break;
 				case cFLASH:
 					ctrl_buffer[0] = FLASH_HEADER;
-					info("Flashing indicators on device %d",
+					printk("Flashing indicators on device %d",
 					     minor);
 					retval = write_core(ctrl_buffer,
 						MCU_CTRL_SIZE,
@@ -1046,12 +1046,12 @@
 					break;
 				case cRX:
 					rx_device = minor;
-					info("Default receiver set to %d",
+					printk("Default receiver set to %d",
 					     minor);
 					break;
 				case cLCD:
 					lcd_device = minor;
-					info("commandir: Default LCD set to %d",
+					printk("commandir: Default LCD set to %d",
 					     minor);
 					break;
 				default:
diff -Naur lirc-0.8.4a.orig/drivers/lirc_imon/lirc_imon.c lirc-0.8.4a/drivers/lirc_imon/lirc_imon.c
--- lirc-0.8.4a.orig/drivers/lirc_imon/lirc_imon.c	2009-02-01 00:38:35.000000000 +0100
+++ lirc-0.8.4a/drivers/lirc_imon/lirc_imon.c	2009-02-01 00:39:28.000000000 +0100
@@ -315,7 +315,7 @@
 	kfree(context);
 
 	if (debug)
-		info("%s: context deleted", __FUNCTION__);
+		printk("%s: context deleted", __FUNCTION__);
 }
 
 static inline void deregister_from_lirc(struct imon_context *context)
@@ -328,7 +328,7 @@
 		err("%s: unable to deregister from lirc(%d)",
 			__FUNCTION__, retval);
 	else
-		info("Deregistered iMON plugin(minor:%d)", minor);
+		printk("Deregistered iMON plugin(minor:%d)", minor);
 
 }
 
@@ -387,7 +387,7 @@
 		MOD_INC_USE_COUNT;
 		context->vfd_isopen = TRUE;
 		file->private_data = context;
-		info("VFD port opened");
+		printk("VFD port opened");
 	}
 
 	UNLOCK_CONTEXT;
@@ -424,7 +424,7 @@
 	} else {
 		context->vfd_isopen = FALSE;
 		MOD_DEC_USE_COUNT;
-		info("VFD port closed");
+		printk("VFD port closed");
 		if (!context->dev_present && !context->ir_isopen) {
 			/* Device disconnected before close and IR port is not
 			 * open. If IR port is open, context will be deleted by
@@ -755,7 +755,7 @@
 		  __FUNCTION__);
 		goto exit;
 	} else if (debug) {
-		info("%s: write %d bytes to LCD", __FUNCTION__, (int) n_bytes);
+		printk("%s: write %d bytes to LCD", __FUNCTION__, (int) n_bytes);
 	}
 exit:
 	UNLOCK_CONTEXT;
@@ -832,7 +832,7 @@
 	else {
 		MOD_INC_USE_COUNT;
 		context->ir_isopen = TRUE;
-		info("IR port opened");
+		printk("IR port opened");
 	}
 
 exit:
@@ -861,7 +861,7 @@
 	context->ir_isopen = FALSE;
 	context->ir_isassociating = FALSE;
 	MOD_DEC_USE_COUNT;
-	info("IR port closed");
+	printk("IR port closed");
 
 	if (!context->dev_present) {
 		/* Device disconnected while IR port was
@@ -892,7 +892,7 @@
 	int i;
 
 	if (debug)
-		info("submitting data to LIRC\n");
+		printk("submitting data to LIRC\n");
 
 	value *= BIT_DURATION;
 	value &= PULSE_MASK;
@@ -923,7 +923,7 @@
 #endif
 
 	if (len != 8) {
-		warn("%s: invalid incoming packet size(%d)",
+		printk("%s: invalid incoming packet size(%d)",
 		     __FUNCTION__, len);
 		return;
 	}
@@ -936,7 +936,7 @@
 	    buf[5] == 0xFF &&				/* iMON 2.4G */
 	   ((buf[6] == 0x4E && buf[7] == 0xDF) ||	/* LT */
 	    (buf[6] == 0x5E && buf[7] == 0xDF))) {	/* DT */
-		warn("%s: remote associated refid=%02X", __FUNCTION__, buf[1]);
+		printk("%s: remote associated refid=%02X", __FUNCTION__, buf[1]);
 		context->ir_isassociating = FALSE;
 	}
 
@@ -1038,7 +1038,7 @@
 			incoming_packet(context, urb);
 		break;
 	default	:
-		warn("%s: status(%d): ignored", __FUNCTION__, urb->status);
+		printk("%s: status(%d): ignored", __FUNCTION__, urb->status);
 		break;
 	}
 
@@ -1088,7 +1088,7 @@
 	struct imon_context *context = NULL;
 	int i;
 
-	info("%s: found IMON device", __FUNCTION__);
+	printk("%s: found IMON device", __FUNCTION__);
 
 	/*
 	 * If it's the LCD, as opposed to the VFD, we just need to replace
@@ -1148,7 +1148,7 @@
 			rx_endpoint = ep;
 			ir_ep_found = TRUE;
 			if (debug)
-				info("%s: found IR endpoint", __FUNCTION__);
+				printk("%s: found IR endpoint", __FUNCTION__);
 
 		} else if (!vfd_ep_found &&
 			   ep_dir == USB_DIR_OUT &&
@@ -1156,7 +1156,7 @@
 			tx_endpoint = ep;
 			vfd_ep_found = TRUE;
 			if (debug)
-				info("%s: found VFD endpoint", __FUNCTION__);
+				printk("%s: found VFD endpoint", __FUNCTION__);
 		}
 	}
 
@@ -1168,7 +1168,7 @@
 			tx_control = 1;
 			vfd_ep_found = TRUE;
 			if (debug)
-				info("%s: LCD device uses control endpoint, "
+				printk("%s: LCD device uses control endpoint, "
 				     "not interface OUT endpoint", __func__);
 		}
 	}
@@ -1184,7 +1184,7 @@
 			ir_onboard_decode = TRUE;
 
 		if (debug)
-			info("ir_onboard_decode: %d", ir_onboard_decode);
+			printk("ir_onboard_decode: %d", ir_onboard_decode);
 	}
 
 	/* Determine if VFD requires 6 packets */
@@ -1193,7 +1193,7 @@
 			vfd_proto_6p = TRUE;
 
 		if (debug)
-			info("vfd_proto_6p: %d", vfd_proto_6p);
+			printk("vfd_proto_6p: %d", vfd_proto_6p);
 	}
 
 
@@ -1281,7 +1281,7 @@
 		UNLOCK_CONTEXT;
 		goto alloc_status_switch;
 	} else
-		info("%s: Registered iMON plugin(minor:%d)",
+		printk("%s: Registered iMON plugin(minor:%d)",
 		     __FUNCTION__, lirc_minor);
 
 	/* Needed while unregistering! */
@@ -1318,11 +1318,11 @@
 
 	if (vfd_ep_found) {
 		if (debug)
-			info("Registering VFD with devfs");
+			printk("Registering VFD with devfs");
 #ifdef KERNEL_2_5
 		if (usb_register_dev(interface, &imon_class)) {
 			/* Not a fatal error, so ignore */
-			info("%s: could not get a minor number for VFD",
+			printk("%s: could not get a minor number for VFD",
 				__FUNCTION__);
 		}
 #else
@@ -1332,13 +1332,13 @@
 					USB_MAJOR, VFD_MINOR_BASE + subminor,
 					DEVFS_MODE, &vfd_fops, NULL))) {
 			/* not a fatal error so ignore */
-			info("%s: devfs register failed for VFD",
+			printk("%s: devfs register failed for VFD",
 					__FUNCTION__);
 		}
 #endif
 	}
 
-	info("%s: iMON device on usb<%d:%d> initialized",
+	printk("%s: iMON device on usb<%d:%d> initialized",
 			__FUNCTION__, dev->bus->busnum, dev->devnum);
 
 	UNLOCK_CONTEXT;
@@ -1395,7 +1395,7 @@
 #endif
 	LOCK_CONTEXT;
 
-	info("%s: iMON device disconnected", __FUNCTION__);
+	printk("%s: iMON device disconnected", __FUNCTION__);
 
 #ifdef KERNEL_2_5
 	/* sysfs_remove_group is safe to call even if sysfs_create_group
@@ -1441,8 +1441,8 @@
 {
 	int rc;
 
-	info(MOD_DESC ", v" MOD_VERSION);
-	info(MOD_AUTHOR);
+	printk(MOD_DESC ", v" MOD_VERSION);
+	printk(MOD_AUTHOR);
 
 	rc = usb_register(&imon_driver);
 	if (rc) {
@@ -1455,7 +1455,7 @@
 static void __exit imon_exit(void)
 {
 	usb_deregister(&imon_driver);
-	info("module removed. Goodbye!");
+	printk("module removed. Goodbye!");
 }
 
 
diff -Naur lirc-0.8.4a.orig/drivers/lirc_mceusb/lirc_mceusb.c lirc-0.8.4a/drivers/lirc_mceusb/lirc_mceusb.c
--- lirc-0.8.4a.orig/drivers/lirc_mceusb/lirc_mceusb.c	2009-02-01 00:38:35.000000000 +0100
+++ lirc-0.8.4a/drivers/lirc_mceusb/lirc_mceusb.c	2009-02-01 00:39:16.000000000 +0100
@@ -700,7 +700,7 @@
 			break;
 	}
 	if (minor >= MAX_DEVICES) {
-		info("Too many devices plugged in, "
+		printk("Too many devices plugged in, "
 		     "can not handle this device.");
 		goto error;
 	}
@@ -944,7 +944,7 @@
 
 	mceusb_delete(dev);
 
-	info("Microsoft IR Transceiver #%d now disconnected", minor);
+	printk("Microsoft IR Transceiver #%d now disconnected", minor);
 	up(&dev->sem);
 	up(&minor_table_mutex);
 }
@@ -974,7 +974,7 @@
 #endif
 	}
 
-	info(DRIVER_DESC " " DRIVER_VERSION);
+	printk(DRIVER_DESC " " DRIVER_VERSION);
 	return 0;
 }
 
diff -Naur lirc-0.8.4a.orig/drivers/lirc_sasem/lirc_sasem.c lirc-0.8.4a/drivers/lirc_sasem/lirc_sasem.c
--- lirc-0.8.4a.orig/drivers/lirc_sasem/lirc_sasem.c	2009-02-01 00:38:35.000000000 +0100
+++ lirc-0.8.4a/drivers/lirc_sasem/lirc_sasem.c	2009-02-01 00:39:04.000000000 +0100
@@ -260,7 +260,7 @@
 	kfree(context);
 
 	if (debug)
-		info("%s: context deleted", __FUNCTION__);
+		printk("%s: context deleted", __FUNCTION__);
 }
 
 static inline void deregister_from_lirc(struct sasem_context *context)
@@ -273,7 +273,7 @@
 		err("%s: unable to deregister from lirc (%d)",
 			__FUNCTION__, retval);
 	else
-		info("Deregistered Sasem plugin (minor:%d)", minor);
+		printk("Deregistered Sasem plugin (minor:%d)", minor);
 
 }
 
@@ -329,7 +329,7 @@
 		MOD_INC_USE_COUNT;
 		context->vfd_isopen = TRUE;
 		file->private_data = context;
-		info("VFD port opened");
+		printk("VFD port opened");
 	}
 
 	UNLOCK_CONTEXT;
@@ -366,7 +366,7 @@
 		context->vfd_contrast = (unsigned int)arg;
 		break;
 	default:
-		info("Unknown IOCTL command");
+		printk("Unknown IOCTL command");
 		UNLOCK_CONTEXT;
 		return -ENOIOCTLCMD;  /* not supported */
 	}
@@ -399,7 +399,7 @@
 	} else {
 		context->vfd_isopen = FALSE;
 		MOD_DEC_USE_COUNT;
-		info("VFD port closed");
+		printk("VFD port closed");
 		if (!context->dev_present && !context->ir_isopen) {
 
 			/* Device disconnected before close and IR port is
@@ -617,7 +617,7 @@
 	else {
 		MOD_INC_USE_COUNT;
 		context->ir_isopen = TRUE;
-		info("IR port opened");
+		printk("IR port opened");
 	}
 
 exit:
@@ -645,7 +645,7 @@
 	usb_kill_urb(context->rx_urb);
 	context->ir_isopen = FALSE;
 	MOD_DEC_USE_COUNT;
-	info("IR port closed");
+	printk("IR port closed");
 
 	if (!context->dev_present) {
 
@@ -681,7 +681,7 @@
 	struct timeval tv;
 
 	if (len != 8) {
-		warn("%s: invalid incoming packet size (%d)",
+		printk("%s: invalid incoming packet size (%d)",
 		     __FUNCTION__, len);
 		return;
 	}
@@ -756,7 +756,7 @@
 		break;
 
 	default:
-		warn("%s: status (%d): ignored",
+		printk("%s: status (%d): ignored",
 			 __FUNCTION__, urb->status);
 		break;
 	}
@@ -804,7 +804,7 @@
 	struct sasem_context *context = NULL;
 	int i;
 
-	info("%s: found Sasem device", __FUNCTION__);
+	printk("%s: found Sasem device", __FUNCTION__);
 
 #if !defined(KERNEL_2_5)
 	for (subminor = 0; subminor < MAX_DEVICES; ++subminor) {
@@ -858,7 +858,7 @@
 			rx_endpoint = ep;
 			ir_ep_found = TRUE;
 			if (debug)
-				info("%s: found IR endpoint", __FUNCTION__);
+				printk("%s: found IR endpoint", __FUNCTION__);
 
 		} else if (!vfd_ep_found &&
 			ep_dir == USB_DIR_OUT &&
@@ -867,7 +867,7 @@
 			tx_endpoint = ep;
 			vfd_ep_found = TRUE;
 			if (debug)
-				info("%s: found VFD endpoint", __FUNCTION__);
+				printk("%s: found VFD endpoint", __FUNCTION__);
 		}
 	}
 
@@ -881,7 +881,7 @@
 
 	/* Warning if no VFD endpoint */
 	if (!vfd_ep_found)
-		info("%s: no valid output (VFD) endpoint found.", __FUNCTION__);
+		printk("%s: no valid output (VFD) endpoint found.", __FUNCTION__);
 
 
 	/* Allocate memory */
@@ -962,7 +962,7 @@
 		alloc_status = 7;
 		UNLOCK_CONTEXT;
 	} else
-		info("%s: Registered Sasem plugin (minor:%d)",
+		printk("%s: Registered Sasem plugin (minor:%d)",
 			__FUNCTION__, lirc_minor);
 
 alloc_status_switch:
@@ -1012,11 +1012,11 @@
 	if (vfd_ep_found) {
 
 		if (debug)
-			info("Registering VFD with devfs");
+			printk("Registering VFD with devfs");
 #ifdef KERNEL_2_5
 		if (usb_register_dev(interface, &sasem_class))
 			/* Not a fatal error, so ignore */
-			info("%s: could not get a minor number for VFD",
+			printk("%s: could not get a minor number for VFD",
 				__FUNCTION__);
 #else
 		sprintf(name, DEVFS_NAME, subminor);
@@ -1026,12 +1026,12 @@
 				 DEVFS_MODE, &vfd_fops, NULL);
 		if (!context->devfs)
 			/* not a fatal error so ignore */
-			info("%s: devfs register failed for VFD",
+			printk("%s: devfs register failed for VFD",
 					__FUNCTION__);
 #endif
 	}
 
-	info("%s: Sasem device on usb<%d:%d> initialized",
+	printk("%s: Sasem device on usb<%d:%d> initialized",
 			__FUNCTION__, dev->bus->busnum, dev->devnum);
 
 	UNLOCK_CONTEXT;
@@ -1064,7 +1064,7 @@
 #endif
 	LOCK_CONTEXT;
 
-	info("%s: Sasem device disconnected", __FUNCTION__);
+	printk("%s: Sasem device disconnected", __FUNCTION__);
 
 #ifdef KERNEL_2_5
 	usb_set_intfdata(interface, NULL);
@@ -1106,8 +1106,8 @@
 {
 	int rc;
 
-	info(MOD_DESC ", v" MOD_VERSION);
-	info(MOD_AUTHOR);
+	printk(MOD_DESC ", v" MOD_VERSION);
+	printk(MOD_AUTHOR);
 
 	rc = usb_register(&sasem_driver);
 	if (rc < 0) {
@@ -1120,7 +1120,7 @@
 static void __exit sasem_exit(void)
 {
 	usb_deregister(&sasem_driver);
-	info("module removed. Goodbye!");
+	printk("module removed. Goodbye!");
 }
 
 
